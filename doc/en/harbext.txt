/* $DOC$
   $TEMPLATE$
      Document
   $NAME$
      Harbour Extensions
   $CATEGORY$
      Document
   $ONELINER$
      Harbour Extensions
   $DESCRIPTION$
      <b>Language extensions:</b>   </par>
      --------------------

      * Class generation and management.

              CA-Cl*pper only allowed creation of objects from a few standard
              classes.

              In Harbour, you can create your own classes--complete with
              Methods, Instance Variables, Class Variables and Inheritance.
              Entire applications can be designed and coded in Object Oriented
              style.

      * @<FunctionName>()   </par>

              Returns the pointer (address) to a function.

              The returned value is not useful to application-level programming, but
              is used at a low level to implement object oriented coding.
              (Internally, a class method is a static function and there is no
              symbol for it, so it is accessed via its address).

      * Class HBGetList

              Object oriented support for GetLists management.

      * ProcName() support for class Method names.

              Class Methods can be retrieved from the call stack.

      * Memory() has new return values.

              See hbmemory.ch

      * Transform() --> new function in format string

              @0      Make a zero padded string out of the number.

      * SToD() --> dDate

              New function that converts a yyyymmdd string to a Date value.

      * Optional Compile Time STRONG TYPE declaration (and compile time TYPE
        MISMATCH warnings)

        Example: LOCAL/STATIC Var AS ...

      * The Harbour debugger provides new interesting classes:

        - Class TDbWindow could be the foundation for a generic multi-platform

        - Class TForm

        - Class TDbMenu implement both pulldown and popup menus.

      <b>RTL enhanced functionality:</b>   </par>
      ---------------------------

      - hb_vfDirSpace( <nDir>, <nType> )

        The second parameter is a Harbour (optional) parameter and indicates the
        type of diskinfo being requested.  See en/diskspac.txt for info.

   $END$
 */
