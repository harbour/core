* amf3enc.c
* amf3dec.c
  ; amf3_Encode(), amf3_Decode()
    - there is no real serialization class-mapping included at the moment,
      due to lack of time to make a concept of it complete.
      Only anonymous (emulated on Harbour side using ObjAMF class)
      and externalizable objects are supported.

    - context->positon-- decrements should be removed from the .c code,
      before we make the functions able to work on real streams without
      buffering. There is no rewind in such situations.

  ; amf3_FromWA() - generates AMF3 array from current workarea,
    but the function doesn't have an idea of SET DELETED switch!
    It should have, because it tries to predict the number of records.
    As a workaround <bFor> parameter could be used, because it switches
    off the prediction. Another option could be creating temporary INDEX FOR,
    it should have correct ordKeyCount().

  ; amf3_Decode() - really doesn't need a hash for references, because
    reference id in AMF increase sequentially. It could be okay and faster
    to use some array with decent resize schema. Other than that benchmarks (in
    ST mode) showed that decoding speed is a little bit faster in this
    implementation than with Flash's bulit-in.

  ; .c function amf3_encode_string() does string hb_strRTrimLen()
    on a utf8 values. so far i haven't found a string that was broken
    by this, but i have a feeling that it is possible...

Note your issues too!
