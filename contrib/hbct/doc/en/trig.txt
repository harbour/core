/* $DOC$
   $NAME$
      Pi()
   $CATEGORY$
      CT3 math functions
   $ONELINER$
      Returns Pi, the perimeter-to-diameter-ratio of a circle
   $SYNTAX$
      Pi() -> nPi
   $ARGUMENTS$

   $RETURNS$
      <nPi>      the math constant Pi with maximum precision available
   $DESCRIPTION$
      The function Pi() can be used if the constant Pi is needed
      with maximum precision. One of the most known interpretations of this
      number is the constant perimeter-to-diameter-ratio of circles.
   $EXAMPLES$
      // the diameter of a circle-like swimming pool is 3.4 meters, how
      // long is the perimeter ?

      ? Str( Pi() * 3.4, 5, 3 ) + " meters" // --> 10.681 meters
   $STATUS$
      Ready
   $COMPLIANCE$
      Pi() is compatible with CT3's Pi().
   $PLATFORMS$
      All
   $FILES$
      Library is hbct.
   $SEEALSO$
      Sin(), Cos(), Tan(), Cot(), Asin(), Acos(), Atan(), Atn2(), Sinh(), Cosh(), Tanh(), RToD(), DToR()
   $END$
 */

/* $DOC$
   $NAME$
      Sin()
   $CATEGORY$
      CT3 math functions
   $ONELINER$
      Sine of the argument
   $SYNTAX$
      SIN (nRadiant) -> nSine
   $ARGUMENTS$
      <nRadiant>       an angle size given in radiants
   $RETURNS$
      <nSine>          the sine of <nRadiant>
   $DESCRIPTION$
      The function Sin() calculates the sine of an angle whose size is
      given in radiants (full angle equals 2*Pi - see DToR() for angle size
      given in degress).
      A common geometric interpretation of the Sin() function is the
      counterkathede-hypotenuse-ratio of a right-angled triangle.
   $EXAMPLES$
      ? Sin( 0.0 ) // --> 0.0
      ? Sin( 1.0 ) // --> 0.8414...
   $STATUS$
      Ready
   $COMPLIANCE$
      Sin() is compatible with CT3's Sin().
   $PLATFORMS$
      All
   $FILES$
      Library is hbct.
   $SEEALSO$
      Cos(), Tan(), Cot(), Asin(), Acos(), Atan(), Atn2(), Sinh(), Cosh(), Tanh(), RToD(), DToR(), Pi()
   $END$
 */

/* $DOC$
   $NAME$
      Cos()
   $CATEGORY$
      CT3 math functions
   $ONELINER$
      Cosine of the argument
   $SYNTAX$
      Cos( nRadiant ) -> nCosine
   $ARGUMENTS$
      <nRadiant>       an angle size given in radiants
   $RETURNS$
      <nCosine>        the cosine of <nRadiant>
   $DESCRIPTION$
      The function Cos() calculates the cosine of an angle whose size is
      given in radiants (full angle equals 2*Pi - see DToR() for angle size
      given in degress).
      A common geometric interpretation of the Cos() function is the
      ankathede-hypotenuse-ratio of a right-angled triangle.
   $EXAMPLES$
      ? Cos( 0.0 ) // --> 1.0
      ? Cos( 1.0 ) // --> 0.5403...
   $STATUS$
      Ready
   $COMPLIANCE$
      Cos() is compatible with CT3's Cos().
   $PLATFORMS$
      All
   $FILES$
      Library is hbct.
   $SEEALSO$
      Sin(), Tan(), Cot(), Asin(), Acos(), Atan(), Atn2(), Sinh(), Cosh(), Tanh(), RToD(), DToR(), Pi()
   $END$
 */

/* $DOC$
   $NAME$
      Tan()
   $CATEGORY$
      CT3 math functions
   $ONELINER$
      Tangent of the argument
   $SYNTAX$
      Tan( nRadiant ) -> nTangent
   $ARGUMENTS$
      <nRadiant>       an angle size given in radiants
   $RETURNS$
      <nTangent>       the tangent of <nRadiant>
   $DESCRIPTION$
      The function Tan() calculates the tangent of an angle whose size is
      given in radiants (full angle equals 2*Pi - see DToR() for angle size
      given in degress).
      A common geometric interpretation of the Tan() function is the
      counterkathede-ankathede-ratio of a right-angled triangle, or,
      Tan(x) = Sin(x)/Cos(x).
   $EXAMPLES$
      ? Tan( 0.0 ) // --> 0.0
      ? Tan( 1.0 ) // --> 1.5574...
   $STATUS$
      Ready
   $COMPLIANCE$
      Tan() is compatible with CT3's Tan().
   $PLATFORMS$
      All
   $FILES$
      Library is hbct.
   $SEEALSO$
      Sin(), Cos(), Cot(), Asin(), Acos(), Atan(), Atn2(), Sinh(), Cosh(), Tanh(), RToD(), DToR(), Pi()
   $END$
 */

/* $DOC$
   $NAME$
      Cot()
   $CATEGORY$
      CT3 math functions
   $ONELINER$
      Cotangent of the argument
   $SYNTAX$
      Cot( nRadiant ) -> nCotangent
   $ARGUMENTS$
      <nRadiant>       an angle size given in radiants
   $RETURNS$
      <nCotangent>     the cotangent of <nRadiant>
   $DESCRIPTION$
      The function Cot() calculates the cotangent of an angle whose size is
      given in radiants (full angle equals 2*Pi - see DToR() for angle size
      given in degress).
      A common geometric interpretation of the Cot() function is the
      ankathede-counterkathede-ratio of a right-angled triangle, or,
      Cot(x) = Cos(x)/Sin(x)=1/Tan(x).
   $EXAMPLES$
      ? Cot( 1.0 ) // --> 0.6420...
   $STATUS$
      Ready
   $COMPLIANCE$
      Cot() is compatible with CT3's Cot().
   $PLATFORMS$
      All
   $FILES$
      Library is hbct.
   $SEEALSO$
      Sin(), Cos(), Tan(), Asin(), Acos(), Atan(), Atn2(), Sinh(), Cosh(), Tanh(), RToD(), DToR(), Pi()
   $END$
 */

/* $DOC$
   $NAME$
      Asin()
   $CATEGORY$
      CT3 math functions
   $ONELINER$
      Arcus sine of the argument
   $SYNTAX$
      Asin( nSine ) -> nRadiant
   $ARGUMENTS$
      <nSine>         the sine of an angle
   $RETURNS$
      <nRadiant>      the angle whose sine is <nSine>
   $DESCRIPTION$
      The function Asin() is the inverse function of Sin(). It takes a
      sine value and returns the smallest(!) angle whose sine equals to the argument.
      The return value is given in radiants (full angle equals 2*Pi -
      see DToR() if you need to convert it into degress).
      Note, that <nSine> must be between -1 and 1 and that <nRadiant>
      is always between -Pi()/2 and Pi()/2.
   $EXAMPLES$
      ? Asin( 0.0 ) // --> 0.0
      ? Asin( 0.5 ) // --> 0.5235...
   $STATUS$
      Ready
   $COMPLIANCE$
      Asin() is compatible with CT3's Asin().
   $PLATFORMS$
      All
   $FILES$
      Library is hbct.
   $SEEALSO$
      Sin(), Cos(), Tan(), Cot(), Acos(), Atan(), Atn2(), Sinh(), Cosh(), Tanh(), RToD(), DToR(), Pi()
   $END$
 */

/* $DOC$
   $NAME$
      Acos()
   $CATEGORY$
      CT3 math functions
   $ONELINER$
      Arcus cosine of the argument
   $SYNTAX$
      Acos( nCosine ) -> nRadiant
   $ARGUMENTS$
      <nCosine>       the cosine of an angle
   $RETURNS$
      <nRadiant>      the angle whose cosine is <nCosine>
   $DESCRIPTION$
      The function Acos() is the inverse function of Cos(). It takes a
      cosine value and returns the smallest(!) angle whose cosine equals to the argument.
      The return value is given in radiants (full angle equals 2*Pi -
      see DToR() if you need to convert it into degress).
      Note, that <nCosine> must be between -1 and 1 and that <nRadiant>
      is always between 0 and Pi().
   $EXAMPLES$
      ? Acos( 0.0 ) // --> Pi() / 2
      ? Acos( 0.5 ) // --> 1.04719...
   $STATUS$
      Ready
   $COMPLIANCE$
      Acos() is compatible with CT3's Acos().
   $PLATFORMS$
      All
   $FILES$
      Library is hbct.
   $SEEALSO$
      Sin(), Cos(), Tan(), Cot(), Asin(), Atan(), Atn2(), Sinh(), Cosh(), Tanh(), RToD(), DToR(), Pi()
   $END$
 */

/* $DOC$
   $NAME$
      Atan()
   $CATEGORY$
      CT3 math functions
   $ONELINER$
      Arcus tangent of the argument
   $SYNTAX$
      Acos( nTangent ) -> nRadiant
   $ARGUMENTS$
      <nTangent>      the tangent of an angle
   $RETURNS$
      <nRadiant>      the angle whose tangent is <nTangent>
   $DESCRIPTION$
      The function Atan() is the inverse function of Tan(). It takes a
      tangent value and returns the smallest(!) angle whose tangent equals to the argument.
      The return value is given in radiants between -Pi()/2 and Pi()/2
      (full angle equals 2*Pi - see DToR() if you need to convert it into degress).
   $EXAMPLES$
      ? Atan( 0.0 ) // --> 0.0
      ? Atan( 0.5 ) // --> 0.4636...
   $STATUS$
      Ready
   $COMPLIANCE$
      Atan() is compatible with CT3's Atan().
   $PLATFORMS$
      All
   $FILES$
      Library is hbct.
   $SEEALSO$
      Sin(), Cos(), Tan(), Cot(), Asin(), Acos(), Atan(), Sinh(), Cosh(), Tanh(), RToD(), DToR(), Pi()
   $END$
 */

/* $DOC$
   $NAME$
      Atn2()
   $CATEGORY$
      CT3 math functions
   $ONELINER$
      Arcus tangent a sine and a cosine argument
   $SYNTAX$
      Atn2( nSine, nCosine ) -> nRadiant
   $ARGUMENTS$
      <nSine>         the sine of an angle
      <nCosine>       the cosine of an angle
   $RETURNS$
      <nRadiant>      the angle whose tangent is <nSine>/<nCosine>
   $DESCRIPTION$
      The function Atn2() is an alternate function for calculating
      the arcus tangent, Atn2(x,y) = Atan(x/y).
      It takes two arguments, the sine and the cosine
      of the angle that should be calculated. Thus, in contrast to the Atan()
      function, Atn2() can distinguish whether the sine or the cosine has
      a negative sign (or both being positive or negative), so that
      the return value can be between -Pi() and Pi() and covers the full
      angle.
      The return value is given in radiants (full angle equals 2*Pi -
      see DToR() if you need to convert it into degress).
   $EXAMPLES$
      ? Atn2( 0.0, 1.0 ) // --> 0.0
      ? Atn2( Sqrt( 1 / 2 ), Sqrt( 1 / 2 ) ) // --> Pi() / 4
   $STATUS$
      Ready
   $COMPLIANCE$
      Atn2() is compatible with CT3's Atn2().
   $PLATFORMS$
      All
   $FILES$
      Library is hbct.
   $SEEALSO$
      Sin(), Cos(), Tan(), Cot(), Asin(), Acos(), Atan(), Sinh(), Cosh(), Tanh(), RToD(), DToR(), Pi()
   $END$
 */

/* $DOC$
   $NAME$
      Sinh()
   $CATEGORY$
      CT3 math functions
   $ONELINER$
      Hyperbolic Sine of the argument
   $SYNTAX$
      Sinh( nArea ) -> nHyperbolicSine
   $ARGUMENTS$
      <nArea>            the size of the area (see below)
   $RETURNS$
      <nHyperbolicSine>  the hyperbolic sine of <nArea>
   $DESCRIPTION$
      The function Sinh() calculates the hyperbolic sine of the argument.
      In analytical mathematics it is defined as 1/2*(Exp(nArea)-Exp(-nArea)).
      A common geometric interpretation of the Sinh() function is the
      maximum y value of the points in the area with the given size <nArea>,
      that is bound by the x axis, a straight line through the point of
      origin (this one is fixed by the area) and the hyperbola x^2-y^2=1.
   $EXAMPLES$
      ? Sinh( 0.0 ) // --> 0.0
      ? Sinh( 1.0 ) // --> 1.1752...
   $STATUS$
      Ready
   $COMPLIANCE$
      Sinh() is new in Harbours CT3's library.
   $PLATFORMS$
      All
   $FILES$
      Library is hbct.
   $SEEALSO$
      Sin(), Cos(), Tan(), Cot(), Asin(), Acos(), Atan(), Atn2(), Cosh(), Tanh(), RToD(), DToR(), Pi()
   $END$
 */

/* $DOC$
   $NAME$
      Cosh()
   $CATEGORY$
      CT3 math functions
   $ONELINER$
      Hyperbolic Cosine of the argument
   $SYNTAX$
      Cosh( nArea ) -> nHyperbolicCosine
   $ARGUMENTS$
      <nArea>              the size of the area (see below)
   $RETURNS$
      <nHyperbolicCosine>  the hyperbolic cosine of <nArea>
   $DESCRIPTION$
      The function Cosh() calculates the hyperbolic cosine of the argument.
      In analytical mathematics it is defined as 1/2*(Exp(nArea)+Exp(-nArea)).
      A common geometric interpretation of the Cosh() function is the
      maximum x value of the points in the area with the given size <nArea>,
      that is bound by the x axis, a straight line through the point of
      origin (this one is fixed by the area) and the hyperbola x^2-y^2=1.
   $EXAMPLES$
      ? Cosh( 0.0 ) // --> 1.0
      ? Cosh( 1.0 ) // --> 1.5430...
   $STATUS$
      Ready
   $COMPLIANCE$
      Cosh() is new in Harbours CT3's library.
   $PLATFORMS$
      All
   $FILES$
      Library is hbct.
   $SEEALSO$
      Sin(), Cos(), Tan(), Cot(), Asin(), Acos(), Atan(), Atn2(), Sinh(), Tanh(), RToD(), DToR(), Pi()
   $END$
 */

/* $DOC$
   $NAME$
      Tanh()
   $CATEGORY$
      CT3 math functions
   $ONELINER$
      Hyperbolic Tangent of the argument
   $SYNTAX$
      Tanh( nArea ) -> nHyperbolicTangent
   $ARGUMENTS$
      <nArea>               the size of the area (see below)
   $RETURNS$
      <nHyperbolicTangent>  the hyperbolic tangent of <nArea>
   $DESCRIPTION$
      The function Tanh() calculates the hyperbolic tangent of the argument.
      In analytical mathematics it is defined as Sinh(x)/Cosh(x).
   $EXAMPLES$
      ? Tanh( 0.0 ) // --> 0.0
      ? Tanh( 1.0 ) // --> 0.7615...
   $STATUS$
      Ready
   $COMPLIANCE$
      Tanh() is new in Harbours CT3's library.
   $PLATFORMS$
      All
   $FILES$
      Library is hbct.
   $SEEALSO$
      Sin(), Cos(), Tan(), Cot(), Asin(), Acos(), Atan(), Atn2(), Sinh(), Cosh(), RToD(), DToR(), Pi()
   $END$
 */

/* $DOC$
   $NAME$
      RToD()
   $CATEGORY$
      CT3 math functions
   $ONELINER$
      Convert radiant to degree
   $SYNTAX$
      RToD( nRadiant ) -> nDegree
   $ARGUMENTS$
      <nRadiant>         the size of an angle in radiant
   $RETURNS$
      <nDegree>          the size of that angle in degree
   $DESCRIPTION$
      The function RToD() can be used to convert sizes of angles given
      in radiant (like those returned by the asin, acos or atan function)
      to degrees that are commonly used geometry and technics.
   $EXAMPLES$
      ? RToD( Pi() ) // --> 180
      ? Tanh( Pi() / 3 ) // --> 60
   $STATUS$
      Ready
   $COMPLIANCE$
      RToD() is compatible with CT3's RToD().
   $PLATFORMS$
      All
   $FILES$
      Library is hbct.
   $SEEALSO$
      Sin(), Cos(), Tan(), Cot(), Asin(), Acos(), Atan(), Atn2(), Sinh(), Cosh(), Tanh(), DToR(), Pi()
   $END$
 */

/* $DOC$
   $NAME$
      DToR()
   $CATEGORY$
      CT3 math functions
   $ONELINER$
      Convert degree to radiant
   $SYNTAX$
      DToR( nDegree ) -> nRadiant
   $ARGUMENTS$
      <nDegree>          the size of that angle in degree
   $RETURNS$
      <nRadiant>         the size of an angle in radiant
   $DESCRIPTION$
      The function DToR() can be used to convert sizes of angles given
      in degrees to radiant (as expected by sin, cos or tan functions).
   $EXAMPLES$
      ? DToR( 180 ) // --> Pi()
      ? DToR( 60 ) // --> Pi() / 3
   $STATUS$
      Ready
   $COMPLIANCE$
      DToR() is compatible with CT3's DToR().
   $PLATFORMS$
      All
   $FILES$
      Library is hbct.
   $SEEALSO$
      Sin(), Cos(), Tan(), Cot(), Asin(), Acos(), Atan(), Atn2(), Sinh(), Cosh(), Tanh(), RToD(), Pi()
   $END$
 */
