/* $DOC$
   $NAME$
      CToDoW()
   $CATEGORY$
      CT3 date and time functions
   $ONELINER$
      convert name of day of the week to its ordinal number
   $SYNTAX$
      CToDoW( <cName> ) -> nOrdinal
   $ARGUMENTS$

   $RETURNS$

   $DESCRIPTION$
      TODO: add documentation
   $EXAMPLES$

   $STATUS$
      Started
   $COMPLIANCE$
      CToDoW() is compatible with CT3's CToDoW().
   $PLATFORMS$
      All
   $FILES$
      Library is hbct.
   $SEEALSO$
      NToCDoW()
   $END$
 */

/* $DOC$
   $NAME$
      CToMonth()
   $CATEGORY$
      CT3 date and time functions
   $ONELINER$
      convert name of month to its ordinal number
   $SYNTAX$
      CToMonth( <cName> ) -> nOrdinal
   $ARGUMENTS$

   $RETURNS$

   $DESCRIPTION$
      TODO: add documentation
   $EXAMPLES$

   $STATUS$
      Started
   $COMPLIANCE$
      CToMonth() is compatible with CT3's CToMonth().
   $PLATFORMS$
      All
   $FILES$
      Library is hbct.
   $SEEALSO$
      NToCMonth()
   $END$
 */

/* $DOC$
   $NAME$
      DMY()
   $CATEGORY$
      CT3 date and time functions
   $ONELINER$
      Returns the date as a string in DD Month YY format
   $SYNTAX$
      DMY( [<dDate>][, <lMode>] ) -> cDateString
   $ARGUMENTS$

   $RETURNS$

   $DESCRIPTION$
      Returns the date as a string in DD Month YY format. If lmode
      is TRUE, a "." is inserted after the DD
      TODO: add further documentation
   $EXAMPLES$

   $STATUS$
      Started
   $COMPLIANCE$
      DMY() is compatible with CT3's DMY().
   $PLATFORMS$
      All
   $FILES$
      Library is hbct.
   $SEEALSO$
      MDY()
   $END$
 */

/* $DOC$
   $NAME$
      MDY()
   $CATEGORY$
      CT3 date and time functions
   $ONELINER$
      Returns the date as a string in Month DD, YY or Month DD, YYYY
   $SYNTAX$
      MDY( [<dDate>] ) -> cDateString
   $ARGUMENTS$

   $RETURNS$

   $DESCRIPTION$
      Returns the date as a string in Month DD, YY or Month DD, YYYY
      If dDate is NULL, the system date is used
      TODO: add further documentation
   $EXAMPLES$

   $STATUS$
      Started
   $COMPLIANCE$
      MDY() is compatible with CT3's MDY().
   $PLATFORMS$
      All
   $FILES$
      Library is hbct.
   $SEEALSO$
      DMY()
   $END$
 */

/* $DOC$
   $NAME$
      AddMonth()
   $CATEGORY$
      CT3 date and time functions
   $ONELINER$
      add months to a date
   $SYNTAX$
      AddMonth( [<dDate>,] <nMonths> ) -> dShiftedDate
   $ARGUMENTS$

   $RETURNS$

   $DESCRIPTION$
      TODO: add documentation
   $EXAMPLES$

   $STATUS$
      Started
   $COMPLIANCE$
      AddMonth() is compatible with CT3's AddMonth().
   $PLATFORMS$
      All
   $FILES$
      Library is hbct.
   $SEEALSO$

   $END$
 */

/* $DOC$
   $NAME$
      DoY()
   $CATEGORY$
      CT3 date and time functions
   $ONELINER$
      Determines the day of the year for a specific date
   $SYNTAX$
      DMY( [<dDate>] ) -> nDayOfYear
   $ARGUMENTS$

   $RETURNS$

   $DESCRIPTION$
      Determines the day of the year for a specific date
      if dDate is invalid, returns 0
      TODO: add further documentation
   $EXAMPLES$

   $STATUS$
      Started
   $COMPLIANCE$
      DoY() is compatible with CT3's DoY().
   $PLATFORMS$
      All
   $FILES$
      Library is hbct.
   $SEEALSO$

   $END$
 */

/* $DOC$
   $NAME$
      IsLeap()
   $CATEGORY$
      CT3 date and time functions
   $ONELINER$
      determines of year of date is a leap year
   $SYNTAX$
      IsLeap( [<dDate>] ) -> lIsLeap
   $ARGUMENTS$

   $RETURNS$

   $DESCRIPTION$
      TODO: add further documentation
   $EXAMPLES$

   $STATUS$
      Started
   $COMPLIANCE$
      IsLeap() is compatible with CT3's IsLeap().
   $PLATFORMS$
      All
   $FILES$
      Library is hbct.
   $SEEALSO$

   $END$
 */

/* $DOC$
   $NAME$
      Quarter()
   $CATEGORY$
      CT3 date and time functions
   $ONELINER$
      Returns a number equal to the quarter in which a date falls
   $SYNTAX$
      Quarter( [<dDate>] ) -> nQuarter
   $ARGUMENTS$

   $RETURNS$

   $DESCRIPTION$
      Returns a number equal to the quarter in which ddate
      falls. If ddate  is empty, the system date is employed.
      TODO: add further documentation
   $EXAMPLES$

   $STATUS$
      Started
   $COMPLIANCE$
      Quarter() is compatible with CT3's Quarter().
   $PLATFORMS$
      All
   $FILES$
      Library is hbct.
   $SEEALSO$

   $END$
 */

/* $DOC$
   $NAME$
      LastDayOM()
   $CATEGORY$
      CT3 date and time functions
   $ONELINER$
      Returns the the number of days in the month.
   $SYNTAX$
      LastDayOM( [<dDate|nMonth>] ) -> nDaysInMonth
   $ARGUMENTS$

   $RETURNS$

   $DESCRIPTION$
      <dDate|nMonth> can be a date or a month number. If empty uses the
      system date.  If nMonth is a 2, LastDayOM() will not know if it
      is a leap year or not. If dDate is invalid, returns 0
      TODO: add further documentation
   $EXAMPLES$

   $STATUS$
      Started
   $COMPLIANCE$
      LastDayOM() is compatible with CT3's LastDayOM().
   $PLATFORMS$
      All
   $FILES$
      Library is hbct.
   $SEEALSO$
      EoM()
   $END$
 */

/* $DOC$
   $NAME$
      NToCDoW()
   $CATEGORY$
      CT3 date and time functions
   $ONELINER$
      (num of day) -> day name
   $SYNTAX$
      NToCDoW( <nDay> ) -> cDay
   $ARGUMENTS$

   $RETURNS$

   $DESCRIPTION$
      TODO: add documentation
   $EXAMPLES$

   $STATUS$
      Started
   $COMPLIANCE$
      NToCDoW() is compatible with CT3's NToCDoW().
   $PLATFORMS$
      All
   $FILES$
      Library is hbct.
   $SEEALSO$
      CToDoW()
   $END$
 */

/* $DOC$
   $NAME$
      NToCMonth()
   $CATEGORY$
      CT3 date and time functions
   $ONELINER$
      (num of month ) -> Month Name
   $SYNTAX$
      NToCMonth( <nMonth> ) -> cMonth
   $ARGUMENTS$

   $RETURNS$

   $DESCRIPTION$
      TODO: add documentation
   $EXAMPLES$

   $STATUS$
      Started
   $COMPLIANCE$
      NToCMonth() is compatible with CT3's NToCMonth().
   $PLATFORMS$
      All
   $FILES$
      Library is hbct.
   $SEEALSO$
      CToMonth()
   $END$
 */

/* $DOC$
   $NAME$
      Week()
   $CATEGORY$
      CT3 date and time functions
   $ONELINER$
      Returns the calendar week a number
   $SYNTAX$
      Week( [<dDate>][, <lSWN>] ) -> nWeek
   $ARGUMENTS$

   $RETURNS$

   $DESCRIPTION$
      Returns the calendar week a number. If no date is specified,
      the system date is used. An empty date via hb_SToD("")
      returns 0.
      If <lSWN> is .T., Week() will calculate the "simple week number", defined by
         - week #1 starts on January, 1st
         - week #(n+1) starts seven days after start of week #n
      If <lSWN> is .F. (default), the ISO8601 week number, defined by
         - weeks start on mondays
         - week #1 is the one that includes January, 4
      will be calculated
      TODO: add further documentation
   $EXAMPLES$

   $STATUS$
      Started
   $COMPLIANCE$
      Week() is compatible with CT3's Week().
   $PLATFORMS$
      All
   $FILES$
      Library is hbct.
   $SEEALSO$

   $END$
 */
