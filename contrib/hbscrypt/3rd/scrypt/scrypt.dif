diff -urN scrypt.orig/config.h scrypt/config.h
--- scrypt.orig/config.h	2014-02-03 13:10:00.457632200 +0100
+++ scrypt/config.h	2014-02-03 13:10:00.457632200 +0100
@@ -1,5 +1,7 @@
 /* config.h.in.  Generated from configure.ac by autoheader.  */
 
+#include "hbsetup.h"
+
 /* Define to 1 if you have the `clock_gettime' function. */
 #undef HAVE_CLOCK_GETTIME
 
diff -urN scrypt.orig/sha256.c scrypt/sha256.c
--- scrypt.orig/sha256.c	2014-02-03 13:10:00.473240100 +0100
+++ scrypt/sha256.c	2014-02-03 13:10:00.473240100 +0100
@@ -34,6 +34,13 @@
 
 #include "sha256.h"
 
+static void	SHA256_Init(SHA256_CTX *);
+static void	SHA256_Update(SHA256_CTX *, const void *, size_t);
+static void	SHA256_Final(unsigned char [32], SHA256_CTX *);
+static void	HMAC_SHA256_Init(HMAC_SHA256_CTX *, const void *, size_t);
+static void	HMAC_SHA256_Update(HMAC_SHA256_CTX *, const void *, size_t);
+static void	HMAC_SHA256_Final(unsigned char [32], HMAC_SHA256_CTX *);
+
 /*
  * Encode a length len/4 vector of (uint32_t) into a length len vector of
  * (unsigned char) in big-endian form.  Assumes len is a multiple of 4.
@@ -211,7 +218,7 @@
 }
 
 /* SHA-256 initialization.  Begins a SHA-256 operation. */
-void
+static void
 SHA256_Init(SHA256_CTX * ctx)
 {
 
@@ -230,7 +237,7 @@
 }
 
 /* Add bytes into the hash */
-void
+static void
 SHA256_Update(SHA256_CTX * ctx, const void *in, size_t len)
 {
 	uint32_t bitlen[2];
@@ -276,7 +283,7 @@
  * SHA-256 finalization.  Pads the input data, exports the hash value,
  * and clears the context state.
  */
-void
+static void
 SHA256_Final(unsigned char digest[32], SHA256_CTX * ctx)
 {
 
@@ -291,7 +298,7 @@
 }
 
 /* Initialize an HMAC-SHA256 operation with the given key. */
-void
+static void
 HMAC_SHA256_Init(HMAC_SHA256_CTX * ctx, const void * _K, size_t Klen)
 {
 	unsigned char pad[64];
@@ -327,7 +334,7 @@
 }
 
 /* Add bytes to the HMAC-SHA256 operation. */
-void
+static void
 HMAC_SHA256_Update(HMAC_SHA256_CTX * ctx, const void *in, size_t len)
 {
 
@@ -336,7 +343,7 @@
 }
 
 /* Finish an HMAC-SHA256 operation. */
-void
+static void
 HMAC_SHA256_Final(unsigned char digest[32], HMAC_SHA256_CTX * ctx)
 {
 	unsigned char ihash[32];
diff -urN scrypt.orig/sha256.h scrypt/sha256.h
--- scrypt.orig/sha256.h	2014-02-03 13:10:00.473240100 +0100
+++ scrypt/sha256.h	2014-02-03 13:10:00.473240100 +0100
@@ -44,13 +44,6 @@
 	SHA256_CTX octx;
 } HMAC_SHA256_CTX;
 
-void	SHA256_Init(SHA256_CTX *);
-void	SHA256_Update(SHA256_CTX *, const void *, size_t);
-void	SHA256_Final(unsigned char [32], SHA256_CTX *);
-void	HMAC_SHA256_Init(HMAC_SHA256_CTX *, const void *, size_t);
-void	HMAC_SHA256_Update(HMAC_SHA256_CTX *, const void *, size_t);
-void	HMAC_SHA256_Final(unsigned char [32], HMAC_SHA256_CTX *);
-
 /**
  * PBKDF2_SHA256(passwd, passwdlen, salt, saltlen, c, buf, dkLen):
  * Compute PBKDF2(passwd, salt, c, dkLen) using HMAC-SHA256 as the PRF, and
diff -urN scrypt.orig/u_sysend.h scrypt/u_sysend.h
--- scrypt.orig/u_sysend.h	2014-02-03 13:10:00.473240100 +0100
+++ scrypt/u_sysend.h	2014-02-03 13:10:00.473240100 +0100
@@ -44,7 +44,7 @@
 
 #include <stdint.h>
 
-static inline uint32_t
+static HB_FORCEINLINE uint32_t
 be32dec(const void *pp)
 {
 	const uint8_t *p = (uint8_t const *)pp;
@@ -53,7 +53,7 @@
 	    ((uint32_t)(p[1]) << 16) + ((uint32_t)(p[0]) << 24));
 }
 
-static inline void
+static HB_FORCEINLINE void
 be32enc(void *pp, uint32_t x)
 {
 	uint8_t * p = (uint8_t *)pp;
@@ -64,7 +64,7 @@
 	p[0] = (x >> 24) & 0xff;
 }
 
-static inline uint64_t
+static HB_FORCEINLINE uint64_t
 be64dec(const void *pp)
 {
 	const uint8_t *p = (uint8_t const *)pp;
@@ -75,7 +75,7 @@
 	    ((uint64_t)(p[1]) << 48) + ((uint64_t)(p[0]) << 56));
 }
 
-static inline void
+static HB_FORCEINLINE void
 be64enc(void *pp, uint64_t x)
 {
 	uint8_t * p = (uint8_t *)pp;
@@ -90,7 +90,7 @@
 	p[0] = (x >> 56) & 0xff;
 }
 
-static inline uint32_t
+static HB_FORCEINLINE uint32_t
 le32dec(const void *pp)
 {
 	const uint8_t *p = (uint8_t const *)pp;
@@ -99,7 +99,7 @@
 	    ((uint32_t)(p[2]) << 16) + ((uint32_t)(p[3]) << 24));
 }
 
-static inline void
+static HB_FORCEINLINE void
 le32enc(void *pp, uint32_t x)
 {
 	uint8_t * p = (uint8_t *)pp;
@@ -110,7 +110,7 @@
 	p[3] = (x >> 24) & 0xff;
 }
 
-static inline uint64_t
+static HB_FORCEINLINE uint64_t
 le64dec(const void *pp)
 {
 	const uint8_t *p = (uint8_t const *)pp;
@@ -121,7 +121,7 @@
 	    ((uint64_t)(p[6]) << 48) + ((uint64_t)(p[7]) << 56));
 }
 
-static inline void
+static HB_FORCEINLINE void
 le64enc(void *pp, uint64_t x)
 {
 	uint8_t * p = (uint8_t *)pp;
