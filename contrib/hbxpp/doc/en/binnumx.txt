/* $DOC$
   $AUTHOR$
      Copyright 2000 Chen Kedem <niki@actcom.co.il>
   $TEMPLATE$
      Function
   $NAME$
      Bin2U()
   $CATEGORY$
      API
   $SUBCATEGORY$
      Conversion
   $ONELINER$
      Convert unsigned long encoded bytes into Harbour numeric
   $SYNTAX$
      Bin2U( <cBuffer> ) --> nNumber
   $ARGUMENTS$
      <cBuffer> is a character string that contains 32-bit encoded unsigned
      long integer (least significant byte first). The first four bytes
      are taken into account, the rest if any are ignored.
   $RETURNS$
      Bin2U() return numeric integer (or 0 if <cBuffer> is not a string).
   $DESCRIPTION$
      Bin2U() is one of the low-level binary conversion functions, those
      functions convert between Harbour numeric and a character
      representation of numeric value. Bin2U() take four bytes of encoded
      32-bit unsigned long integer and convert it into standard Harbour
      numeric value.

      You might ask what is the need for such functions, well, first of
      all it allow you to read/write information from/to a binary file
      (like extracting information from DBF header), it is also a useful
      way to share information from source other than Harbour (C for
      instance).

      Bin2U() is the opposite of U2Bin()
   $EXAMPLES$
      // Show number of records in DBF
      #include "fileio.ch"
      LOCAL hFile, cBuffer := Space( 4 )
      IF ( hFile := hb_vfOpen( "test.dbf", FO_READ ) ) != NIL
         hb_vfSeek( hFile, 4 )
         hb_vfRead( hFile, @cBuffer, hb_BLen( cBuffer ) )
         ? "Number of records in file:", Bin2U( cBuffer )
         hb_vfClose( hFile )
      ELSE
         ? "Cannot open file"
      ENDIF
   $STATUS$
      R
   $COMPLIANCE$
      XPP
   $FILES$
      Library is core
   $SEEALSO$
      Bin2I(), Bin2L(), Bin2W(), I2Bin(), L2Bin(), W2Bin(), Word(), U2Bin()
   $END$
 */

/* $DOC$
   $AUTHOR$
      Copyright 2000 Chen Kedem <niki@actcom.co.il>
   $TEMPLATE$
      Function
   $NAME$
      W2Bin()
   $CATEGORY$
      API
   $SUBCATEGORY$
      Conversion
   $ONELINER$
      Convert Harbour numeric into unsigned short encoded bytes
   $SYNTAX$
      W2Bin( <nNumber> ) --> cBuffer
   $ARGUMENTS$
      <nNumber> is a numeric value to convert (decimal digits are ignored).
   $RETURNS$
      W2Bin() return two bytes character string that contains 16-bit
      encoded unsigned short integer (least significant byte first).
   $DESCRIPTION$
      W2Bin() is one of the low-level binary conversion functions, those
      functions convert between Harbour numeric and a character
      representation of numeric value. W2Bin() take a numeric integer
      value and convert it into two bytes of encoded 16-bit unsigned short
      integer.

      You might ask what is the need for such functions, well, first of
      all it allow you to read/write information from/to a binary file
      (like extracting information from DBF header), it is also a useful
      way to share information from source other than Harbour (C for
      instance).

      W2Bin() is the opposite of Bin2W()
   $STATUS$
      R
   $COMPLIANCE$
      XPP
   $FILES$
      Library is core
   $SEEALSO$
      Bin2I(), Bin2L(), Bin2U(), Bin2W(), I2Bin(), L2Bin(), Word(), U2Bin()
   $END$
 */

/* $DOC$
   $AUTHOR$
      Copyright 2000 Chen Kedem <niki@actcom.co.il>
   $TEMPLATE$
      Function
   $NAME$
      U2Bin()
   $CATEGORY$
      API
   $SUBCATEGORY$
      Conversion
   $ONELINER$
      Convert Harbour numeric into unsigned long encoded bytes
   $SYNTAX$
      U2Bin( <nNumber> ) --> cBuffer
   $ARGUMENTS$
      <nNumber> is a numeric value to convert (decimal digits are ignored).
   $RETURNS$
      U2Bin() return four bytes character string that contains 32-bit
      encoded unsigned long integer (least significant byte first).
   $DESCRIPTION$
      U2Bin() is one of the low-level binary conversion functions, those
      functions convert between Harbour numeric and a character
      representation of numeric value. U2Bin() take a numeric integer
      value and convert it into four bytes of encoded 32-bit unsigned long
      integer.

      You might ask what is the need for such functions, well, first of
      all it allow you to read/write information from/to a binary file
      (like extracting information from DBF header), it is also a useful
      way to share information from source other than Harbour (C for
      instance).

      U2Bin() is the opposite of Bin2U()
   $STATUS$
      R
   $COMPLIANCE$
      XPP
   $FILES$
      Library is core
   $SEEALSO$
      Bin2I(), Bin2L(), Bin2U(), Bin2W(), I2Bin(), L2Bin(), W2Bin(), Word()
   $END$
 */
