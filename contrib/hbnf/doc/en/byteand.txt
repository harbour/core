/* $DOC$
   $NAME$
      ft_ByteAnd()
   $CATEGORY$
      String
   $ONELINER$
      Perform bit-wise AND on two ASCII characters (bytes)
   $SYNTAX$
      ft_ByteAnd( <cByte1>, <cByte2> ) -> cByte
   $ARGUMENTS$
      <cByte1> and <cByte2> are characters from hb_BChar( 0 ) to hb_BChar( 255 ).
      May be passed in hb_BChar() form, as character literals, or as expressions
      evaluating to character values.
   $RETURNS$
      Returns resulting byte, as a string.  If parameters are faulty,
      returns NIL.
   $DESCRIPTION$
      Can be used for any bit-wise masking operation.  In effect, this is a
      bit-by-bit AND operation.  Equivalent to AND assembler instruction.

      This function is presented to illustrate that bit-wise operations
      are possible with Clipper code.  For greater speed, write .c or
      .asm versions and use the Clipper Extend system.
   $EXAMPLES$
      // This code would mask out the high nibble (four most significant bits)
      // of the byte represented by hb_BChar( 123 ) and leave the low nibble
      // bits as in the parameter byte.

      cNewbyte := ft_ByteAnd( hb_BChar( 123 ), hb_BChar( 15 ) )
      ? hb_BCode( cNewByte )     // result: 11
      ? cNewByte                 // result: non-printable character
   $SEEALSO$
      ft_ByteOr(), ft_ByteXor(), ft_ByteNot(), ft_ByteNeg()
   $END$
 */
