/* $DOC$
   $NAME$
      ft_BitClr()
   $CATEGORY$
      String
   $ONELINER$
      Clear (reset) selected bit in a byte
   $SYNTAX$
      ft_BitClr( <cByte>, <nBitPos> ) -> cByte
   $ARGUMENTS$
      <cByte> is a character from hb_BChar( 0 ) to hb_BChar( 255 ).

      <nBitPos> is a number from 0 to 7 conforming to standard
      right-to-left bit numbering convention and representing the
      position of the bit within the byte.
   $RETURNS$
      Returns new byte, with designated bit cleared (reset).
      If parameters are faulty, returns NIL.
   $DESCRIPTION$
      In effect, ANDs argument byte with a byte that has all bits set except
      the target bit.  If bit is already clear (0), it remains clear.
      Note: Calls ft_IsBit() which is also in this Library.

      This function is presented to illustrate that bit-wise operations
      are possible with Clipper code.  For greater speed, write .c or
      .asm versions and use the Clipper Extend system.
   $EXAMPLES$
      // This code would clear bit 4 in a byte represented by hb_BChar( 115 ):

      cNewByte := ft_BitClr( hb_BChar( 115 ), 4 )
      ? hb_BCode( cNewbyte )    // result: 99
      ? cNewByte                // result: "c"

      // This code would clear bit 5 in the byte represented by letter "A":

      ? ft_BitClr( "A", 5 )     // result: "A", since bit 5 already clear
   $SEEALSO$
      ft_BitSet(), ft_IsBit()
   $END$
 */
