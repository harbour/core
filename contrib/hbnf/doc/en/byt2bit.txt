/* $DOC$
   $NAME$
      ft_Byt2Bit()
   $CATEGORY$
      Conversion
   $ONELINER$
      Convert byte to string of 1's and 0's
   $SYNTAX$
      ft_Byt2Bit( <cByte> ) -> cBitPattern
   $ARGUMENTS$
      <cByte> is the byte to convert.
   $RETURNS$
      9-character string, consisting of 1's and 0's, representing bits 0
      through 7 of parameter byte, with space between bits 3 and 4.  Returns
      NIL if parameters are faulty.
   $DESCRIPTION$
      Can be used to show results of bit manipulation, both before and after.
      Binary representation follows right-to-left convention of bit position
      numbering, 0 through 7.  Space between high and low nibbles for clarity
      and easy comparison to hexadecimal notation.

      This function is presented to illustrate that bit-wise operations
      are possible with Clipper code.  For greater speed, write .c or
      .asm versions and use the Clipper Extend system.
   $EXAMPLES$
      // These three code lines perform a bitwise AND on bytes with values of
      // hb_BChar( 20 ) and hb_BChar( 36 ), and deliver the result as a string
      // in binary (bit) format.

      ? ft_Byt2Bit( hb_BChar( 20 ) )    // byte1: '0001 0100'
      ? ft_Byt2Bit( hb_BChar( 36 ) )    // byte2: '0010 0100'
      ? ft_Byt2Bit( ft_ByteAnd( hb_BChar( 20 ), hb_BChar( 36 ) ) )  // result: '0000 0100'
   $SEEALSO$
      ft_Byt2Hex()
   $END$
 */
