/* $DOC$
   $NAME$
      ft_ByteXor()
   $CATEGORY$
      String
   $ONELINER$
      Perform bit-wise XOR on two ASCII characters (bytes)
   $SYNTAX$
      ft_ByteXor( <cByte1>, <cByte2> ) -> cNewByte
   $ARGUMENTS$
      <cByte1> and <cByte2> are characters from hb_BChar( 0 ) to hb_BChar( 255 ).
      May be passed in hb_BChar() form, as character literals, or as expressions
      evaluating to character values.
   $RETURNS$
      Returns resulting byte, as a string.  If parameters are faulty,
      returns NIL.
   $DESCRIPTION$
      Can be used for bit-wise byte manipulation.  In effect, this is a
      bit-by-bit XOR operation.  Equivalent to XOR assembler instruction.

      This function is presented to illustrate that bit-wise operations
      are possible with Clipper code.  For greater speed, write .c or
      .asm versions and use the Clipper Extend system.
   $EXAMPLES$
      // This code performs a bit-wise XOR on two bytes represented
      // by hb_BChar( 32 ) and hb_BChar( 55 ):

      cNewByte := ft_ByteXor( hb_BChar( 32 ), hb_BChar( 55 ) )
      ? hb_BCode( cNewByte )     // result: 23
      ? cNewByte                 // result: non-printable character
   $SEEALSO$
      ft_ByteOr(), ft_ByteNot(), ft_ByteNeg(), ft_ByteAnd()
   $END$
 */
