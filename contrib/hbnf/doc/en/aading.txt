/* $DOC$
   $NAME$
      ft_AAddition()
   $CATEGORY$
      Array
   $ONELINER$
      Add elements unique of source array to target array
   $SYNTAX$
      ft_AAddition( <aList1>, <aList2> [, <lTrimmer> [, <lCaseSens> ] ] ) ;
              -> aNewArray
   $ARGUMENTS$
      <aList1> is the primary array.

      <aList2> is the secondary array.

      <lTrimmer> is a logical value denoting whether leading or
              trailing spaces should be included in the
              comparison. If .T., then ignores spaces in
              comparison, defaults to .T., .F. includes spaces.

      <lCaseSens> is a logical value denoting case sensitivity.
              If .T., then comparison is sensitive to case,
              defaults to .T., .F. ignores case.
   $RETURNS$
      An array of the union of aList1 and aList2.
   $DESCRIPTION$
      This function will add the elements unique of aList2 with aList1.
      It returns a new array including all the elements of aList1
      plus the unique elements of aList2.
   $EXAMPLES$
      aList1 := { "apple", "orange", "pear" }
      aList2 := { "apple ", "banana", "PEAR" }

      ft_AAddition( aList1, aList2 )
      // ignores spaces, sensitive to case
      // returns { "apple", "orange", "pear", "banana", "PEAR" }

      ft_AAddition( aList1, aList2, , .F. )
      // ignores spaces, not sensitive to case
      // returns { "apple", "orange", "pear", "banana" }

      ft_AAddition( aList1, aList2, .F. , .F. )
      // sensitive to spaces, not sensitive to case
      // returns { "apple", "orange", "pear", "apple ", "banana" }
   $END$
 */
