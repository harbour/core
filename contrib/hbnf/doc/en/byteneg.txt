/* $DOC$
   $NAME$
      ft_ByteNeg()
   $CATEGORY$
      String
   $ONELINER$
      Perform bit-wise negation on an ASCII character
   $SYNTAX$
      ft_ByteNeg( <cByte> ) -> cNewByte
   $ARGUMENTS$
      <cByte> is a character from hb_BChar( 0 ) to hb_BChar( 255 ).
      May be passed in hb_BChar() form, as character literals, or as expressions
      evaluating to character values.
   $RETURNS$
      Returns resulting byte, as a string.  If parameters are faulty,
      returns NIL.
   $DESCRIPTION$
      Can be used for bit-wise byte manipulation.  In effect, this is a
      bit-by-bit NEG (two's complement) operation.  Equivalent to NEG
      assembler instruction.

      This function is presented to illustrate that bit-wise operations
      are possible with Clipper code.  For greater speed, write .c or
      .asm versions and use the Clipper Extend system.
   $EXAMPLES$
      // This code performs a bit-wise NEG on byte represented by hb_BChar( 32 ):

      cNewByte := ft_ByteNot( hb_BChar( 32 ) )
      ? hb_BCode( cNewByte )     // result: 224
   $SEEALSO$
      ft_ByteOr(), ft_ByteXor(), ft_ByteNot(), ft_ByteAnd()
   $END$
 */
