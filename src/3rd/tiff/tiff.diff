diff --strip-trailing-cr -urN tiff.orig/dir.c tiff/dir.c
--- tiff.orig/dir.c	2023-05-22 14:03:41.000000000 +0000
+++ tiff/dir.c	2023-11-06 22:26:31.000000000 +0000
@@ -571,9 +571,9 @@
             break;
         case TIFFTAG_INKNAMES:
         {
+            uint16_t ninksinstring;
             v = (uint16_t)va_arg(ap, uint16_vap);
             s = va_arg(ap, char *);
-            uint16_t ninksinstring;
             ninksinstring = countInkNamesString(tif, v, s);
             status = ninksinstring > 0;
             if (ninksinstring > 0)
@@ -771,8 +771,9 @@
                 }
                 else
                 {
+                    size_t len;
                     mb = (const char *)va_arg(ap, const char *);
-                    size_t len = strlen(mb) + 1;
+                    len = strlen(mb) + 1;
                     if (len >= 0x80000000U)
                     {
                         status = 0;
@@ -853,7 +854,8 @@
                         if (tv->info->field_type == TIFF_LONG8)
                         {
                             uint64_t *pui64 = (uint64_t *)tv->value;
-                            for (int i = 0; i < tv->count; i++)
+                            int i;
+                            for (i = 0; i < tv->count; i++)
                             {
                                 if (pui64[i] > 0xffffffffu)
                                 {
@@ -872,7 +874,8 @@
                         else if (tv->info->field_type == TIFF_SLONG8)
                         {
                             int64_t *pi64 = (int64_t *)tv->value;
-                            for (int i = 0; i < tv->count; i++)
+                            int i;
+                            for (i = 0; i < tv->count; i++)
                             {
                                 if (pi64[i] > 2147483647 ||
                                     pi64[i] < (-2147483647 - 1))
diff --strip-trailing-cr -urN tiff.orig/dirread.c tiff/dirread.c
--- tiff.orig/dirread.c	2023-07-18 14:59:48.000000000 +0000
+++ tiff/dirread.c	2023-11-06 22:33:50.000000000 +0000
@@ -2781,7 +2781,7 @@
         case TIFF_FLOAT:
             if (tif->tif_flags & TIFF_SWAB)
                 TIFFSwabArrayOfLong((uint32_t *)origdata, count);
-            TIFFCvtIEEEDoubleToNative(tif, count, (float *)origdata);
+            TIFFCvtIEEEFloatToNative(tif, count, (float *)origdata);
             *value = (float *)origdata;
             return (TIFFReadDirEntryErrOk);
     }
@@ -5427,6 +5427,9 @@
  */
 int _TIFFCheckDirNumberAndOffset(TIFF *tif, tdir_t dirn, uint64_t diroff)
 {
+    TIFFOffsetAndDirNumber entry;
+    TIFFOffsetAndDirNumber *foundEntry;
+
     if (diroff == 0) /* no more directories */
         return 0;
 
@@ -5461,11 +5464,10 @@
      * loop
      * -  no: add to list or update offset at that IFD number
      */
-    TIFFOffsetAndDirNumber entry;
     entry.offset = diroff;
     entry.dirNumber = dirn;
 
-    TIFFOffsetAndDirNumber *foundEntry =
+    foundEntry =
         (TIFFOffsetAndDirNumber *)TIFFHashSetLookup(
             tif->tif_map_dir_offset_to_number, &entry);
     if (foundEntry)
@@ -5494,12 +5496,13 @@
         if (foundEntry->offset != diroff)
         {
             TIFFOffsetAndDirNumber entryOld;
+            TIFFOffsetAndDirNumber *foundEntryOld;
             entryOld.offset = foundEntry->offset;
             entryOld.dirNumber = dirn;
             /* We must remove first from tif_map_dir_number_to_offset as the */
             /* entry is owned (and thus freed) by */
             /* tif_map_dir_offset_to_number */
-            TIFFOffsetAndDirNumber *foundEntryOld =
+            foundEntryOld =
                 (TIFFOffsetAndDirNumber *)TIFFHashSetLookup(
                     tif->tif_map_dir_number_to_offset, &entryOld);
             if (foundEntryOld)
@@ -5515,6 +5518,7 @@
                                   foundEntryOld);
             }
 
+            {
             TIFFOffsetAndDirNumber *entryPtr = (TIFFOffsetAndDirNumber *)malloc(
                 sizeof(TIFFOffsetAndDirNumber));
             if (entryPtr == NULL)
@@ -5539,6 +5543,7 @@
                     "Insertion in tif_map_dir_number_to_offset failed");
                 return 0;
             }
+            }
         }
         return 1;
     }
@@ -5553,6 +5558,7 @@
         return 0;
     }
 
+    {
     TIFFOffsetAndDirNumber *entryPtr =
         (TIFFOffsetAndDirNumber *)malloc(sizeof(TIFFOffsetAndDirNumber));
     if (entryPtr == NULL)
@@ -5577,6 +5583,7 @@
                       "Insertion in tif_map_dir_number_to_offset failed");
         return 0;
     }
+    }
 
     return 1;
 } /* --- _TIFFCheckDirNumberAndOffset() ---*/
@@ -5590,6 +5597,8 @@
  */
 int _TIFFGetDirNumberFromOffset(TIFF *tif, uint64_t diroff, tdir_t *dirn)
 {
+    TIFFOffsetAndDirNumber entry;
+    TIFFOffsetAndDirNumber *foundEntry;
     if (diroff == 0) /* no more directories */
         return 0;
 
@@ -5599,11 +5608,10 @@
      */
     if (tif->tif_map_dir_offset_to_number == NULL)
         return 0;
-    TIFFOffsetAndDirNumber entry;
     entry.offset = diroff;
     entry.dirNumber = 0; /* not used */
 
-    TIFFOffsetAndDirNumber *foundEntry =
+    foundEntry =
         (TIFFOffsetAndDirNumber *)TIFFHashSetLookup(
             tif->tif_map_dir_offset_to_number, &entry);
     if (foundEntry)
@@ -5636,13 +5644,14 @@
 int _TIFFGetOffsetFromDirNumber(TIFF *tif, tdir_t dirn, uint64_t *diroff)
 {
 
+    TIFFOffsetAndDirNumber entry;
+    TIFFOffsetAndDirNumber *foundEntry;
     if (tif->tif_map_dir_number_to_offset == NULL)
         return 0;
-    TIFFOffsetAndDirNumber entry;
     entry.offset = 0; /* not used */
     entry.dirNumber = dirn;
 
-    TIFFOffsetAndDirNumber *foundEntry =
+    foundEntry =
         (TIFFOffsetAndDirNumber *)TIFFHashSetLookup(
             tif->tif_map_dir_number_to_offset, &entry);
     if (foundEntry)
@@ -5662,17 +5671,18 @@
  */
 int _TIFFRemoveEntryFromDirectoryListByOffset(TIFF *tif, uint64_t diroff)
 {
+    TIFFOffsetAndDirNumber entryOld;
+    TIFFOffsetAndDirNumber *foundEntryOldOff;
     if (tif->tif_map_dir_offset_to_number == NULL)
         return 1;
 
-    TIFFOffsetAndDirNumber entryOld;
     entryOld.offset = diroff;
     entryOld.dirNumber = 0;
     /* We must remove first from tif_map_dir_number_to_offset as the
      * entry is owned (and thus freed) by tif_map_dir_offset_to_number.
      * However, we need firstly to find the directory number from offset. */
 
-    TIFFOffsetAndDirNumber *foundEntryOldOff =
+    foundEntryOldOff =
         (TIFFOffsetAndDirNumber *)TIFFHashSetLookup(
             tif->tif_map_dir_offset_to_number, &entryOld);
     if (foundEntryOldOff)
diff --strip-trailing-cr -urN tiff.orig/dirwrite.c tiff/dirwrite.c
--- tiff.orig/dirwrite.c	2023-06-26 13:18:09.000000000 +0000
+++ tiff/dirwrite.c	2023-11-06 22:40:09.000000000 +0000
@@ -311,6 +311,7 @@
 int TIFFRewriteDirectory(TIFF *tif)
 {
     static const char module[] = "TIFFRewriteDirectory";
+    uint64_t torewritediroff;
 
     /* We don't need to do anything special if it hasn't been written. */
     if (tif->tif_diroff == 0)
@@ -320,7 +321,7 @@
      * Find and zero the pointer to this directory, so that TIFFLinkDirectory
      * will cause it to be added after this directories current pre-link.
      */
-    uint64_t torewritediroff = tif->tif_diroff;
+    torewritediroff = tif->tif_diroff;
 
     if (!(tif->tif_flags & TIFF_BIGTIFF))
     {
@@ -2068,6 +2069,7 @@
     uint16_t n;
     uint16_t *o;
     int p;
+    int i;
     if (dir == NULL)
     {
         (*ndir)++;
@@ -2082,7 +2084,7 @@
     /* clang-format on */
 
     /* Check for proper number of transferfunctions */
-    for (int i = 0; i < n; i++)
+    for (i = 0; i < n; i++)
     {
         if (tif->tif_dir.td_transferfunction[i] == NULL)
         {
@@ -2562,7 +2564,7 @@
     }
     else
     {
-        nMax = ((9223372036854775807 - 1) / 2); /* for ULLONG range */
+        nMax = ((HB_ULL( 9223372036854775807 ) - 1) / 2); /* for ULLONG range */
     }
     fMax = (double)nMax;
 
@@ -2816,7 +2818,7 @@
 {
     assert(count < 0x40000000);
     assert(sizeof(float) == 4);
-    TIFFCvtNativeToIEEEFloat(tif, count, &value);
+    TIFFCvtNativeToIEEEFloat(tif, count, value);
     if (tif->tif_flags & TIFF_SWAB)
         TIFFSwabArrayOfFloat(value, count);
     return (TIFFWriteDirectoryTagData(tif, ndir, dir, tag, TIFF_FLOAT, count,
@@ -2830,7 +2832,7 @@
 {
     assert(count < 0x20000000);
     assert(sizeof(double) == 8);
-    TIFFCvtNativeToIEEEDouble(tif, count, &value);
+    TIFFCvtNativeToIEEEDouble(tif, count, value);
     if (tif->tif_flags & TIFF_SWAB)
         TIFFSwabArrayOfDouble(value, count);
     return (TIFFWriteDirectoryTagData(tif, ndir, dir, tag, TIFF_DOUBLE, count,
diff --strip-trailing-cr -urN tiff.orig/error.c tiff/error.c
--- tiff.orig/error.c	2023-05-22 13:49:02.000000000 +0000
+++ tiff/error.c	2023-11-06 21:36:11.000000000 +0000
@@ -83,9 +83,10 @@
     va_list ap;
     if (opts && opts->errorhandler)
     {
+        int stop;
         va_start(ap, fmt);
-        int stop = opts->errorhandler(NULL, opts->errorhandler_user_data,
-                                      module, fmt, ap);
+        stop = opts->errorhandler(NULL, opts->errorhandler_user_data,
+                                  module, fmt, ap);
         va_end(ap);
         if (stop)
             return;
@@ -109,8 +110,9 @@
     va_list ap;
     if (tif && tif->tif_errorhandler)
     {
+        int stop;
         va_start(ap, fmt);
-        int stop = (*tif->tif_errorhandler)(
+        stop = (*tif->tif_errorhandler)(
             tif, tif->tif_errorhandler_user_data, module, fmt, ap);
         va_end(ap);
         if (stop)
@@ -125,7 +127,7 @@
     if (_TIFFerrorHandlerExt)
     {
         va_start(ap, fmt);
-        (*_TIFFerrorHandlerExt)(tif ? tif->tif_clientdata : NULL, module, fmt,
+        (*_TIFFerrorHandlerExt)(tif ? tif->tif_clientdata : (thandle_t)0, module, fmt,
                                 ap);
         va_end(ap);
     }
diff --strip-trailing-cr -urN tiff.orig/getimage.c tiff/getimage.c
--- tiff.orig/getimage.c	2023-05-22 13:49:02.000000000 +0000
+++ tiff/getimage.c	2023-11-06 21:45:16.000000000 +0000
@@ -796,9 +796,11 @@
                 this_tw = tw - fromskew;
                 this_toskew = toskew + fromskew;
             }
+            {
             tmsize_t roffset = (tmsize_t)y * w + tocol;
             (*put)(img, raster + roffset, tocol, y, this_tw, nrow, fromskew,
                    this_toskew, buf + pos);
+            }
             tocol += this_tw;
             col += this_tw;
             /*
@@ -999,10 +1001,12 @@
                 this_tw = tw - fromskew;
                 this_toskew = toskew + fromskew;
             }
+            {
             tmsize_t roffset = (tmsize_t)y * w + tocol;
             (*put)(img, raster + roffset, tocol, y, this_tw, nrow, fromskew,
                    this_toskew, p0 + pos, p1 + pos, p2 + pos,
                    (alpha ? (pa + pos) : NULL));
+            }
             tocol += this_tw;
             col += this_tw;
             /*
@@ -1122,9 +1126,11 @@
 
         pos = ((row + img->row_offset) % rowsperstrip) * scanline +
               ((tmsize_t)img->col_offset * img->samplesperpixel);
+        {
         tmsize_t roffset = (tmsize_t)y * w;
         (*put)(img, raster + roffset, 0, y, w, nrow, fromskew, toskew,
                buf + pos);
+        }
         y += ((flip & FLIP_VERTICALLY) ? -(int32_t)nrow : (int32_t)nrow);
     }
 
@@ -1291,9 +1297,11 @@
 
         pos = ((row + img->row_offset) % rowsperstrip) * scanline +
               ((tmsize_t)img->col_offset * img->samplesperpixel);
+        {
         tmsize_t roffset = (tmsize_t)y * w;
         (*put)(img, raster + roffset, 0, y, w, nrow, fromskew, toskew, p0 + pos,
                p1 + pos, p2 + pos, (alpha ? (pa + pos) : NULL));
+        }
         y += ((flip & FLIP_VERTICALLY) ? -(int32_t)nrow : (int32_t)nrow);
     }
 
diff --strip-trailing-cr -urN tiff.orig/hash_set.c tiff/hash_set.c
--- tiff.orig/hash_set.c	2023-05-22 14:03:41.000000000 +0000
+++ tiff/hash_set.c	2023-11-06 22:14:24.000000000 +0000
@@ -26,7 +26,7 @@
  * DEALINGS IN THE SOFTWARE.
  ****************************************************************************/
 
-#include "tif_config.h"
+#include "tiffconf.h"
 
 #include "hash_set.h"
 
@@ -225,15 +225,17 @@
 
 static void TIFFHashSetClearInternal(TIFFHashSet *set, bool bFinalize)
 {
+    int i;
     assert(set != NULL);
-    for (int i = 0; i < set->nAllocatedSize; i++)
+    for (i = 0; i < set->nAllocatedSize; i++)
     {
         TIFFList *cur = set->tabList[i];
         while (cur)
         {
+            TIFFList *psNext;
             if (set->fnFreeEltFunc)
                 set->fnFreeEltFunc(cur->pData);
-            TIFFList *psNext = cur->psNext;
+            psNext = cur->psNext;
             if (bFinalize)
                 free(cur);
             else
@@ -368,6 +370,7 @@
     int nNewAllocatedSize = anPrimes[set->nIndiceAllocatedSize];
     TIFFList **newTabList =
         (TIFFList **)(calloc(sizeof(TIFFList *), nNewAllocatedSize));
+    int i;
     if (newTabList == NULL)
         return false;
 #ifdef HASH_DEBUG
@@ -378,7 +381,7 @@
               set->nCollisions * 100.0 / set->nSize);
     set->nCollisions = 0;
 #endif
-    for (int i = 0; i < set->nAllocatedSize; i++)
+    for (i = 0; i < set->nAllocatedSize; i++)
     {
         TIFFList *cur = set->tabList[i];
         while (cur)
@@ -439,8 +442,9 @@
 
 bool TIFFHashSetInsert(TIFFHashSet *set, void *elt)
 {
+    void **pElt;
     assert(set != NULL);
-    void **pElt = TIFFHashSetFindPtr(set, elt);
+    pElt = TIFFHashSetFindPtr(set, elt);
     if (pElt)
     {
         if (set->fnFreeEltFunc)
@@ -464,12 +468,14 @@
         }
     }
 
+    {
     const unsigned long nHashVal = set->fnHashFunc(elt) % set->nAllocatedSize;
 #ifdef HASH_DEBUG
     if (set->tabList[nHashVal])
         set->nCollisions++;
 #endif
 
+    {
     TIFFList *new_elt = TIFFHashSetGetNewListElt(set);
     if (new_elt == NULL)
     {
@@ -481,6 +487,8 @@
     new_elt->psNext = set->tabList[nHashVal];
     set->tabList[nHashVal] = new_elt;
     set->nSize++;
+    }
+    }
 
     return true;
 }
@@ -501,8 +509,9 @@
 
 void *TIFFHashSetLookup(TIFFHashSet *set, const void *elt)
 {
+    void **pElt;
     assert(set != NULL);
-    void **pElt = TIFFHashSetFindPtr(set, elt);
+    pElt = TIFFHashSetFindPtr(set, elt);
     if (pElt)
         return *pElt;
 
@@ -532,6 +541,7 @@
         }
     }
 
+    {
     int nHashVal = (int)(set->fnHashFunc(elt) % set->nAllocatedSize);
     TIFFList *cur = set->tabList[nHashVal];
     TIFFList *prev = NULL;
@@ -558,6 +568,7 @@
         prev = cur;
         cur = cur->psNext;
     }
+    }
     return false;
 }
 
diff --strip-trailing-cr -urN tiff.orig/open.c tiff/open.c
--- tiff.orig/open.c	2023-05-22 14:03:41.000000000 +0000
+++ tiff/open.c	2023-11-06 22:41:24.000000000 +0000
@@ -219,6 +219,7 @@
     m = _TIFFgetMode(opts, clientdata, mode, module);
     if (m == -1)
         goto bad2;
+    {
     tmsize_t size_to_alloc = (tmsize_t)(sizeof(TIFF) + strlen(name) + 1);
     if (opts && opts->max_single_mem_alloc > 0 &&
         size_to_alloc > opts->max_single_mem_alloc)
@@ -232,6 +233,7 @@
         goto bad2;
     }
     tif = (TIFF *)_TIFFmallocExt(NULL, size_to_alloc);
+    }
     if (tif == NULL)
     {
         _TIFFErrorEarly(opts, clientdata, module,
diff --strip-trailing-cr -urN tiff.orig/print.c tiff/print.c
--- tiff.orig/print.c	2023-05-22 13:49:02.000000000 +0000
+++ tiff/print.c	2023-11-06 22:15:34.000000000 +0000
@@ -82,7 +82,8 @@
     const char *field_name = fip->field_name;
     if (TIFFFieldIsAnonymous(fip))
     {
-        for (size_t i = 0; i < NTAGS; ++i)
+        size_t i;
+        for (i = 0; i < NTAGS; ++i)
         {
             if (fip->field_tag == tagnames[i].tag)
             {
diff --strip-trailing-cr -urN tiff.orig/tiffconf.h tiff/tiffconf.h
--- tiff.orig/tiffconf.h	2023-05-22 14:03:41.000000000 +0000
+++ tiff/tiffconf.h	2023-11-06 12:58:27.000000000 +0000
@@ -13,38 +13,43 @@
 #ifndef _TIFFCONF_
 #define _TIFFCONF_
 
+#include "hbdefs.h"
+#include "hb_io.h"
 
-#include <stddef.h>
-#include <stdint.h>
-#include <inttypes.h>
-
+#include <inttypes.h> /* For PRIu16 */
 
 /* Signed 16-bit type */
-#undef TIFF_INT16_T
+#define TIFF_INT16_T HB_I16
 
 /* Signed 32-bit type */
-#undef TIFF_INT32_T
+#define TIFF_INT32_T HB_I32
 
 /* Signed 64-bit type */
-#undef TIFF_INT64_T
+#define TIFF_INT64_T HB_I64
 
 /* Signed 8-bit type */
-#undef TIFF_INT8_T
+#define TIFF_INT8_T HB_I8
 
 /* Unsigned 16-bit type */
-#undef TIFF_UINT16_T
+#define TIFF_UINT16_T HB_U16
 
 /* Unsigned 32-bit type */
-#undef TIFF_UINT32_T
+#define TIFF_UINT32_T HB_U32
 
 /* Unsigned 64-bit type */
-#undef TIFF_UINT64_T
+#define TIFF_UINT64_T HB_U64
 
 /* Unsigned 8-bit type */
-#undef TIFF_UINT8_T
+#define TIFF_UINT8_T HB_U8
 
 /* Signed size type */
-#undef TIFF_SSIZE_T
+#define TIFF_SSIZE_T HB_ISIZ
+
+/* Signed size type formatter */
+#define TIFF_SSIZE_FORMAT "" HB_PFS "d"
+
+/* file handler */
+#define TIFF_FILE_HANDLE HB_FHANDLE
 
 /* Compatibility stuff. */
 
@@ -66,28 +71,40 @@
 
 /* Native cpu byte order: 1 if big-endian (Motorola) or 0 if little-endian
    (Intel) */
-#undef HOST_BIGENDIAN
+#if defined( HB_BIG_ENDIAN )
+   #define HOST_BIGENDIAN
+#endif
 
+#if 0
 /* Support CCITT Group 3 & 4 algorithms */
 #undef CCITT_SUPPORT
+#endif
 
+#if 0
 /* Support JPEG compression (requires IJG JPEG library) */
 #undef JPEG_SUPPORT
+#endif
 
 /* Support JBIG compression (requires JBIG-KIT library) */
 #undef JBIG_SUPPORT
 
+#if 0
 /* Support LERC compression */
 #undef LERC_SUPPORT
+#endif
 
 /* Support LogLuv high dynamic range encoding */
 #undef LOGLUV_SUPPORT
 
+#if 0
 /* Support LZW algorithm */
 #undef LZW_SUPPORT
+#endif
 
+#if 0
 /* Support NeXT 2-bit RLE algorithm */
 #undef NEXT_SUPPORT
+#endif
 
 /* Support Old JPEG compresson (read contrib/ojpeg/README first! Compilation
    fails with unpatched IJG JPEG library) */
@@ -102,11 +119,15 @@
 /* Support ThunderScan 4-bit RLE algorithm */
 #undef THUNDER_SUPPORT
 
+#if 0
 /* Support Deflate compression */
 #undef ZIP_SUPPORT
+#endif
 
+#if 0
 /* Support libdeflate enhanced compression */
 #undef LIBDEFLATE_SUPPORT
+#endif
 
 /* Support strip chopping (whether or not to convert single-strip uncompressed
    images to multiple strips of ~8Kb to reduce memory usage) */
@@ -139,6 +160,24 @@
 #define PHOTOSHOP_SUPPORT
 #define IPTC_SUPPORT
 
+#if ! defined( HB_OS_UNIX )
+#ifndef O_RDONLY
+#define O_RDONLY 0
+#endif
+#ifndef O_RDWR
+#define O_RDWR 2
+#endif
+#ifndef O_WRONLY
+#define O_WRONLY 000001
+#endif
+#ifndef O_CREAT
+#define O_CREAT 000100
+#endif
+#ifndef O_TRUNC
+#define O_TRUNC 001000
+#endif
+#endif
+
 #endif /* _TIFFCONF_ */
 
 /* clang-format on */
diff --strip-trailing-cr -urN tiff.orig/tiffio.h tiff/tiffio.h
--- tiff.orig/tiffio.h	2023-09-05 10:01:39.000000000 +0000
+++ tiff/tiffio.h	2023-11-05 17:01:47.000000000 +0000
@@ -103,6 +103,8 @@
 #else
 typedef HFILE thandle_t; /* client data handle */
 #endif /* __WIN32__ */
+#elif defined(TIFF_FILE_HANDLE)
+typedef TIFF_FILE_HANDLE thandle_t; /* client data handle */
 #else
 typedef void *thandle_t; /* client data handle */
 #endif /* USE_WIN32_FILEIO */
diff --strip-trailing-cr -urN tiff.orig/tiffiop.h tiff/tiffiop.h
--- tiff.orig/tiffiop.h	2023-05-22 14:03:41.000000000 +0000
+++ tiff/tiffiop.h	2023-11-05 17:38:19.000000000 +0000
@@ -28,7 +28,7 @@
  * ``Library-private'' definitions.
  */
 
-#include "tif_config.h"
+#include "tiffconf.h"
 
 #ifdef HAVE_FCNTL_H
 #include <fcntl.h>
diff --strip-trailing-cr -urN tiff.orig/unix.c tiff/unix.c
--- tiff.orig/unix.c	2023-05-22 13:49:02.000000000 +0000
+++ tiff/unix.c	2023-11-06 13:14:04.000000000 +0000
@@ -27,7 +27,7 @@
  * Windows Common RunTime Library.
  */
 
-#include "tif_config.h"
+#include "tiffconf.h"
 
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
@@ -228,7 +228,7 @@
     int m, fd;
     TIFF *tif;
 
-    m = _TIFFgetMode(opts, NULL, mode, module);
+    m = _TIFFgetMode(opts, (thandle_t)0, mode, module);
     if (m == -1)
         return ((TIFF *)0);
 
@@ -242,12 +242,12 @@
     {
         if (errno > 0 && strerror(errno) != NULL)
         {
-            _TIFFErrorEarly(opts, NULL, module, "%s: %s", name,
+            _TIFFErrorEarly(opts, (thandle_t)0, module, "%s: %s", name,
                             strerror(errno));
         }
         else
         {
-            _TIFFErrorEarly(opts, NULL, module, "%s: Cannot open", name);
+            _TIFFErrorEarly(opts, (thandle_t)0, module, "%s: Cannot open", name);
         }
         return ((TIFF *)0);
     }
diff --strip-trailing-cr -urN tiff.orig/warn.c tiff/warn.c
--- tiff.orig/warn.c	2023-05-22 13:49:02.000000000 +0000
+++ tiff/warn.c	2023-11-06 22:20:35.000000000 +0000
@@ -82,9 +82,10 @@
     va_list ap;
     if (tif && tif->tif_warnhandler)
     {
+        int stop;
         va_start(ap, fmt);
-        int stop = (*tif->tif_warnhandler)(tif, tif->tif_warnhandler_user_data,
-                                           module, fmt, ap);
+        stop = (*tif->tif_warnhandler)(tif, tif->tif_warnhandler_user_data,
+                                       module, fmt, ap);
         va_end(ap);
         if (stop)
             return;
