/* A Bison parser, made by GNU Bison 2.5.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2011 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.5"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse         hb_comp_yyparse
#define yylex           hb_comp_yylex
#define yyerror         hb_comp_yyerror
#define yylval          hb_comp_yylval
#define yychar          hb_comp_yychar
#define yydebug         hb_comp_yydebug
#define yynerrs         hb_comp_yynerrs


/* Copy the first part of user declarations.  */

/* Line 268 of yacc.c  */
#line 5 "harbour.y"

/*
 * Harbour Project source code:
 * Compiler YACC rules and actions
 *
 * Copyright 1999 Antonio Linares <alinares@fivetech.com>
 * www - http://harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA (or visit
 * their web site at https://www.gnu.org/).
 *
 */

/* TODO list
 * 1) Change the pcode generated by ::cVar from Self:cVar to QSELF():cVar
 *    The major problem to solve is how to support QSELF() inside a codeblock.
 */


#include "hbcomp.h"

/* Compile using: bison -d -v harbour.y */

/* to pacify some meaningless warnings */
#if defined( __BORLANDC__ )
#  if ! defined( __STDC__ )
#     define __STDC__
#  endif
#  pragma warn -aus
#  pragma warn -ccc
#  pragma warn -rch
#elif defined( __WATCOMC__ )
#  pragma warning 13 9
#  pragma warning 368 9
#endif

#undef alloca
#define alloca  hb_xgrab
#undef malloc
#define malloc  hb_xgrab
#undef realloc
#define realloc hb_xrealloc
#undef free
#define free    hb_xfree

/* NOTE: these symbols are used internally in bison.simple
 */
#undef YYFREE
#define YYFREE hb_xfree
#undef YYMALLOC
#define YYMALLOC hb_xgrab

#define NO_YYERROR

/* NOTE: these symbols are defined explicitly to pacify warnings */
#define YYENABLE_NLS          0
#define YYLTYPE_IS_TRIVIAL    0

/* NOTE: increase the maximum size of bison stack size */
#define YYMAXDEPTH 100000

static void hb_compLoopStart( HB_COMP_DECL, HB_BOOL );
static void hb_compLoopEnd( HB_COMP_DECL );
static void hb_compLoopLoop( HB_COMP_DECL );
static void hb_compLoopExit( HB_COMP_DECL );
static void hb_compLoopHere( HB_COMP_DECL );
static long hb_compLoopCount( HB_COMP_DECL );

static void * hb_compElseIfGen( HB_COMP_DECL, void * pFirstElseIf, HB_SIZE nOffset ); /* generates a support structure for elseifs pcode fixups */
static void hb_compElseIfFix( HB_COMP_DECL, void * pIfElseIfs ); /* implements the ElseIfs pcode fixups */

static void hb_compRTVariableAdd( HB_COMP_DECL, PHB_EXPR, HB_BOOL );
static void hb_compRTVariableGen( HB_COMP_DECL, const char * );

static PHB_EXPR hb_compArrayDimPush( PHB_EXPR pInitValue, HB_COMP_DECL );
static void hb_compVariableDim( const char *, PHB_EXPR, HB_COMP_DECL );

static void hb_compForStart( HB_COMP_DECL, const char *szVarName, int iForEachDir );
static void hb_compForEnd( HB_COMP_DECL, const char *szVarName );
static void hb_compEnumStart( HB_COMP_DECL, PHB_EXPR pVars, PHB_EXPR pExprs, int descend );
static void hb_compEnumNext( HB_COMP_DECL, PHB_EXPR pExpr, int descend );
static void hb_compEnumEnd( HB_COMP_DECL, PHB_EXPR pExpr );

static void hb_compSwitchStart( HB_COMP_DECL, PHB_EXPR );
static void hb_compSwitchAdd( HB_COMP_DECL, PHB_EXPR );
static void hb_compSwitchEnd( HB_COMP_DECL );

static PHB_EXPR hb_compCheckMethod( HB_COMP_DECL, PHB_EXPR pExpr );
static PHB_EXPR hb_compCheckPassByRef( HB_COMP_DECL, PHB_EXPR pExpr );

#ifdef HB_YYDEBUG
   #define YYDEBUG        1 /* Parser debug information support */
#endif

/* Controls if passing by reference '@' is allowed */
#define HB_PASSBYREF_OFF      0
#define HB_PASSBYREF_FUNCALL  1
#define HB_PASSBYREF_ARRAY    2

static void hb_compDebugStart( void ) { }



/* Line 268 of yacc.c  */
#line 195 "harboury.c"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     FUNCTION = 258,
     PROCEDURE = 259,
     IDENTIFIER = 260,
     RETURN = 261,
     NIL = 262,
     NUM_DOUBLE = 263,
     INASSIGN = 264,
     NUM_LONG = 265,
     LOCAL = 266,
     STATIC = 267,
     IIF = 268,
     IF = 269,
     ELSE = 270,
     ELSEIF = 271,
     END = 272,
     ENDIF = 273,
     LITERAL = 274,
     TRUEVALUE = 275,
     FALSEVALUE = 276,
     ANNOUNCE = 277,
     EXTERN = 278,
     DYNAMIC = 279,
     INIT = 280,
     EXIT = 281,
     AND = 282,
     OR = 283,
     NOT = 284,
     PUBLIC = 285,
     EQ = 286,
     NE1 = 287,
     NE2 = 288,
     INC = 289,
     DEC = 290,
     ALIASOP = 291,
     DOCASE = 292,
     CASE = 293,
     OTHERWISE = 294,
     ENDCASE = 295,
     ENDDO = 296,
     MEMVAR = 297,
     WHILE = 298,
     LOOP = 299,
     FOR = 300,
     NEXT = 301,
     TO = 302,
     STEP = 303,
     LE = 304,
     GE = 305,
     FIELD = 306,
     IN = 307,
     PARAMETERS = 308,
     PLUSEQ = 309,
     MINUSEQ = 310,
     MULTEQ = 311,
     DIVEQ = 312,
     POWER = 313,
     EXPEQ = 314,
     MODEQ = 315,
     PRIVATE = 316,
     BEGINSEQ = 317,
     BREAK = 318,
     RECOVER = 319,
     RECOVERUSING = 320,
     ALWAYS = 321,
     ENDSEQ = 322,
     DO = 323,
     WITH = 324,
     SELF = 325,
     LINE = 326,
     MACROVAR = 327,
     MACROTEXT = 328,
     AS_ARRAY = 329,
     AS_BLOCK = 330,
     AS_CHARACTER = 331,
     AS_CLASS = 332,
     AS_DATE = 333,
     AS_LOGICAL = 334,
     AS_NUMERIC = 335,
     AS_OBJECT = 336,
     AS_VARIANT = 337,
     DECLARE = 338,
     OPTIONAL = 339,
     DECLARE_CLASS = 340,
     DECLARE_MEMBER = 341,
     AS_ARRAY_ARRAY = 342,
     AS_BLOCK_ARRAY = 343,
     AS_CHARACTER_ARRAY = 344,
     AS_CLASS_ARRAY = 345,
     AS_DATE_ARRAY = 346,
     AS_LOGICAL_ARRAY = 347,
     AS_NUMERIC_ARRAY = 348,
     AS_OBJECT_ARRAY = 349,
     PROCREQ = 350,
     CBSTART = 351,
     DOIDENT = 352,
     FOREACH = 353,
     DESCEND = 354,
     DOSWITCH = 355,
     ENDSWITCH = 356,
     WITHOBJECT = 357,
     ENDWITH = 358,
     NUM_DATE = 359,
     TIMESTAMP = 360,
     EPSILON = 361,
     HASHOP = 362,
     THREAD = 363,
     POST = 364,
     UNARY = 365,
     PRE = 366
   };
#endif



#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 293 of yacc.c  */
#line 121 "harbour.y"

   const char * string; /* to hold a string returned by lex */
   int     iNumber;     /* to hold a temporary integer number */
   HB_SIZE sNumber;     /* to hold a temporary HB_SIZE values */
   HB_MAXINT lNumber;   /* to hold a temporary long number */
   HB_BOOL bTrue;
   PHB_EXPR asExpr;
   void * pVoid;        /* to hold any memory structure we may need */
   struct
   {
      HB_MAXINT lNumber;   /* to hold a long number returned by lex */
      HB_UCHAR  bWidth;    /* to hold the width of the value */
   } valLong;
   struct
   {
      double   dNumber;    /* to hold a double number returned by lex */
      HB_UCHAR bWidth;     /* to hold the width of the value */
      HB_UCHAR bDec;       /* to hold the number of decimal points in the value */
   } valDouble;
   struct
   {
      long     date;
      long     time;
   } valTimeStamp;
   struct
   {
      char *   string;
      HB_SIZE  length;
      HB_BOOL  dealloc;
   } valChar;
   struct
   {
      char *   string;
      HB_SIZE  length;
      int      flags;   /* Flag for early {|| &macro} (1) or late {|| &(macro)} (2) binding */
   } asCodeblock;
   PHB_VARTYPE asVarType;



/* Line 293 of yacc.c  */
#line 383 "harboury.c"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */

/* Line 343 of yacc.c  */
#line 160 "harbour.y"

/* This must be placed after the above union - the union is
 * typedef-ined to YYSTYPE
 */
extern int  yylex( YYSTYPE *, HB_COMP_DECL );    /* main lex token function, called by yyparse() */
extern void yyerror( HB_COMP_DECL, const char * );     /* parsing error management function */


/* Line 343 of yacc.c  */
#line 404 "harboury.c"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  280
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   8901

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  134
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  242
/* YYNRULES -- Number of rules.  */
#define YYNRULES  613
/* YYNRULES -- Number of states.  */
#define YYNSTATES  956

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   366

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     123,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,   113,   118,   121,     2,
     126,   127,   116,   114,   125,   115,     2,   117,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   130,   124,
     111,   110,   112,     2,   122,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   132,     2,   131,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   128,   133,   129,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   119,   120
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,     8,    10,    12,    14,    16,
      19,    22,    25,    28,    31,    34,    38,    42,    47,    54,
      55,    61,    62,    68,    69,    78,    79,    88,    89,    91,
      93,    95,    96,    98,   100,   104,   105,   107,   108,   110,
     112,   114,   116,   118,   120,   122,   125,   127,   129,   131,
     133,   135,   137,   139,   141,   143,   145,   148,   151,   156,
     159,   162,   165,   168,   171,   174,   177,   180,   183,   186,
     189,   192,   195,   198,   199,   204,   207,   210,   213,   214,
     219,   220,   221,   227,   228,   229,   235,   237,   239,   241,
     245,   249,   250,   255,   260,   262,   266,   267,   270,   272,
     274,   276,   278,   280,   282,   287,   295,   300,   308,   309,
     311,   313,   315,   317,   320,   321,   323,   325,   329,   331,
     335,   337,   339,   341,   343,   345,   347,   349,   351,   353,
     355,   357,   359,   361,   363,   365,   367,   369,   371,   373,
     375,   377,   379,   381,   384,   387,   389,   392,   394,   397,
     400,   402,   404,   407,   409,   412,   416,   419,   422,   425,
     429,   433,   436,   440,   446,   448,   451,   453,   455,   458,
     461,   464,   466,   468,   471,   475,   478,   481,   484,   487,
     490,   493,   496,   499,   502,   505,   508,   511,   514,   517,
     519,   521,   524,   527,   530,   533,   536,   539,   542,   545,
     548,   551,   554,   557,   560,   563,   566,   569,   572,   575,
     578,   581,   584,   587,   590,   593,   596,   599,   602,   605,
     608,   611,   614,   617,   620,   623,   626,   629,   632,   635,
     638,   641,   644,   647,   650,   653,   656,   661,   663,   668,
     671,   674,   676,   680,   682,   684,   687,   690,   693,   696,
     699,   701,   703,   707,   711,   714,   716,   718,   723,   726,
     731,   734,   736,   738,   740,   742,   744,   746,   748,   750,
     753,   755,   757,   759,   761,   763,   765,   767,   769,   771,
     774,   776,   778,   781,   783,   786,   788,   790,   792,   794,
     796,   798,   800,   802,   804,   806,   808,   811,   814,   816,
     818,   820,   821,   823,   825,   827,   829,   831,   833,   835,
     837,   839,   841,   843,   845,   847,   849,   851,   853,   855,
     857,   859,   861,   863,   865,   867,   869,   871,   873,   875,
     877,   879,   881,   883,   886,   889,   892,   895,   898,   901,
     905,   909,   913,   917,   921,   925,   929,   933,   935,   937,
     939,   941,   943,   945,   949,   953,   957,   961,   965,   969,
     973,   977,   981,   985,   989,   993,   997,  1001,  1005,  1009,
    1013,  1016,  1019,  1023,  1028,  1030,  1034,  1035,  1040,  1041,
    1043,  1045,  1049,  1052,  1057,  1059,  1063,  1064,  1065,  1071,
    1072,  1078,  1080,  1084,  1088,  1091,  1100,  1103,  1104,  1109,
    1110,  1115,  1116,  1122,  1123,  1128,  1130,  1134,  1136,  1140,
    1142,  1145,  1150,  1154,  1157,  1158,  1164,  1168,  1171,  1174,
    1178,  1183,  1184,  1190,  1193,  1198,  1199,  1202,  1203,  1208,
    1211,  1216,  1217,  1226,  1227,  1233,  1237,  1242,  1246,  1247,
    1255,  1257,  1261,  1263,  1266,  1268,  1271,  1272,  1279,  1280,
    1284,  1285,  1287,  1289,  1293,  1294,  1296,  1298,  1300,  1304,
    1308,  1314,  1316,  1320,  1322,  1325,  1329,  1335,  1340,  1346,
    1354,  1358,  1363,  1370,  1376,  1383,  1392,  1394,  1396,  1398,
    1400,  1402,  1404,  1406,  1408,  1411,  1415,  1419,  1424,  1425,
    1426,  1433,  1434,  1439,  1440,  1441,  1448,  1449,  1450,  1458,
    1460,  1462,  1464,  1468,  1472,  1475,  1480,  1482,  1484,  1486,
    1487,  1491,  1493,  1496,  1497,  1498,  1505,  1506,  1507,  1515,
    1516,  1517,  1523,  1524,  1530,  1531,  1532,  1540,  1542,  1544,
    1546,  1548,  1549,  1550,  1551,  1564,  1566,  1568,  1569,  1572,
    1575,  1577,  1580,  1582,  1585,  1587,  1589,  1591,  1595,  1598,
    1600,  1602,  1606,  1607,  1608,  1609,  1620,  1621,  1623,  1624,
    1629,  1632,  1634,  1636,  1638,  1639,  1644,  1646,  1649,  1650,
    1656,  1657,  1664,  1666,  1669,  1670,  1671,  1677,  1678,  1679,
    1680,  1681,  1693,  1695,  1697,  1698,  1701,  1702,  1706,  1708,
    1709,  1713,  1717,  1719,  1722,  1726,  1729,  1730,  1733,  1735,
    1738,  1740,  1743,  1747,  1749,  1751,  1753,  1755,  1757,  1758,
    1765,  1767,  1769,  1771
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     135,     0,    -1,   136,    -1,    -1,   375,    -1,   275,    -1,
     138,    -1,   150,    -1,   137,    -1,     1,   375,    -1,   136,
     375,    -1,   136,   275,    -1,   136,   138,    -1,   136,   150,
      -1,   136,   137,    -1,   136,     1,   375,    -1,    71,    10,
     375,    -1,    71,    10,    19,   375,    -1,    71,    10,    19,
     122,    19,   375,    -1,    -1,   143,     3,   168,   139,   375,
      -1,    -1,   143,     4,   168,   140,   375,    -1,    -1,   143,
       3,   168,   141,   126,   144,   127,   375,    -1,    -1,   143,
       4,   168,   142,   126,   144,   127,   375,    -1,    -1,    12,
      -1,    25,    -1,    26,    -1,    -1,   106,    -1,   149,    -1,
     149,   125,   106,    -1,    -1,   147,    -1,    -1,   148,    -1,
      80,    -1,    76,    -1,    78,    -1,    79,    -1,    75,    -1,
      81,    -1,    77,   168,    -1,    82,    -1,   148,    -1,    74,
      -1,    93,    -1,    89,    -1,    91,    -1,    92,    -1,    87,
      -1,    88,    -1,    94,    -1,    90,   168,    -1,   168,   145,
      -1,   149,   125,   168,   145,    -1,   291,   159,    -1,   254,
     159,    -1,   204,   159,    -1,   200,   159,    -1,   215,   159,
      -1,   195,   159,    -1,   252,   159,    -1,   225,   159,    -1,
     224,   159,    -1,   235,   159,    -1,   227,   159,    -1,   228,
     159,    -1,   368,   159,    -1,    63,   159,    -1,    -1,    63,
     151,   218,   375,    -1,    26,   159,    -1,    44,   159,    -1,
       6,   159,    -1,    -1,     6,   152,   218,   375,    -1,    -1,
      -1,    30,   153,   262,   154,   375,    -1,    -1,    -1,    61,
     155,   262,   156,   375,    -1,   256,    -1,   268,    -1,   272,
      -1,    23,   166,   375,    -1,    24,   167,   375,    -1,    -1,
      22,   168,   157,   375,    -1,    95,   158,   127,   375,    -1,
      19,    -1,    19,   114,    19,    -1,    -1,   160,   375,    -1,
     375,    -1,   150,    -1,   275,    -1,   137,    -1,   162,    -1,
       1,    -1,   163,     3,   168,   375,    -1,   163,     3,   168,
     126,   144,   127,   375,    -1,   163,     4,   168,   375,    -1,
     163,     4,   168,   126,   144,   127,   375,    -1,    -1,    12,
      -1,    25,    -1,    26,    -1,   161,    -1,   164,   161,    -1,
      -1,   164,    -1,   168,    -1,   166,   125,   168,    -1,   168,
      -1,   167,   125,   168,    -1,     5,    -1,    48,    -1,    47,
      -1,    44,    -1,    26,    -1,    52,    -1,    84,    -1,    23,
      -1,    24,    -1,    22,    -1,    11,    -1,    42,    -1,    12,
      -1,    61,    -1,    30,    -1,    53,    -1,    95,    -1,    99,
      -1,   108,    -1,     8,    -1,    10,    -1,   104,    -1,   105,
      -1,    10,    36,    -1,     8,    36,    -1,     7,    -1,   173,
      36,    -1,    19,    -1,   175,    36,    -1,   247,    36,    -1,
      20,    -1,    21,    -1,   178,    36,    -1,    70,    -1,   180,
      36,    -1,   128,   241,   129,    -1,   182,    36,    -1,   182,
     239,    -1,   184,    36,    -1,   128,   107,   129,    -1,   128,
     188,   129,    -1,   186,    36,    -1,   218,   107,   220,    -1,
     188,   125,   218,   107,   220,    -1,   168,    -1,   168,    36,
      -1,    72,    -1,    73,    -1,   191,    36,    -1,   121,   252,
      -1,   193,    36,    -1,   191,    -1,   193,    -1,    51,    36,
      -1,    51,    36,   196,    -1,   196,   190,    -1,   196,   172,
      -1,   196,   253,    -1,   196,   192,    -1,   196,   194,    -1,
     196,   174,    -1,   196,   176,    -1,   196,   179,    -1,   196,
     177,    -1,   196,   181,    -1,   196,   183,    -1,   196,   185,
      -1,   196,   187,    -1,   196,   255,    -1,   168,    -1,   195,
      -1,   172,   198,    -1,   192,   198,    -1,   194,   198,    -1,
     253,   198,    -1,   174,   198,    -1,   176,   198,    -1,   179,
     198,    -1,   177,   198,    -1,   187,   198,    -1,   181,   198,
      -1,   183,   198,    -1,   185,   198,    -1,   202,   198,    -1,
     255,   198,    -1,   206,   198,    -1,   214,   198,    -1,   216,
     198,    -1,   190,   198,    -1,   196,   198,    -1,   197,   198,
      -1,   172,   252,    -1,   190,   252,    -1,   192,   252,    -1,
     194,   252,    -1,   253,   252,    -1,   196,   252,    -1,   169,
     239,    -1,   173,   239,    -1,   170,   239,    -1,   171,   239,
      -1,   175,   239,    -1,   247,   239,    -1,   178,   239,    -1,
     186,   239,    -1,   180,   239,    -1,   189,   239,    -1,   199,
     239,    -1,   200,   239,    -1,   195,   239,    -1,   211,   239,
      -1,   215,   239,    -1,   204,   239,    -1,   254,   239,    -1,
     252,   239,    -1,   201,    36,    -1,   168,   126,   207,   127,
      -1,   203,    -1,   195,   126,   207,   127,    -1,   122,   203,
      -1,   204,    36,    -1,   210,    -1,   207,   125,   210,    -1,
     220,    -1,   209,    -1,   122,   168,    -1,   122,   191,    -1,
     122,   199,    -1,   122,   211,    -1,   122,   201,    -1,   106,
      -1,   208,    -1,   222,   130,   212,    -1,   213,   130,   212,
      -1,   130,   212,    -1,   168,    -1,   195,    -1,   126,   122,
     168,   127,    -1,   211,    36,    -1,   211,   126,   207,   127,
      -1,   215,    36,    -1,   169,    -1,   173,    -1,   170,    -1,
     171,    -1,   175,    -1,   247,    -1,   178,    -1,   180,    -1,
     180,   147,    -1,   182,    -1,   184,    -1,   186,    -1,   199,
      -1,   200,    -1,   191,    -1,   193,    -1,   201,    -1,   204,
      -1,   204,   147,    -1,   254,    -1,   211,    -1,   211,   147,
      -1,   215,    -1,   215,   147,    -1,   228,    -1,   235,    -1,
     224,    -1,   225,    -1,   226,    -1,   236,    -1,   237,    -1,
     238,    -1,   217,    -1,   189,    -1,   252,    -1,   189,   147,
      -1,   252,   147,    -1,   205,    -1,   106,    -1,   218,    -1,
      -1,   218,    -1,   168,    -1,   199,    -1,   191,    -1,   193,
      -1,   211,    -1,   201,    -1,   252,    -1,   169,    -1,   173,
      -1,   170,    -1,   171,    -1,   175,    -1,   247,    -1,   178,
      -1,   180,    -1,   182,    -1,   184,    -1,   186,    -1,   199,
      -1,   200,    -1,   195,    -1,   189,    -1,   201,    -1,   252,
      -1,   204,    -1,   254,    -1,   211,    -1,   215,    -1,    34,
      -1,    35,    -1,   222,   223,    -1,    34,   218,    -1,    35,
     218,    -1,    29,   218,    -1,   115,   218,    -1,   114,   218,
      -1,   222,   110,   218,    -1,   222,     9,   218,    -1,   222,
      54,   218,    -1,   222,    55,   218,    -1,   222,    56,   218,
      -1,   222,    57,   218,    -1,   222,    60,   218,    -1,   222,
      59,   218,    -1,   229,    -1,   230,    -1,   231,    -1,   232,
      -1,   233,    -1,   234,    -1,   218,   114,   218,    -1,   218,
     115,   218,    -1,   218,   116,   218,    -1,   218,   117,   218,
      -1,   218,   118,   218,    -1,   218,    58,   218,    -1,   218,
      27,   218,    -1,   218,    28,   218,    -1,   218,    31,   218,
      -1,   218,   111,   218,    -1,   218,   112,   218,    -1,   218,
      49,   218,    -1,   218,    50,   218,    -1,   218,    32,   218,
      -1,   218,    33,   218,    -1,   218,   113,   218,    -1,   218,
     110,   218,    -1,   240,   131,    -1,   132,   219,    -1,   240,
     125,   219,    -1,   240,   131,   132,   219,    -1,   210,    -1,
     241,   125,   210,    -1,    -1,    96,   243,   244,   133,    -1,
      -1,   106,    -1,   245,    -1,   245,   125,   106,    -1,   168,
     145,    -1,   245,   125,   168,   145,    -1,   218,    -1,   246,
     125,   218,    -1,    -1,    -1,   242,   248,   246,   249,   129,
      -1,    -1,   242,   375,   250,   165,   129,    -1,   218,    -1,
     251,   125,   218,    -1,   126,   251,   127,    -1,   252,    36,
      -1,    13,   126,   218,   125,   208,   125,   208,   127,    -1,
     254,    36,    -1,    -1,    11,   257,   261,   375,    -1,    -1,
      12,   258,   261,   375,    -1,    -1,   108,    12,   259,   261,
     375,    -1,    -1,    53,   260,   274,   375,    -1,   264,    -1,
     261,   125,   264,    -1,   263,    -1,   262,   125,   263,    -1,
     264,    -1,   191,   145,    -1,   191,   145,     9,   218,    -1,
     191,   266,   146,    -1,   168,   145,    -1,    -1,   168,   145,
     265,     9,   218,    -1,   168,   266,   146,    -1,   267,   131,
      -1,   132,   218,    -1,   267,   125,   218,    -1,   267,   131,
     132,   218,    -1,    -1,    51,   269,   270,   271,   375,    -1,
     168,   145,    -1,   270,   125,   168,   145,    -1,    -1,    52,
     168,    -1,    -1,    42,   273,   274,   375,    -1,   168,   145,
      -1,   274,   125,   168,   145,    -1,    -1,    83,   168,   126,
     276,   285,   127,   145,   375,    -1,    -1,    83,   168,   277,
     280,   375,    -1,    85,   168,   375,    -1,    85,   168,   168,
     375,    -1,    86,   281,   375,    -1,    -1,    86,   128,   145,
     278,   279,   129,   375,    -1,   283,    -1,   279,   125,   283,
      -1,   281,    -1,   280,   281,    -1,   283,    -1,   280,   283,
      -1,    -1,   168,   126,   282,   286,   127,   145,    -1,    -1,
     168,   284,   145,    -1,    -1,   289,    -1,   290,    -1,   289,
     125,   290,    -1,    -1,   289,    -1,   290,    -1,   106,    -1,
     289,   125,   106,    -1,   289,   125,   290,    -1,   289,   125,
     290,   125,   106,    -1,   288,    -1,   287,   125,   288,    -1,
     220,    -1,   168,   145,    -1,   122,   168,   145,    -1,   122,
     168,   126,   287,   127,    -1,   289,   125,   168,   145,    -1,
     289,   125,   122,   168,   145,    -1,   289,   125,   122,   168,
     126,   287,   127,    -1,    84,   168,   145,    -1,    84,   122,
     168,   145,    -1,    84,   122,   168,   126,   287,   127,    -1,
     290,   125,    84,   168,   145,    -1,   290,   125,    84,   122,
     168,   145,    -1,   290,   125,    84,   122,   168,   126,   287,
     127,    -1,   292,    -1,   305,    -1,   320,    -1,   326,    -1,
     356,    -1,   338,    -1,   343,    -1,   372,    -1,   293,   303,
      -1,   293,   296,   303,    -1,   293,   298,   303,    -1,   293,
     298,   296,   303,    -1,    -1,    -1,    14,   251,   294,   375,
     295,   165,    -1,    -1,    15,   375,   297,   165,    -1,    -1,
      -1,    16,   299,   251,   375,   300,   165,    -1,    -1,    -1,
     298,    16,   301,   251,   375,   302,   165,    -1,   304,    -1,
      18,    -1,    17,    -1,   310,   311,   306,    -1,   310,   316,
     306,    -1,   310,   306,    -1,   310,   311,   316,   306,    -1,
     307,    -1,    40,    -1,    17,    -1,    -1,    37,   309,   375,
      -1,   308,    -1,   308,   164,    -1,    -1,    -1,    38,   312,
     251,   375,   313,   165,    -1,    -1,    -1,   311,    38,   314,
     251,   375,   315,   165,    -1,    -1,    -1,    39,   317,   375,
     318,   165,    -1,    -1,   316,    39,   319,   375,   165,    -1,
      -1,    -1,   323,   251,   375,   321,   165,   322,   324,    -1,
      43,    -1,   325,    -1,    41,    -1,    17,    -1,    -1,    -1,
      -1,    45,   221,   330,   218,   327,    47,   251,   331,   328,
     375,   329,   332,    -1,   110,    -1,     9,    -1,    -1,    48,
     251,    -1,   165,   333,    -1,    46,    -1,    46,   168,    -1,
      17,    -1,    17,   168,    -1,   168,    -1,   199,    -1,   334,
      -1,   335,   125,   334,    -1,   122,   168,    -1,   218,    -1,
     336,    -1,   337,   125,   336,    -1,    -1,    -1,    -1,    98,
     335,    52,   337,   339,   342,   340,   375,   341,   332,    -1,
      -1,    99,    -1,    -1,   349,   344,   350,   345,    -1,   349,
     345,    -1,   346,    -1,   101,    -1,    17,    -1,    -1,   100,
     348,   218,   375,    -1,   347,    -1,   347,   164,    -1,    -1,
      38,   218,   351,   375,   165,    -1,    -1,   350,    38,   218,
     352,   375,   165,    -1,   353,    -1,   350,   353,    -1,    -1,
      -1,    39,   354,   375,   355,   165,    -1,    -1,    -1,    -1,
      -1,    62,   357,   362,   375,   165,   358,   365,   359,   363,
     360,   361,    -1,    67,    -1,    17,    -1,    -1,    69,   218,
      -1,    -1,   364,   375,   165,    -1,    66,    -1,    -1,   366,
     375,   165,    -1,   367,   375,   165,    -1,    64,    -1,    65,
     168,    -1,    68,   195,   369,    -1,    97,   369,    -1,    -1,
      69,   370,    -1,   125,    -1,   125,   371,    -1,   371,    -1,
     370,   125,    -1,   370,   125,   371,    -1,   168,    -1,   209,
      -1,   205,    -1,   217,    -1,   252,    -1,    -1,   102,   218,
     375,   373,   165,   374,    -1,   103,    -1,    17,    -1,   123,
      -1,   124,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   287,   287,   288,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   305,   308,   313,   321,
     321,   322,   322,   323,   323,   324,   324,   327,   328,   329,
     330,   333,   334,   335,   336,   339,   340,   343,   344,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   369,   370,   378,
     379,   380,   381,   382,   383,   389,   390,   391,   392,   393,
     394,   395,   396,   398,   398,   404,   405,   406,   419,   419,
     440,   442,   440,   446,   448,   446,   452,   453,   454,   455,
     456,   457,   457,   463,   466,   474,   493,   493,   496,   497,
     498,   499,   500,   501,   514,   515,   516,   517,   520,   521,
     522,   523,   526,   527,   530,   531,   534,   535,   538,   539,
     542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
     552,   553,   554,   555,   556,   557,   558,   559,   560,   565,
     566,   569,   572,   575,   576,   581,   584,   589,   595,   600,
     605,   606,   609,   614,   617,   628,   631,   636,   639,   642,
     643,   646,   649,   650,   655,   658,   663,   664,   667,   672,
     675,   678,   679,   686,   687,   692,   693,   694,   695,   696,
     697,   698,   699,   700,   701,   702,   703,   704,   705,   708,
     709,   712,   713,   714,   715,   716,   717,   718,   719,   720,
     721,   722,   723,   724,   725,   726,   727,   728,   729,   730,
     731,   740,   741,   742,   743,   744,   745,   750,   751,   752,
     753,   754,   755,   756,   757,   758,   759,   760,   761,   762,
     763,   764,   765,   766,   767,   770,   774,   777,   778,   782,
     785,   788,   789,   792,   793,   796,   797,   798,   799,   800,
     803,   804,   809,   810,   811,   817,   818,   821,   824,   829,
     832,   841,   842,   843,   844,   845,   846,   847,   848,   849,
     850,   851,   852,   853,   854,   855,   856,   857,   858,   859,
     860,   861,   862,   863,   864,   865,   866,   867,   868,   869,
     870,   871,   872,   875,   876,   877,   878,   879,   880,   883,
     884,   887,   888,   891,   892,   893,   894,   895,   896,   897,
     904,   905,   906,   907,   908,   909,   910,   911,   912,   913,
     914,   915,   916,   917,   918,   919,   920,   921,   922,   923,
     924,   930,   931,   934,   937,   938,   941,   942,   943,   946,
     949,   952,   955,   958,   961,   964,   967,   970,   971,   972,
     973,   974,   975,   978,   979,   980,   981,   982,   983,   986,
     987,   990,   991,   992,   993,   994,   995,   996,   997,   998,
    1001,  1007,  1008,  1009,  1012,  1013,  1016,  1016,  1022,  1023,
    1024,  1025,  1028,  1029,  1032,  1033,  1037,  1040,  1036,  1043,
    1042,  1079,  1080,  1082,  1085,  1094,  1098,  1101,  1101,  1103,
    1103,  1105,  1105,  1107,  1107,  1117,  1118,  1121,  1122,  1130,
    1131,  1133,  1137,  1144,  1162,  1162,  1191,  1197,  1200,  1201,
    1202,  1205,  1205,  1212,  1213,  1216,  1217,  1220,  1220,  1223,
    1224,  1227,  1227,  1246,  1246,  1247,  1248,  1249,  1250,  1250,
    1253,  1254,  1257,  1258,  1259,  1260,  1263,  1263,  1282,  1282,
    1337,  1338,  1339,  1340,  1343,  1344,  1345,  1346,  1347,  1348,
    1349,  1352,  1353,  1356,  1359,  1360,  1361,  1362,  1363,  1364,
    1367,  1368,  1369,  1370,  1371,  1372,  1375,  1376,  1377,  1378,
    1379,  1380,  1381,  1382,  1385,  1386,  1387,  1388,  1392,  1394,
    1391,  1399,  1399,  1403,  1405,  1403,  1413,  1415,  1413,  1424,
    1432,  1433,  1436,  1440,  1444,  1447,  1453,  1460,  1461,  1464,
    1464,  1467,  1468,  1476,  1477,  1476,  1488,  1489,  1488,  1501,
    1501,  1501,  1503,  1503,  1508,  1513,  1507,  1527,  1536,  1540,
    1541,  1545,  1558,  1563,  1544,  1611,  1612,  1615,  1616,  1619,
    1627,  1628,  1629,  1630,  1633,  1634,  1637,  1638,  1641,  1642,
    1645,  1646,  1651,  1657,  1667,  1650,  1686,  1687,  1691,  1690,
    1703,  1710,  1718,  1719,  1723,  1722,  1733,  1734,  1743,  1743,
    1746,  1746,  1749,  1751,  1754,  1754,  1754,  1759,  1767,  1778,
    1788,  1758,  1819,  1820,  1823,  1824,  1832,  1833,  1836,  1845,
    1846,  1847,  1850,  1861,  1879,  1883,  1891,  1892,  1895,  1896,
    1897,  1898,  1899,  1902,  1903,  1904,  1905,  1906,  1910,  1909,
    1932,  1933,  1936,  1937
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "FUNCTION", "PROCEDURE", "IDENTIFIER",
  "RETURN", "NIL", "NUM_DOUBLE", "INASSIGN", "NUM_LONG", "LOCAL", "STATIC",
  "IIF", "IF", "ELSE", "ELSEIF", "END", "ENDIF", "LITERAL", "TRUEVALUE",
  "FALSEVALUE", "ANNOUNCE", "EXTERN", "DYNAMIC", "INIT", "EXIT", "AND",
  "OR", "NOT", "PUBLIC", "EQ", "NE1", "NE2", "INC", "DEC", "ALIASOP",
  "DOCASE", "CASE", "OTHERWISE", "ENDCASE", "ENDDO", "MEMVAR", "WHILE",
  "LOOP", "FOR", "NEXT", "TO", "STEP", "LE", "GE", "FIELD", "IN",
  "PARAMETERS", "PLUSEQ", "MINUSEQ", "MULTEQ", "DIVEQ", "POWER", "EXPEQ",
  "MODEQ", "PRIVATE", "BEGINSEQ", "BREAK", "RECOVER", "RECOVERUSING",
  "ALWAYS", "ENDSEQ", "DO", "WITH", "SELF", "LINE", "MACROVAR",
  "MACROTEXT", "AS_ARRAY", "AS_BLOCK", "AS_CHARACTER", "AS_CLASS",
  "AS_DATE", "AS_LOGICAL", "AS_NUMERIC", "AS_OBJECT", "AS_VARIANT",
  "DECLARE", "OPTIONAL", "DECLARE_CLASS", "DECLARE_MEMBER",
  "AS_ARRAY_ARRAY", "AS_BLOCK_ARRAY", "AS_CHARACTER_ARRAY",
  "AS_CLASS_ARRAY", "AS_DATE_ARRAY", "AS_LOGICAL_ARRAY",
  "AS_NUMERIC_ARRAY", "AS_OBJECT_ARRAY", "PROCREQ", "CBSTART", "DOIDENT",
  "FOREACH", "DESCEND", "DOSWITCH", "ENDSWITCH", "WITHOBJECT", "ENDWITH",
  "NUM_DATE", "TIMESTAMP", "EPSILON", "HASHOP", "THREAD", "POST", "'='",
  "'<'", "'>'", "'$'", "'+'", "'-'", "'*'", "'/'", "'%'", "UNARY", "PRE",
  "'&'", "'@'", "'\\n'", "';'", "','", "'('", "')'", "'{'", "'}'", "':'",
  "']'", "'['", "'|'", "$accept", "Main", "Source", "Line", "Function",
  "$@1", "$@2", "$@3", "$@4", "FunScope", "Params", "AsType",
  "AsArrayType", "StrongType", "AsArray", "ParamList", "Statement", "$@5",
  "$@6", "$@7", "$@8", "$@9", "$@10", "$@11", "CompTimeStr", "CrlfStmnt",
  "$@12", "LineStat", "ControlError", "FunScopeId", "Statements",
  "EmptyStats", "ExtList", "DynList", "IdentName", "NumValue", "DateValue",
  "TimeStampValue", "NumAlias", "NilValue", "NilAlias", "LiteralValue",
  "LiteralAlias", "CodeBlockAlias", "Logical", "LogicalAlias", "SelfValue",
  "SelfAlias", "Array", "ArrayAlias", "ArrayAt", "ArrayAtAlias", "Hash",
  "HashAlias", "HashList", "Variable", "VarAlias", "MacroVar",
  "MacroVarAlias", "MacroExpr", "MacroExprAlias", "MacroAny", "FieldAlias",
  "FieldVarAlias", "AliasId", "AliasVar", "AliasExpr", "VariableAt",
  "VariableAtAlias", "FunIdentCall", "FunCall", "FunRef", "FunCallAlias",
  "ArgList", "Argument", "RefArgument", "ExtArgument", "ObjectData",
  "SendId", "ObjectRef", "ObjectDataAlias", "ObjectMethod",
  "ObjectMethodAlias", "SimpleExpression", "Expression", "ExtExpression",
  "EmptyExpression", "LValue", "LeftExpression", "PostOp", "ExprPostOp",
  "ExprPreOp", "ExprUnary", "ExprEqual", "ExprAssign", "ExprPlusEq",
  "ExprMinusEq", "ExprMultEq", "ExprDivEq", "ExprModEq", "ExprExpEq",
  "ExprOperEq", "ExprMath", "ExprBool", "ExprRelation", "ArrayIndex",
  "IndexList", "ElemList", "BlockHead", "@13", "BlockVars", "BlockVarList",
  "BlockExpList", "CodeBlock", "@14", "$@15", "@16", "ExpList",
  "PareExpList", "PareExpListAlias", "IfInline", "IfInlineAlias",
  "VarDefs", "$@17", "$@18", "$@19", "$@20", "VarList", "ExtVarList",
  "ExtVarDef", "VarDef", "@21", "DimList", "DimIndex", "FieldsDef", "$@22",
  "FieldList", "InAlias", "MemvarDef", "$@23", "MemvarList", "Declaration",
  "$@24", "$@25", "$@26", "DecDataList", "ClassInfo", "DecMethod", "$@27",
  "DecData", "$@28", "DecList", "DecListExt", "DummyArgList",
  "DummyArgument", "FormalList", "OptList", "ExecFlow", "IfEndif",
  "IfBegin", "$@29", "@30", "IfElse", "$@31", "IfElseIf", "$@32", "@33",
  "$@34", "@35", "EndIf", "EndIfID", "DoCase", "EndCase", "EndCaseID",
  "DoCaseStart", "$@36", "DoCaseBegin", "Cases", "$@37", "@38", "$@39",
  "@40", "Otherwise", "$@41", "$@42", "$@43", "DoWhile", "@44", "$@45",
  "WhileBegin", "EndWhile", "EndWhileID", "ForNext", "@46", "@47", "@48",
  "ForAssign", "StepExpr", "ForStatements", "EndForID", "ForVar",
  "ForList", "ForExpr", "ForArgs", "ForEach", "$@49", "@50", "@51",
  "Descend", "DoSwitch", "$@52", "EndSwitch", "EndSwitchID", "SwitchStart",
  "$@53", "SwitchBegin", "SwitchCases", "$@54", "$@55", "SwitchDefault",
  "$@56", "$@57", "BeginSeq", "@58", "@59", "$@60", "$@61", "EndSeqID",
  "BlockSeq", "AlwaysSeq", "Always", "RecoverSeq", "RecoverEmpty",
  "RecoverUsing", "DoProc", "DoArgs", "DoArgList", "DoArgument",
  "WithObject", "@62", "EndWithID", "Crlf", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
      61,    60,    62,    36,    43,    45,    42,    47,    37,   365,
     366,    38,    64,    10,    59,    44,    40,    41,   123,   125,
      58,    93,    91,   124
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   134,   135,   135,   136,   136,   136,   136,   136,   136,
     136,   136,   136,   136,   136,   136,   137,   137,   137,   139,
     138,   140,   138,   141,   138,   142,   138,   143,   143,   143,
     143,   144,   144,   144,   144,   145,   145,   146,   146,   147,
     147,   147,   147,   147,   147,   147,   147,   147,   148,   148,
     148,   148,   148,   148,   148,   148,   148,   149,   149,   150,
     150,   150,   150,   150,   150,   150,   150,   150,   150,   150,
     150,   150,   150,   151,   150,   150,   150,   150,   152,   150,
     153,   154,   150,   155,   156,   150,   150,   150,   150,   150,
     150,   157,   150,   150,   158,   158,   160,   159,   161,   161,
     161,   161,   161,   161,   162,   162,   162,   162,   163,   163,
     163,   163,   164,   164,   165,   165,   166,   166,   167,   167,
     168,   168,   168,   168,   168,   168,   168,   168,   168,   168,
     168,   168,   168,   168,   168,   168,   168,   168,   168,   169,
     169,   170,   171,   172,   172,   173,   174,   175,   176,   177,
     178,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     186,   187,   188,   188,   189,   190,   191,   191,   192,   193,
     194,   195,   195,   196,   196,   197,   197,   197,   197,   197,
     197,   197,   197,   197,   197,   197,   197,   197,   197,   198,
     198,   199,   199,   199,   199,   199,   199,   199,   199,   199,
     199,   199,   199,   199,   199,   199,   199,   199,   199,   199,
     199,   200,   200,   200,   200,   200,   200,   201,   201,   201,
     201,   201,   201,   201,   201,   201,   201,   201,   201,   201,
     201,   201,   201,   201,   201,   202,   203,   204,   204,   205,
     206,   207,   207,   208,   208,   209,   209,   209,   209,   209,
     210,   210,   211,   211,   211,   212,   212,   213,   214,   215,
     216,   217,   217,   217,   217,   217,   217,   217,   217,   217,
     217,   217,   217,   217,   217,   217,   217,   217,   217,   217,
     217,   217,   217,   217,   217,   217,   217,   217,   217,   217,
     217,   217,   217,   218,   218,   218,   218,   218,   218,   219,
     219,   220,   220,   221,   221,   221,   221,   221,   221,   221,
     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
     222,   222,   222,   222,   222,   222,   222,   222,   222,   222,
     222,   223,   223,   224,   225,   225,   226,   226,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   235,   235,
     235,   235,   235,   236,   236,   236,   236,   236,   236,   237,
     237,   238,   238,   238,   238,   238,   238,   238,   238,   238,
     239,   240,   240,   240,   241,   241,   243,   242,   244,   244,
     244,   244,   245,   245,   246,   246,   248,   249,   247,   250,
     247,   251,   251,   252,   253,   254,   255,   257,   256,   258,
     256,   259,   256,   260,   256,   261,   261,   262,   262,   263,
     263,   263,   263,   264,   265,   264,   264,   266,   267,   267,
     267,   269,   268,   270,   270,   271,   271,   273,   272,   274,
     274,   276,   275,   277,   275,   275,   275,   275,   278,   275,
     279,   279,   280,   280,   280,   280,   282,   281,   284,   283,
     285,   285,   285,   285,   286,   286,   286,   286,   286,   286,
     286,   287,   287,   288,   289,   289,   289,   289,   289,   289,
     290,   290,   290,   290,   290,   290,   291,   291,   291,   291,
     291,   291,   291,   291,   292,   292,   292,   292,   294,   295,
     293,   297,   296,   299,   300,   298,   301,   302,   298,   303,
     304,   304,   305,   305,   305,   305,   306,   307,   307,   309,
     308,   310,   310,   312,   313,   311,   314,   315,   311,   317,
     318,   316,   319,   316,   321,   322,   320,   323,   324,   325,
     325,   327,   328,   329,   326,   330,   330,   331,   331,   332,
     333,   333,   333,   333,   334,   334,   335,   335,   336,   336,
     337,   337,   339,   340,   341,   338,   342,   342,   344,   343,
     343,   345,   346,   346,   348,   347,   349,   349,   351,   350,
     352,   350,   350,   350,   354,   355,   353,   357,   358,   359,
     360,   356,   361,   361,   362,   362,   363,   363,   364,   365,
     365,   365,   366,   367,   368,   368,   369,   369,   370,   370,
     370,   370,   370,   371,   371,   371,   371,   371,   373,   372,
     374,   374,   375,   375
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     1,     1,     1,     1,     1,     2,
       2,     2,     2,     2,     2,     3,     3,     4,     6,     0,
       5,     0,     5,     0,     8,     0,     8,     0,     1,     1,
       1,     0,     1,     1,     3,     0,     1,     0,     1,     1,
       1,     1,     1,     1,     1,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     4,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     0,     4,     2,     2,     2,     0,     4,
       0,     0,     5,     0,     0,     5,     1,     1,     1,     3,
       3,     0,     4,     4,     1,     3,     0,     2,     1,     1,
       1,     1,     1,     1,     4,     7,     4,     7,     0,     1,
       1,     1,     1,     2,     0,     1,     1,     3,     1,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     1,     2,     1,     2,     2,
       1,     1,     2,     1,     2,     3,     2,     2,     2,     3,
       3,     2,     3,     5,     1,     2,     1,     1,     2,     2,
       2,     1,     1,     2,     3,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     1,
       1,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     4,     1,     4,     2,
       2,     1,     3,     1,     1,     2,     2,     2,     2,     2,
       1,     1,     3,     3,     2,     1,     1,     4,     2,     4,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     2,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     1,     1,
       1,     0,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     2,     2,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     1,     1,     1,
       1,     1,     1,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       2,     2,     3,     4,     1,     3,     0,     4,     0,     1,
       1,     3,     2,     4,     1,     3,     0,     0,     5,     0,
       5,     1,     3,     3,     2,     8,     2,     0,     4,     0,
       4,     0,     5,     0,     4,     1,     3,     1,     3,     1,
       2,     4,     3,     2,     0,     5,     3,     2,     2,     3,
       4,     0,     5,     2,     4,     0,     2,     0,     4,     2,
       4,     0,     8,     0,     5,     3,     4,     3,     0,     7,
       1,     3,     1,     2,     1,     2,     0,     6,     0,     3,
       0,     1,     1,     3,     0,     1,     1,     1,     3,     3,
       5,     1,     3,     1,     2,     3,     5,     4,     5,     7,
       3,     4,     6,     5,     6,     8,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     3,     3,     4,     0,     0,
       6,     0,     4,     0,     0,     6,     0,     0,     7,     1,
       1,     1,     3,     3,     2,     4,     1,     1,     1,     0,
       3,     1,     2,     0,     0,     6,     0,     0,     7,     0,
       0,     5,     0,     5,     0,     0,     7,     1,     1,     1,
       1,     0,     0,     0,    12,     1,     1,     0,     2,     2,
       1,     2,     1,     2,     1,     1,     1,     3,     2,     1,
       1,     3,     0,     0,     0,    10,     0,     1,     0,     4,
       2,     1,     1,     1,     0,     4,     1,     2,     0,     5,
       0,     6,     1,     2,     0,     0,     5,     0,     0,     0,
       0,    11,     1,     1,     0,     2,     0,     3,     1,     0,
       3,     3,     1,     2,     3,     2,     0,     2,     1,     2,
       1,     2,     3,     1,     1,     1,     1,     1,     0,     6,
       1,     1,     1,     1
};

/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,     0,   120,    78,   145,   139,   140,   397,   399,     0,
       0,   147,   150,   151,   129,   127,   128,    29,   124,    80,
       0,     0,   509,   427,   527,   123,     0,   122,   121,   421,
     125,   403,    83,   577,    73,     0,   153,     0,   166,   167,
       0,   126,     0,     0,   136,   376,   596,     0,   137,   564,
       0,   141,   142,   138,     0,   612,   613,     0,   301,     0,
       0,     0,     8,     6,     0,     7,   164,   310,   312,   313,
       0,   311,     0,   314,     0,     0,   316,     0,   317,     0,
     318,     0,   319,     0,   320,     0,   324,     0,   171,     0,
     172,     0,   323,     0,     0,   321,   322,   325,     0,   237,
     327,     0,   329,     0,     0,   330,     0,     0,    96,    96,
      96,    96,   347,   348,   349,   350,   351,   352,    96,   386,
     315,   326,     0,   328,     0,    86,    87,    88,     5,    96,
     476,     0,   477,     0,     0,   478,     0,   479,   481,   482,
       0,   558,   480,    96,   483,     4,     9,     0,    77,     0,
     144,   143,     0,     0,     0,   130,   132,   129,   127,   128,
     124,     0,   134,   131,   123,     0,   135,   133,   136,   138,
       0,     0,     0,   261,   263,   264,   262,   265,   267,   268,
     270,   271,   272,   294,   275,   276,   323,   273,   274,   277,
     278,   298,   281,   283,   293,   391,     0,   287,   288,   289,
     285,   286,   290,   291,   292,   266,   488,   295,   280,    91,
       0,   116,     0,   118,    75,     0,   334,   335,     0,     0,
      76,   164,   171,   172,   304,   322,   308,   327,   307,   330,
       0,     0,   309,   328,   173,     0,     0,     0,   584,     0,
      72,   171,   172,   596,     0,   433,     0,    35,     0,     0,
      94,     0,   378,     0,   595,   164,   545,   326,   546,     0,
       0,     0,   401,     0,   169,     0,     0,   250,     0,     0,
       0,   251,   244,   374,   302,   243,     0,   255,   256,   254,
       1,     0,    14,    12,    13,    11,    10,     0,     0,   165,
     301,     0,   217,     0,   219,   220,   189,   190,   191,   211,
     146,   218,   195,   148,   221,   196,   198,   152,   223,   197,
     154,   225,   200,   156,   157,   201,   158,   202,   161,   224,
     199,   226,   208,   212,   168,   192,   213,   170,   193,   214,
     301,    64,   229,     0,     0,   189,   176,     0,   180,     0,
     181,   183,     0,   182,     0,   184,     0,   185,     0,   186,
       0,   187,   175,   178,   179,   209,     0,   216,   177,     0,
     188,   210,   227,    62,   228,   235,   203,   240,    61,   232,
     205,   258,   301,   230,     0,   206,   260,    63,   231,   207,
       0,   331,   332,     0,     0,     0,     0,     0,     0,     0,
       0,   333,    67,    66,    69,    70,    68,     0,   389,   149,
     222,   394,    65,   234,   194,   215,   396,    60,   233,   204,
      59,     0,   493,   501,   500,     0,     0,   484,   499,   103,
     399,   110,   124,   101,    99,   112,   102,     0,     0,   100,
      98,   508,   513,   519,   507,   504,   506,     0,     0,     0,
       0,   563,   562,     0,   560,   561,    71,     0,    97,    35,
       0,   405,     0,     0,   336,   338,   337,     0,   239,    48,
      43,    40,     0,    41,    42,    39,    44,    46,    53,    54,
      50,     0,    51,    52,    49,    55,   269,    47,   296,   279,
     282,   284,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   297,     0,     0,    89,     0,    90,    35,    81,   407,
     409,   510,    35,     0,   536,   535,     0,   174,    35,   425,
       0,    84,     0,     0,     0,   594,     0,    16,   431,     0,
       0,   435,   438,    36,   446,   437,     0,     0,   379,    35,
       0,   380,   598,   164,   298,   604,   293,     0,   295,   597,
     600,     0,     0,     0,   608,     0,     0,   393,   159,   245,
     246,   247,   249,   239,   248,     0,   160,   301,   301,   155,
      15,    19,    21,     0,   241,   302,   299,   300,   371,     0,
     370,     0,     0,   253,   340,   341,   342,   343,   344,   346,
     345,   339,   252,   384,   387,     0,   491,     0,   485,   496,
       0,   486,     0,     0,   113,     0,     0,   516,   502,     0,
     522,   503,   524,     0,   574,     0,   572,    79,     0,   413,
      37,     0,     0,   398,   400,   301,    45,    56,   359,   360,
     361,   366,   367,   364,   365,   358,   369,   362,   363,   368,
     353,   354,   355,   356,   357,   392,   489,    92,   117,   119,
     410,    37,     0,     0,   429,     0,   428,   531,   423,     0,
       0,     0,   404,     0,   585,     0,    74,     0,    17,   450,
     448,     0,   442,   444,   436,     0,   454,    95,    93,   382,
     377,     0,   599,   601,     0,   549,   550,   552,   547,   565,
       0,     0,   257,     0,   162,   375,     0,     0,     0,     0,
     301,   236,   372,     0,   238,   259,     0,     0,     0,     0,
       0,     0,     0,   487,     0,     0,     0,   520,     0,   505,
       0,     0,   568,     0,     0,   559,   573,   418,     0,   416,
      38,     0,   417,   406,     0,     0,     0,   412,   408,    82,
      35,     0,   426,    35,   422,    85,   578,     0,   126,     0,
      35,     0,   451,   452,    35,   443,   445,   434,   448,     0,
     440,   457,     0,   455,   456,   381,    35,   602,   548,     0,
     556,     0,   402,   301,    20,    31,    22,    31,   242,   373,
     385,   388,   390,   492,   494,     0,    31,   104,    31,   106,
     514,     0,     0,     0,   525,     0,   575,   570,     0,   419,
       0,   301,   490,   411,   430,     0,   424,   589,    18,     0,
      35,    35,   464,    35,     0,     0,   449,     0,     0,    35,
       0,   383,   551,   557,   553,   611,   610,   609,   163,    32,
       0,    33,    35,     0,     0,   497,     0,     0,     0,   521,
     517,   523,     0,     0,     0,     0,   415,   420,     0,   537,
     592,     0,   579,     0,     0,    35,   470,   301,   465,     0,
       0,    35,   453,     0,   441,   439,   447,   458,   459,     0,
       0,     0,    57,     0,   495,     0,     0,     0,   515,     0,
     530,   529,   526,   528,   569,   576,     0,   395,     0,   532,
     593,   586,     0,     0,   301,   471,   463,     0,   461,   432,
      35,   467,     0,    35,     0,   554,    24,    34,    35,    26,
     498,   105,   107,   518,   571,   538,     0,   588,   580,     0,
     590,   591,     0,   301,   466,   301,   468,    35,   473,   460,
       0,    58,   533,     0,     0,   472,   462,     0,   301,   474,
       0,   555,     0,   583,   582,   581,   587,   469,     0,   542,
     540,   539,   534,   475,   543,   541
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    60,    61,   423,    63,   696,   698,   697,   699,    64,
     830,   532,   729,   533,   477,   831,   424,   239,   147,   215,
     653,   237,   663,   502,   251,   214,   149,   425,   426,   427,
     708,   940,   210,   212,    66,   173,   174,   175,    70,   176,
      72,   177,    74,    75,   178,    77,   179,    79,   180,    81,
     181,    83,   182,    85,   270,   183,    87,   184,    89,   185,
      91,   186,    93,    94,   298,   187,   188,   189,    98,    99,
     190,   191,   101,   573,   271,   272,   574,   192,   279,   103,
     104,   193,   106,   194,   575,   578,   275,   230,   196,   391,
     197,   198,   199,   110,   200,   112,   113,   114,   115,   116,
     117,   201,   202,   203,   204,   362,   293,   276,   119,   252,
     540,   541,   594,   205,   397,   707,   595,   266,   207,   122,
     208,   124,   125,   152,   153,   555,   236,   450,   508,   509,
     451,   728,   620,   621,   126,   235,   519,   661,   127,   219,
     513,   429,   669,   529,   675,   759,   671,   249,   676,   673,
     754,   751,   762,   897,   898,   752,   753,   129,   130,   131,
     500,   735,   415,   710,   416,   597,   834,   712,   875,   417,
     418,   132,   435,   436,   133,   218,   134,   437,   605,   838,
     718,   879,   438,   606,   791,   720,   135,   721,   842,   136,
     882,   883,   137,   741,   916,   942,   516,   889,   941,   951,
     258,   259,   686,   687,   138,   770,   869,   930,   824,   139,
     443,   444,   445,   140,   260,   141,   615,   795,   845,   616,
     723,   844,   142,   238,   807,   891,   933,   945,   523,   918,
     919,   852,   853,   854,   143,   254,   549,   550,   144,   690,
     827,   430
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -659
static const yytype_int16 yypact[] =
{
    4762,   275,  -659,   312,  -659,    35,    54,   527,   478,   -69,
    7445,  -659,  -659,  -659,  3282,  3282,  3282,  -659,    45,   811,
    7445,  7445,  -659,  1058,  -659,   312,  7941,  -659,  -659,    77,
    -659,  1142,  1226,  -659,   312,   239,  -659,   106,  -659,  -659,
    3282,  -659,  3282,  1475,   206,  -659,   177,  7941,  -659,  -659,
    7445,  -659,  -659,   237,   141,  -659,  -659,  7569,  3812,  8433,
     276,  4893,  -659,  -659,   438,  -659,    63,   155,   155,   155,
    8211,    -4,  8433,     4,  8433,  8433,    18,  8433,    40,  8433,
      44,  8433,   289,  8433,    56,  8433,   155,  8211,   305,  8211,
     333,  8211,   235,   676,  8433,   155,   211,   344,  8433,  -659,
     116,  8433,    78,   234,  8433,   131,  8433,  2440,  -659,  -659,
    -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,   275,
      87,   142,  8211,   162,  8433,  -659,  -659,  -659,  -659,  -659,
    -659,   415,  -659,  5279,   354,  -659,  7445,  -659,  -659,  -659,
    5407,   156,  -659,  -659,  -659,  -659,  -659,  7445,  -659,   275,
    -659,  -659,  3282,  3282,  7445,  -659,  -659,  -659,  -659,  -659,
    -659,  7445,  -659,  -659,  -659,    77,  -659,  -659,  -659,  -659,
    7445,  7445,  3282,  1186,  2125,  2193,  1720,  1772,  1809,  3707,
    1853,  2509,  1865,  2539,  1512,  1709,   -59,  2249,  2375,  2625,
    7998,  -659,  4245,  8059,  -659,  4445,   293,  -659,  -659,  -659,
    -659,  -659,  -659,  -659,  -659,  1956,   247,  8120,  2057,  -659,
     110,  -659,   294,  -659,  -659,  8478,  -659,  -659,   275,  3282,
    -659,   102,    32,    73,   -27,   155,    16,   139,    76,   151,
      34,   261,    27,   186,   351,  3282,  3282,  8478,   326,  7445,
    -659,  -659,  -659,   177,     3,   295,  2704,  8796,   298,   275,
     301,   300,  8522,  4569,  -659,   263,   -27,   187,  -659,   -10,
    7445,  3568,  -659,  7445,  -659,  3282,   283,  -659,   323,  7941,
     176,  -659,  -659,  -659,  4435,  -659,   217,  -659,  -659,  -659,
    -659,   275,  -659,  -659,  -659,  -659,  -659,  3282,  3282,  -659,
    7197,  7321,  -659,   207,  -659,  -659,  -659,  -659,  -659,  -659,
    -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,
    -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,
    -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,
    7197,  -659,  -659,    35,    54,   423,  -659,   430,  -659,   453,
    -659,  -659,   456,  -659,   468,  -659,    44,  -659,   289,  -659,
     473,  -659,  -659,  -659,  -659,  -659,   484,   495,  -659,   510,
    -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,
    -659,  -659,  7197,  -659,  8433,  -659,  -659,  -659,  -659,  -659,
    7445,  -659,  -659,  7445,  7445,  7445,  7445,  7445,  7445,  7445,
    8433,  -659,  -659,  -659,  -659,  -659,  -659,  7445,  -659,  -659,
    -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,
    -659,   275,  -659,  -659,  -659,   536,   431,  -659,  -659,  -659,
     515,  -659,    47,  -659,  -659,  -659,  -659,   555,  5535,  -659,
    -659,  -659,  -659,  -659,  -659,  -659,  -659,   367,   219,   340,
    5663,  -659,  -659,   526,  -659,  -659,  -659,  3568,  -659,  2859,
     378,  -659,   378,  3164,  2729,  -659,  -659,   330,  -659,  -659,
    -659,  -659,  3282,  -659,  -659,  -659,  -659,  -659,  -659,  -659,
    -659,  3282,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,
    -659,  -659,  7445,  7445,  7445,  7445,  7445,  7445,  7445,  7445,
    7445,  7445,  7445,  7445,  7445,  7445,  7445,  7445,  7445,  7445,
     275,  -659,   275,  3282,  -659,  3282,  -659,  2859,   443,  -659,
    -659,  -659,  8796,   383,  -659,  -659,  7445,  -659,  8796,   179,
     383,   443,  7445,   275,  3568,  -659,   355,  -659,  -659,  3282,
     275,  -659,  -659,  -659,  -659,  -659,   537,   275,  -659,  8796,
     446,   448,  7693,   253,   402,  -659,   416,  4445,  4358,   455,
    -659,  7817,  7941,  3568,  -659,  3282,   440,  -659,  -659,   138,
     149,   -27,    16,   184,    76,  7445,  -659,  7445,  7197,  -659,
    -659,   459,   465,   328,  -659,  4445,  -659,  4445,  -659,  7321,
     461,   359,   370,  -659,  4445,  4445,  4445,  4445,  4445,  4445,
    4445,  4445,  -659,  4445,   469,  7071,  -659,  7445,  -659,  -659,
     536,  -659,  3282,  3282,  -659,  7445,   275,  -659,  -659,   219,
    -659,  -659,  -659,  7445,  -659,    17,  -659,  -659,  7445,   587,
     586,   220,  3282,  -659,  -659,  7693,  -659,  -659,  4154,  4445,
    2729,  2729,  2729,   925,   925,   539,  2729,   925,   925,   925,
     192,   192,   204,   204,   204,  4445,  -659,  -659,  -659,  -659,
     589,   586,  8478,   275,  -659,  3282,  -659,  4445,  -659,  3282,
    3282,   275,  -659,   275,  4445,  5151,  -659,   580,  -659,  8255,
     298,  2704,  -659,  -659,  -659,  3282,  3954,  -659,  -659,  -659,
    -659,  8585,  -659,  7693,  3282,  4445,  -659,   476,  -659,  -659,
    6431,   378,  -659,  4601,  -659,  -659,   275,   477,   275,   480,
    7197,  -659,  -659,  7321,  -659,  -659,  7445,   482,  5021,   485,
    6559,   340,  7445,  -659,   231,   288,   340,  -659,  7445,  -659,
     275,  6687,  4445,   275,  7445,  -659,  -659,  4445,   593,  -659,
    -659,  7445,   475,  -659,   488,  5791,  7445,  -659,  -659,  -659,
    8796,   562,  -659,  8796,  -659,  -659,  -659,   275,  8300,  3282,
    8796,   489,   490,   492,  8796,  -659,  -659,  -659,  -659,   257,
    -659,  -659,   491,   498,   492,  -659,  8796,  -659,   330,  7817,
     521,    14,  -659,  7445,  -659,  8629,  -659,  8629,  -659,  -659,
    4445,  -659,  -659,  -659,  -659,   340,  8629,  -659,  8629,  -659,
    -659,  6175,   340,  6175,  -659,   275,  -659,  4445,  7445,  4445,
    7445,  7693,  -659,  4445,  -659,  7445,  -659,   513,  -659,  3282,
    8796,  8680,  -659,  8796,  8344,   540,  -659,  3282,   275,  8796,
    4062,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,
     494,   501,  8796,   500,  5791,  -659,   503,   505,  5919,  -659,
    -659,  -659,    28,  6047,  6047,   275,  4445,  4445,   506,   -15,
    -659,  3282,  -659,   275,   275,  8733,  -659,  7445,  -659,   275,
    3282,  8796,   492,  8389,  -659,  -659,  -659,  -659,   509,   275,
     275,  8692,  -659,   275,  -659,  5791,   275,   275,  -659,  5919,
    -659,  -659,  -659,  -659,  -659,  -659,  6047,  -659,  7445,  -659,
    -659,   569,  6303,  6303,  7445,  -659,  -659,   396,  -659,  -659,
    8754,  -659,  3282,  8796,   167,  -659,  -659,  -659,  8796,  -659,
    -659,  -659,  -659,  -659,  -659,   247,   275,  -659,  -659,   275,
    -659,  -659,   403,  7445,  -659,  7445,  -659,  8775,  -659,  -659,
    6815,  -659,  -659,    21,  6943,  -659,  -659,   417,  7445,  -659,
      20,  -659,  6815,  -659,  -659,  -659,  -659,  -659,   420,  3282,
    3282,  -659,  -659,  -659,  -659,  -659
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -659,  -659,  -659,    64,   567,  -659,  -659,  -659,  -659,  -659,
    -545,  -410,   -13,  -163,  -567,  -659,   227,  -659,  -659,  -659,
    -659,  -659,  -659,  -659,  -659,   362,  -659,  -415,  -659,  -659,
     -75,  -418,  -659,  -659,  3345,  1265,  1333,  1453,   546,   230,
     547,   336,   549,   551,   496,   553,   529,   556,   719,   557,
     747,   558,   816,   561,  -659,  1483,   563,     0,   568,    60,
     570,   120,   414,  -659,  3385,  1580,  1645,  1811,  -659,  -169,
    1932,  -246,  -659,  -294,  -621,  -245,   -57,  2029,  -328,  -659,
    -659,  2234,  -659,  -244,  4022,  -555,  -557,  -659,  2307,  -659,
    2210,  2331,  -659,  -659,  2452,  -659,  -659,  -659,  -659,  -659,
    -659,  2562,  -659,  -659,  -659,  3469,  -659,  -659,  -659,  -659,
    -659,  -659,  -659,  1004,  -659,  -659,  -659,    -5,   191,   571,
    1208,   573,  -659,  -659,  -659,  -659,  -659,  -151,   434,    15,
    -209,  -659,   161,  -659,  -659,  -659,  -659,  -659,  -659,  -659,
     436,   229,  -659,  -659,  -659,  -659,  -659,  -506,  -659,  -654,
    -659,  -659,  -659,  -599,  -241,     9,  -658,  -659,  -659,  -659,
    -659,  -659,   277,  -659,  -659,  -659,  -659,  -659,  -659,  -404,
    -659,  -659,  -423,  -659,  -659,  -659,  -659,  -659,  -659,  -659,
    -659,  -659,   254,  -659,  -659,  -659,  -659,  -659,  -659,  -659,
    -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -250,  -659,
     152,  -659,   -68,  -659,  -659,  -659,  -659,  -659,  -659,  -659,
    -659,    79,  -659,  -659,  -659,  -659,  -659,  -659,  -659,    88,
    -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,  -659,
    -659,  -659,  -659,  -659,  -659,   462,  -659,  -523,  -659,  -659,
    -659,  3511
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -608
static const yytype_int16 yytable[] =
{
      88,   273,   452,   458,   734,   206,   510,   544,   545,   546,
     694,   598,   601,   604,   608,   611,   476,   756,   764,   682,
     478,   760,   526,   672,   702,   604,   222,   479,   510,   480,
     481,   825,   300,   888,   441,   241,   581,   949,   943,   619,
     303,  -305,   551,   514,   501,   880,   583,    88,   -30,   -30,
    -111,  -111,   365,   730,   307,   724,   614,   154,   428,   241,
      90,    88,   592,   401,    62,   440,   950,   330,   324,   881,
     241,   150,   241,   291,   241,   241,   310,   241,   582,   241,
     313,   241,  -306,   241,   730,   241,   223,   241,   944,   241,
     151,   241,   318,    88,   241,   242,   458,   650,   241,   289,
     563,   241,   654,  -321,   241,   291,   241,    90,   658,   327,
     499,  -303,   371,   234,   371,   552,   244,   826,   442,   242,
      92,    90,   241,   399,   241,   282,    55,    56,   291,   679,
     242,   439,   242,    88,   242,   242,   291,   242,   289,   242,
      88,   242,  -305,   242,   515,   242,  -325,   242,   779,   242,
     291,   242,   367,    90,   242,   243,   862,  -326,   242,   291,
     767,   242,   868,   864,   242,   755,   242,   376,   -96,   -96,
     -96,   -96,   291,   441,   289,   367,   291,   709,   401,   278,
     848,    92,   242,  -306,   242,   324,   719,   376,   291,   290,
     297,   121,   297,    90,   297,   297,   713,   297,   406,   297,
      90,   297,   372,   297,   372,   297,  -329,   297,   291,   297,
     291,   297,  -303,   297,   297,   507,   828,   232,   297,   291,
    -237,   297,   406,   401,   297,   250,   297,    65,   290,   128,
      71,   659,   833,    55,    56,   503,   431,   507,   257,   -96,
     -96,   836,   297,   837,   297,   264,   253,   746,   291,   262,
     489,   863,   121,    92,   -96,   -96,    71,   442,   610,   434,
      92,   299,   489,   291,   290,   -96,   -96,   263,  -164,   560,
    -164,   291,   771,   929,   291,  -171,   280,    71,   323,  -171,
     326,  -171,   329,   291,   357,   -96,   -96,   291,   284,   289,
     285,    71,   783,   604,   291,   922,   544,   545,   546,   289,
     896,   565,   380,   794,   660,   566,   494,   495,   496,   497,
     498,    38,    39,   405,  -237,  -544,  -237,   802,   291,   291,
     496,   497,   498,   337,   121,   316,   937,   381,   382,    90,
     804,   121,   579,   806,   -96,   -96,    73,   896,   580,   948,
     812,   324,   568,   291,   816,   731,   569,   383,   384,   385,
     386,   732,   387,   388,    55,    56,   821,   786,   -96,   -96,
      54,   330,    73,    71,   374,   148,   896,   291,   896,   327,
      71,   431,   499,   839,   241,   841,  -603,  -603,  -603,   290,
     365,   896,   817,    73,   431,   501,   818,   220,  -544,   290,
     241,   390,   432,   433,   434,   522,   240,    73,    55,    56,
     856,   858,   165,   859,   691,   607,   433,   434,   499,   866,
     557,    55,    56,   733,   788,   536,   874,    55,    56,   505,
     878,   528,   872,   390,   534,   884,   885,   537,    88,   339,
     411,   412,   413,   414,   242,   -96,   -96,   544,   545,   546,
      88,   287,   288,   510,   548,   895,   411,   599,   413,   414,
     242,   901,   558,   700,   331,   701,   290,   910,   363,   289,
     257,   913,   368,    55,    56,   499,   300,   377,   914,    73,
     392,   393,   394,   395,   920,   921,    73,   667,    55,    56,
     396,   -28,   -28,   402,   700,   407,   704,  -132,    90,   303,
     926,   410,   307,   928,   278,   700,    76,   705,   931,    71,
      90,    55,    56,   622,   310,   446,    55,    56,   655,   318,
     278,   695,  -132,  -132,  -132,   458,   946,   939,  -109,  -109,
     399,   923,    76,   924,  -132,  -605,  -605,  -605,   923,    78,
     935,   401,  -132,  -132,  -132,  -132,  -130,  -132,  -132,  -606,
    -606,  -606,   923,    76,   947,   923,   406,   953,    92,  -132,
    -132,  -132,    88,   413,   414,    78,   677,    76,   602,   603,
      92,  -130,  -130,  -130,   613,   614,   290,   692,   652,  -132,
    -132,  -132,  -132,   681,  -132,  -132,    78,   850,   851,   680,
     683,  -130,  -130,  -130,  -130,   -23,  -130,  -130,  -132,   342,
      78,   -25,   711,   703,   706,    88,  -414,   489,   736,   747,
     716,   769,   798,   775,  -132,    73,   777,   800,  -132,   805,
    -132,   781,    90,   801,   782,   814,   813,   815,   819,   121,
     823,   870,   344,   820,   863,  -132,   871,   873,   283,    76,
     876,   121,   877,   887,   904,   917,    76,  -130,   737,   336,
     338,  -132,   340,   778,   341,  -132,   343,  -132,   517,   345,
     347,   349,   507,  -130,   351,    90,   352,  -130,    71,  -130,
     459,   353,    78,   354,   358,    88,   360,   738,   651,    78,
      71,   521,   520,   468,   469,   470,   471,   472,   473,   474,
     475,     2,   936,     4,   333,   763,   334,   155,   156,     9,
      88,   609,   952,   600,   725,    11,    12,    13,   157,   158,
     159,   822,   160,   726,   688,   525,   162,   785,    88,     0,
      88,     0,     0,   792,     0,    92,     0,     0,   163,    80,
     164,    88,     0,    27,    28,    90,     0,     0,    30,   166,
       0,     0,     0,   548,     0,    88,     0,   167,     0,     0,
       0,     0,     0,   257,     0,    80,    36,    82,    38,    39,
      90,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      41,     0,     0,     0,    73,    76,    80,     0,    90,     0,
      90,   168,    45,    82,     0,    48,    73,     0,     0,     0,
      80,    90,    71,     0,   169,    92,   121,     0,     0,     0,
       0,    88,     0,    88,    82,    90,     0,    54,    78,     0,
     849,     0,   263,     0,    58,     0,     0,     0,    82,     0,
      92,     0,   346,     0,     0,     0,    84,     0,     0,     0,
    -134,     0,     0,     0,     0,    71,     0,     0,    92,     0,
      92,     0,     0,     0,    88,     0,     0,     0,    88,     0,
     348,    92,    84,    88,    88,  -134,  -134,  -134,     0,     0,
       0,    90,    80,    90,     0,    92,   121,     0,     0,    80,
       0,     0,     0,    84,     0,  -134,  -134,  -134,  -134,     0,
    -134,  -134,     0,     0,   548,    88,     0,    84,     0,    88,
      82,   121,     0,   915,     0,     0,    88,    82,    73,     0,
       0,     0,    88,    88,    90,    71,     0,     0,    90,   121,
       0,   121,     0,    90,    90,     0,     0,     0,     0,   350,
       0,    92,   121,    92,     0,     0,     0,     0,     0,     0,
      71,  -134,     0,     0,    76,     0,   121,     0,     0,     0,
      88,    73,     0,     0,    88,    90,    76,  -134,    71,    90,
      71,  -134,    88,  -134,     0,     0,    90,     0,     0,    84,
       0,    71,    90,    90,    92,     0,    84,    78,    92,     0,
       0,     0,     0,    92,    92,    71,     0,     0,     0,    78,
       0,     0,     0,     0,   487,   488,     0,     0,     0,     0,
       0,     0,   121,   489,   121,     0,     0,     0,    80,     0,
      90,     0,     0,     0,    90,    92,     0,     0,     0,    92,
       0,    73,    90,     0,   120,     0,    92,     0,     0,     0,
       0,     0,    92,    92,     0,     0,    82,     0,     0,     0,
       0,    71,     0,    71,     0,   121,    73,     0,     0,   121,
     120,     0,     0,     0,   121,   121,   491,   492,   493,   494,
     495,   496,   497,   498,    73,     0,    73,     0,    76,     0,
      92,   120,     0,     0,    92,     0,     0,    73,     0,     0,
       0,     0,    92,     0,    71,   120,   121,  -131,    71,     0,
     121,    73,     0,    71,    71,     0,     0,   121,     0,     0,
       0,    78,     0,   121,   121,    84,     0,     0,     0,     0,
       0,    76,  -131,  -131,  -131,     0,     0,   356,     0,     0,
       0,     0,     0,     0,     0,    71,     0,     0,     0,    71,
       0,     0,  -131,  -131,  -131,  -131,    71,  -131,  -131,     0,
       0,   121,    71,    71,    78,   121,     0,    73,     0,    73,
       0,     0,     0,   121,     0,     0,     0,   120,     0,     0,
       0,     0,     0,     0,   120,     0,     0,    80,     0,     0,
       0,  -135,     0,     0,     0,     0,     0,     0,     0,    80,
      71,    76,     0,     0,    71,     0,     0,     0,  -131,     0,
      73,     0,    71,     0,    73,    82,  -135,  -135,  -135,    73,
      73,     0,     0,     0,  -131,     0,    76,    82,  -131,     0,
    -131,     0,     0,     0,    78,  -310,  -135,  -135,  -135,  -135,
       0,  -135,  -135,     0,    76,     0,    76,     0,   123,     0,
       0,    73,     0,     0,     0,    73,     0,    76,     0,    78,
    -310,  -310,    73,     0,     0,     0,     0,     0,    73,    73,
       0,    76,     0,     0,   233,  -133,     0,    78,     0,    78,
    -310,  -310,  -310,  -310,    84,  -310,  -310,     0,     0,     0,
      78,     0,  -135,     0,     0,   233,    84,     0,     0,     0,
    -133,  -133,  -133,     0,    78,    67,    73,     0,  -135,   123,
      73,    80,  -135,   120,  -135,     0,     0,     0,    73,     0,
    -133,  -133,  -133,  -133,     0,  -133,  -133,    76,     0,    76,
       0,    67,     0,     0,     0,     0,     0,     0,     0,    82,
       0,   359,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    67,     0,    80,     0,  -310,     0,   291,     0,
      78,     0,    78,     0,     0,     0,    67,     0,     0,     0,
      76,     0,     0,    68,    76,     0,  -133,     0,     0,    76,
      76,   123,    82,     0,     0,     0,     0,     0,   123,     0,
       0,     0,  -133,     0,     0,     0,  -133,     0,  -133,    68,
       0,     0,     0,    78,     0,     0,     0,    78,    84,     0,
       0,    76,    78,    78,     0,    76,     0,     0,     0,     0,
      68,     0,    76,     0,    80,     0,     0,     0,    76,    76,
       0,     0,     0,     0,    68,     0,     0,     0,    67,     0,
       0,     0,     0,     0,    78,    67,     0,     0,    78,    80,
       0,    84,    82,     0,     0,    78,     0,     0,     0,     0,
       0,    78,    78,     0,     0,     0,    76,    80,     0,    80,
      76,     0,   120,     0,     0,     0,     0,    82,    76,     0,
      80,     0,     0,     0,   120,     0,     0,     0,     0,     0,
       0,     0,     0,    69,    80,    82,     0,    82,     0,    78,
       0,     0,     0,    78,     0,     0,    68,     0,    82,     0,
       0,    78,     0,    68,     0,     0,     0,   233,     0,    69,
       2,    84,    82,    86,     0,     0,   155,   156,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   157,   158,   159,
      69,   160,     0,     0,     0,   162,    84,     0,     0,    86,
      80,     0,    80,     0,    69,     0,     0,   163,     0,   164,
       0,  -171,    27,    28,    84,     0,    84,    30,   166,     0,
      86,     0,     0,     0,    67,     0,   167,    84,    82,     0,
      82,     0,     0,     0,    86,     0,  -171,  -171,   324,     0,
       0,    84,     0,    80,     0,     0,   120,    80,     0,    41,
       0,     0,    80,    80,     0,     0,  -171,  -171,  -171,  -171,
     168,  -171,  -171,     0,    48,     0,     0,     0,     0,     0,
      95,    82,     0,   169,     0,    82,    69,     0,     0,     0,
      82,    82,     0,    69,    80,     0,     0,     0,    80,   120,
       0,     0,    68,   247,     0,    80,   224,    84,     0,    84,
       0,    80,    80,     0,     0,     0,    86,     0,     0,     0,
       0,     0,    82,    86,     0,     0,    82,   256,     0,     0,
       0,     0,     0,    82,     0,     0,   123,     0,  -171,    82,
      82,    95,  -171,     0,  -171,    96,     0,     0,   123,    80,
      84,     0,     0,    80,    84,     0,     0,     0,     0,    84,
      84,    80,     0,     0,     0,     0,     0,     0,     0,   120,
       0,   225,     0,     0,     0,     0,     0,    82,     0,     0,
       0,    82,     0,     0,     0,     0,     0,     0,     0,    82,
       0,    84,   225,    67,   120,    84,     0,     0,     0,     0,
       0,     0,    84,     0,     0,    67,    96,     0,    84,    84,
       0,     0,   120,    95,   120,     0,     0,     0,  -172,     0,
      95,     0,    69,     0,     0,   120,     0,     0,     0,  -311,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   120,
       0,     0,     0,  -172,  -172,   327,    84,     0,     0,     0,
      84,     0,    86,     0,  -311,  -311,   300,     0,    84,     0,
     233,    68,     0,  -172,  -172,  -172,  -172,     0,  -172,  -172,
       0,     0,     0,    68,  -311,  -311,  -311,  -311,    96,  -311,
    -311,  -314,     0,     0,     0,    96,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   120,     0,   120,     0,     0,
       0,     0,     0,   123,     0,     0,  -314,  -314,   303,     0,
       0,    97,     0,     0,     0,     0,     0,    67,  -316,     0,
       0,     0,     0,     0,     0,     0,  -314,  -314,  -314,  -314,
       0,  -314,  -314,     0,     0,  -172,     0,   226,   120,  -172,
       0,  -172,   120,  -316,  -316,   307,     0,   120,   120,   561,
    -311,     0,   291,     0,     0,     0,     0,     0,    97,     0,
      67,     0,  -318,  -316,  -316,  -316,  -316,     0,  -316,  -316,
       0,     0,    97,   123,  -320,     0,     0,     0,     0,   120,
       0,    69,     0,   120,     0,    68,     0,  -318,  -318,   313,
     120,     0,     0,    69,     0,     0,   120,   120,   123,  -320,
    -320,   318,  -314,     0,   291,     0,     0,  -318,  -318,  -318,
    -318,    86,  -318,  -318,   225,     0,   123,     0,   123,  -320,
    -320,  -320,  -320,    86,  -320,  -320,     0,     0,    68,   123,
      67,     0,   100,     0,   120,     0,     0,     0,   120,  -316,
       0,   291,     0,   123,    97,     0,   120,     0,     0,     0,
       0,    97,     0,     0,     0,    67,     0,     0,   227,     0,
       0,     0,     0,     0,     0,  -315,     0,     0,     0,     0,
       0,     0,     0,    67,     0,    67,     0,     0,     0,   227,
       0,     0,     0,  -318,     0,   291,    67,     0,     0,     0,
    -315,  -315,   399,   100,     0,  -320,     0,   291,    68,   123,
      67,   123,     0,     0,     0,    69,     0,     0,    95,     0,
    -315,  -315,  -315,  -315,     0,  -315,  -315,     0,     0,     0,
      95,     0,     0,    68,     0,     0,     0,     0,     0,   102,
       0,     0,     0,     0,     0,    86,     0,     0,     0,     0,
       0,    68,   123,    68,     0,     0,   123,     0,    69,     0,
       0,   123,   123,     0,    68,   228,    67,     0,    67,     0,
       0,     0,     0,     0,     0,   100,  -328,     0,    68,     0,
       0,     0,   100,    96,     0,     0,   102,     0,    86,     0,
     562,     0,     0,   123,     0,    96,  -315,   123,   291,     0,
     102,  -328,  -328,   406,   123,     0,     0,     0,     0,    67,
     123,   123,     0,    67,     0,     0,     0,     0,    67,    67,
       0,  -328,  -328,  -328,  -328,     0,  -328,  -328,    69,     0,
       0,     0,     0,     0,    68,     0,    68,     0,     0,     0,
       0,     0,   256,     0,  -312,     0,     0,     0,   123,     0,
      67,     0,   123,    69,    67,     0,     0,     0,    86,     0,
     123,    67,     0,     0,     0,     0,     0,    67,    67,  -312,
    -312,    69,   102,    69,     0,     0,     0,    68,     0,   102,
       0,    68,     0,    86,    69,    95,    68,    68,     0,  -312,
    -312,  -312,  -312,     0,  -312,  -312,     0,  -328,    69,   291,
       0,    86,     0,    86,     0,    67,     0,   225,     0,    67,
       0,   227,  -313,     0,    86,     0,     0,    67,    68,     0,
     108,     0,    68,     0,     0,     0,     0,     0,    86,    68,
       0,     0,     0,     0,     0,    68,    68,  -313,  -313,     0,
       0,     0,     0,     0,   105,     0,     0,     0,     0,    97,
      96,     0,     0,     0,    69,    95,    69,  -313,  -313,  -313,
    -313,    97,  -313,  -313,     0,  -312,     0,   291,  -321,     0,
     229,     0,     0,    68,     0,     0,     0,    68,     0,     0,
      95,   108,     0,     0,    86,    68,    86,     0,     0,     0,
       0,   229,     0,  -321,  -321,     0,     0,    69,    95,     0,
      95,    69,     0,     0,     0,   105,    69,    69,   564,     0,
       0,    95,     0,  -321,  -321,  -321,  -321,   107,  -321,  -321,
      96,     0,     0,     0,     0,    95,     0,    86,     0,     0,
       0,    86,     0,  -313,     0,   291,    86,    86,    69,     0,
       0,   109,    69,   231,     0,    96,     0,     0,     0,    69,
       0,     0,     0,   108,     0,    69,    69,     0,     0,     0,
     108,     0,     0,    96,   231,    96,     0,     0,    86,     0,
     100,     0,    86,    97,     0,     0,    96,   105,   107,    86,
       0,    95,   100,    95,   105,    86,    86,     0,     0,  -321,
      96,   291,     0,    69,  -322,     0,     0,    69,     0,     0,
       0,     0,   109,     0,     0,    69,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    97,     0,     0,  -322,
    -322,     0,     0,    86,    95,     0,     0,    86,    95,     0,
       0,     0,     0,    95,    95,    86,     0,     0,     0,  -322,
    -322,  -322,  -322,     0,  -322,  -322,    96,     0,    96,     0,
     107,     0,     0,     0,     0,     0,     0,   107,     0,   380,
       0,     0,   111,     0,     0,    95,     0,   102,     0,    95,
       0,     0,     0,     0,   109,     0,    95,     0,     0,   102,
       0,   109,    95,    95,   381,   382,    97,     0,     0,    96,
       0,     0,     0,    96,   227,     0,     0,     0,    96,    96,
       0,     0,     0,     0,   383,   384,   385,   386,     0,   387,
     388,    97,     0,   229,     0,  -322,     0,   291,     0,     0,
      95,     0,     0,   111,    95,     0,     0,     0,  -319,    97,
      96,    97,    95,     0,    96,     0,     0,   100,     0,     0,
       0,    96,    97,     0,     0,     0,     0,    96,    96,     0,
       0,     0,     0,  -319,  -319,   316,    97,     0,  -324,     0,
     389,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   118,  -319,  -319,  -319,  -319,     0,  -319,  -319,
     390,     0,     0,  -324,  -324,    96,   231,     0,     0,    96,
       0,   102,     0,     0,     0,   111,     0,    96,     0,     0,
       0,     0,   111,  -324,  -324,  -324,  -324,   100,  -324,  -324,
       0,     0,    97,     0,    97,     0,     0,     0,     0,     0,
       0,     0,     0,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   100,   118,   102,     0,   468,   469,   470,   471,
     472,   473,   474,   475,  -325,     0,     0,     0,   108,  -319,
     100,     0,   100,     0,     0,    97,     0,     0,     0,    97,
     108,     0,     0,   100,    97,    97,     0,     0,     0,  -325,
    -325,   365,   105,     0,     0,     0,     0,   100,     0,  -324,
       0,   291,     0,     0,   105,     0,     0,     0,     0,  -325,
    -325,  -325,  -325,     0,  -325,  -325,    97,     0,     0,     0,
      97,     0,     0,     0,   102,   118,     0,    97,     0,     0,
       0,     0,   118,    97,    97,     0,     0,     0,     0,     2,
       0,     0,     0,     0,     0,   155,   156,     0,     0,   102,
       0,     0,     0,   100,     0,   100,   157,   158,   159,     0,
     160,     0,     0,     0,   162,   107,     0,   102,     0,   102,
       0,    97,     0,     0,     0,    97,   163,   107,   164,     0,
     102,    27,    28,    97,     0,  -325,    30,   166,     0,   109,
     484,   485,   486,     0,   102,   167,   100,     0,     0,     0,
     100,   109,     0,     0,     0,   100,   100,     0,   487,   488,
       0,     0,     0,     0,     0,     0,   229,   489,    41,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   168,
       0,     0,     0,    48,     0,   108,     0,   100,     0,     0,
       0,   100,   169,     0,     0,     0,     0,     0,   100,     0,
     102,     0,   102,     0,   100,   100,     0,    55,    56,   105,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   490,
     491,   492,   493,   494,   495,   496,   497,   498,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   231,
       0,     0,   100,   102,     0,     0,   100,   102,     0,     0,
       0,     0,   102,   102,   100,   108,     0,     0,     0,     0,
     111,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   111,     0,     0,     0,     0,     0,     0,   105,
     108,     0,   107,     0,   102,     0,     0,     0,   102,     0,
       0,     0,     0,     0,     0,   102,     0,     0,   108,     0,
     108,   102,   102,     0,   105,     0,   109,     0,     0,     0,
       0,   108,     0,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   105,     0,   105,   108,   468,   469,   470,   471,
     472,   473,   474,   475,     0,   105,     0,     0,     0,   102,
       0,     0,     0,   102,     0,     0,     0,     0,     0,   105,
       0,   102,   107,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     118,   618,     0,     0,     0,     0,   109,   107,     0,     0,
       0,   108,   118,   108,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   107,     0,   107,     0,     0,
       0,   109,     0,     0,     0,   105,     0,   105,   107,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   109,
       0,   109,   107,     0,   108,     0,     0,   111,   108,     0,
       0,     0,   109,   108,   108,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   109,     0,   105,     0,
       0,     0,   105,     0,     0,     0,     0,   105,   105,     0,
       0,     0,     0,     0,     0,   108,     0,     0,     0,   108,
       0,     0,     0,     0,     0,     0,   108,     0,   107,     0,
     107,     0,   108,   108,     0,     0,     0,     0,     0,   105,
       0,     0,     0,   105,     0,     0,     0,   111,     0,     0,
     105,     0,   109,     0,   109,     0,   105,   105,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     108,   107,   111,     0,   108,   107,     0,     0,     0,     0,
     107,   107,   108,     0,     0,     0,     0,   118,     0,     0,
     111,     0,   111,     0,   105,   109,     0,     0,   105,   109,
       0,     0,     0,   111,   109,   109,   105,     0,     0,     0,
       0,     0,   107,     0,     0,     0,   107,   111,     0,     0,
       0,   482,   483,   107,     0,   484,   485,   486,     0,   107,
     107,     0,     0,     0,     0,     0,   109,     0,     0,     0,
     109,     0,     0,   487,   488,     0,     0,   109,     0,     0,
       0,     0,   489,   109,   109,     0,     0,   118,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   107,     0,     0,
       0,   107,     0,   111,     0,   111,     0,     0,     0,   107,
       0,     0,   118,     0,     0,     0,     0,     0,     0,     0,
       0,   109,     0,     0,     0,   109,     0,     0,     0,     0,
     118,     0,   118,   109,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   118,     0,     0,   111,     2,     0,   625,
     111,     0,     0,   155,   156,   111,   111,   118,     0,     0,
       0,     0,     0,     0,   157,   158,   159,     0,   160,     0,
       0,     0,   162,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   163,     0,   164,   111,     0,    27,
      28,   111,     0,     0,    30,   166,     0,     0,   111,     0,
       0,     0,     0,   167,   111,   111,     0,     0,     0,     0,
       0,     0,     0,   118,     0,   118,     0,     0,     0,   209,
     211,   213,     0,     0,     0,     0,    41,     0,     0,     0,
       0,   221,     0,     0,     0,     0,     0,   168,     0,     0,
       0,    48,   111,     0,     0,   245,   111,   246,   248,     0,
     169,     0,   255,     0,   111,     0,   118,     0,     0,     0,
     118,     0,     0,     0,   277,   118,   118,     0,     0,     0,
       0,     0,     0,     0,     0,   296,     0,   296,     0,   296,
     296,     0,   296,     0,   296,     0,   296,     0,   296,     0,
     296,     0,   296,     0,   296,     0,   296,   118,   335,   296,
       0,   118,     0,   296,     0,     0,   296,     0,   118,   296,
       0,   296,     0,     0,   118,   118,     0,   302,     0,   305,
     306,     0,   309,     0,   312,     0,   315,   296,   317,   296,
     320,     0,   322,     0,   325,     0,   328,     0,   355,   361,
       0,     0,     0,   366,     0,     0,   370,     0,     0,   375,
       0,   379,   118,     0,     0,     0,   118,   449,   449,     0,
       0,     0,     0,     0,   118,     0,     0,   404,     0,   409,
       0,   145,   146,     0,     0,     0,     0,   457,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   292,   294,   295,     0,
     301,     0,   304,     0,     0,   308,     0,   311,     0,   314,
       0,     0,     0,   319,     0,   321,     0,     0,     0,     0,
     449,   332,     0,     0,   512,   364,     0,     0,     0,   369,
       0,   373,   286,     0,   378,     0,     0,     0,     0,     0,
     518,   512,   449,     0,     0,     0,     0,     0,     0,   400,
     403,   530,   408,     0,     0,   482,   483,   539,   543,   484,
     485,   486,     0,     0,     0,     0,     0,     0,     0,     0,
     556,     0,     0,     0,   559,     0,     0,   487,   488,     0,
       0,     0,     0,     0,     0,     0,   489,     0,     0,     0,
     398,     0,   571,   572,     0,     0,     0,     0,     0,     0,
       0,     0,   292,   294,   295,   301,   304,   308,   311,   314,
       0,   319,   321,     0,     0,   332,     0,   364,     0,   369,
     448,   373,   378,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   400,     0,   403,   408,   490,   491,
     492,   493,   494,   495,   496,   497,   498,     0,     0,     0,
       0,    55,    56,     0,   364,     0,   369,   373,   378,     0,
       0,   403,   408,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  -317,     0,     0,   277,
       0,   504,     0,   506,     0,     0,   403,     0,     0,   511,
       0,     0,     0,     0,     0,   277,     0,     0,     0,     0,
       0,  -317,  -317,   310,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   527,     0,   531,     0,     0,
     535,  -317,  -317,  -317,  -317,     0,  -317,  -317,     0,     0,
       0,     0,   554,     0,     0,     0,     0,     0,     0,     0,
       0,   459,   460,   461,   462,   463,   464,   465,   466,   467,
       0,     0,   570,     0,   468,   469,   470,   471,   472,   473,
     474,   475,     0,     0,     0,     0,     0,   626,     0,     0,
       0,     0,     0,     0,     0,   314,   627,     2,     0,     4,
       5,     0,     6,   155,   156,     9,     0,     0,     0,     0,
       0,    11,    12,    13,   157,   158,   159,  -317,   160,   291,
       0,   161,   162,     0,     0,     0,    20,    21,   648,     0,
     649,     0,     0,     0,   163,     0,   164,     0,     0,    27,
      28,     0,     0,   165,    30,   166,     0,     0,     0,     0,
       0,     0,     0,   167,   670,     0,     0,     0,     0,     0,
       0,     0,    36,     0,    38,    39,     0,   543,     0,     0,
       0,     0,     0,     0,     0,     0,    41,   255,     0,     0,
     449,     0,     0,     0,     0,     0,     0,   168,    45,     0,
       0,    48,     0,     0,     0,     0,    51,    52,   267,   268,
     169,     0,   596,     0,     0,     0,   170,   171,     0,     0,
       0,     0,     0,    54,   269,     0,     0,     0,    57,     0,
      58,     0,    59,     0,     0,     0,     0,   714,   715,     0,
     612,     0,     0,     0,     0,     0,     0,     0,   617,     2,
       0,   623,     0,   624,     0,   155,   156,   449,     0,     0,
       0,     0,     0,     0,     0,     0,   157,   158,   159,     0,
     160,     0,     0,     0,   162,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   163,   449,   164,     0,
     740,    27,    28,     0,   742,   743,    30,   166,     0,     0,
       0,   646,     0,   647,   750,   167,   670,   403,     0,     0,
     758,   750,     0,     0,   656,     0,   766,     0,   543,   768,
       0,   662,   195,   373,   665,   666,     0,   668,   748,     0,
       0,   674,   216,   217,     0,     0,     0,     0,   678,   168,
       0,     0,     0,    48,     0,     0,     0,     0,     0,     0,
     761,     0,   169,     0,   689,     0,     0,     2,     0,     0,
       0,     0,   261,   155,   156,     0,   749,     0,     0,   195,
     274,     0,     0,     0,   157,   158,   159,     0,   160,     0,
       0,     0,   162,   810,   811,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   163,     0,   164,     0,     0,    27,
      28,     0,     0,     0,    30,   166,     0,   717,     0,     0,
     832,     0,   832,   167,     0,     0,     0,     0,     0,     0,
       0,   832,     0,   832,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   748,     0,     0,     0,
       0,     0,     0,     0,   855,     0,     0,   168,   195,   861,
       0,    48,   758,     0,   739,   861,     0,     0,   867,   447,
     169,     0,   744,     0,   745,     0,   453,     0,     0,     0,
       0,   482,   757,   454,   860,   484,   485,   486,     0,     0,
       0,     0,   455,   456,     0,     0,   890,     0,     0,     0,
       0,     0,   772,   487,   488,   900,     0,   774,   903,   776,
       0,     0,   489,     0,     0,     0,   908,     0,     0,     0,
       0,     0,   784,     0,     0,   787,   789,   790,     0,     0,
       0,   793,     0,     0,   796,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   927,     0,     0,
       0,     0,     0,     0,  -329,     0,     0,     0,   808,     0,
       0,   524,     0,     0,   490,   491,   492,   493,   494,   495,
     496,   497,   498,     0,     0,   547,     0,     0,     0,  -329,
    -329,   371,   553,     0,     0,   195,     0,     0,     0,     0,
       0,     0,     0,     0,   954,   955,   835,     0,     0,  -329,
    -329,  -329,  -329,   840,  -329,  -329,   843,     0,     0,     0,
       0,     0,     0,   577,     0,     0,     0,     0,     0,   459,
     460,   461,   462,   463,   464,   465,   466,   467,     0,   865,
       0,     0,   468,   469,   470,   471,   472,   473,   474,   475,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   886,     0,     0,     0,
       0,     0,     0,     0,   892,   893,     0,  -326,     0,     0,
     899,   372,     0,     0,     0,  -329,     0,   291,     0,     0,
     905,   906,     0,     0,   909,     0,     0,   911,   912,     0,
       0,     0,  -326,  -326,   401,     0,     0,     0,     0,     0,
       0,     0,   584,     0,     0,   585,   586,   587,   588,   589,
     590,   591,  -326,  -326,  -326,  -326,     0,  -326,  -326,   593,
       0,     0,     0,     0,     0,     0,     0,   932,     0,     0,
     934,     0,   459,   460,   461,   462,   463,   464,   465,   466,
     467,     0,     0,     0,     0,   468,   469,   470,   471,   472,
     473,   474,   475,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   482,   483,     0,     0,   484,   485,   486,     0,
       0,     0,   482,   483,     0,     0,   484,   485,   486,     0,
       0,  -607,  -607,  -607,   487,   488,     0,     0,  -326,     0,
     291,     0,     0,   489,   487,   488,     0,     0,     0,     0,
       0,     0,     0,   489,   628,   629,   630,   631,   632,   633,
     634,   635,   636,   637,   638,   639,   640,   641,   642,   643,
     644,   645,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   657,     0,
       0,     0,   567,     0,   664,   490,   491,   492,   493,   494,
     495,   496,   497,   498,     0,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   547,     0,     0,     0,     0,     0,
       0,     0,     0,   685,     2,     0,     4,     5,     0,     6,
     155,   156,     9,     0,     0,     0,     0,   693,    11,    12,
      13,   157,   158,   159,     0,   160,     0,     0,   161,   162,
       0,   577,     0,    20,    21,     0,     0,     0,     0,     0,
       0,   163,     0,   164,     0,     0,    27,    28,     0,   195,
     165,    30,   166,     0,     0,     0,     0,   195,   482,   483,
     167,     0,   484,   485,   486,   722,     0,     0,     0,    36,
     727,    38,    39,     0,     0,     0,     0,     0,     0,     0,
     487,   488,     0,    41,     0,     0,     0,     0,     0,   489,
       0,     0,     0,     0,   168,    45,     0,     0,    48,     0,
       0,     0,     0,    51,    52,     0,     0,   169,     0,     0,
       0,     0,     0,   170,   171,     0,     0,     0,     0,     0,
      54,   269,     0,     0,   542,    57,     0,    58,     0,    59,
       0,     0,     0,     0,     0,   547,     0,     0,   773,     0,
       0,   490,   491,   492,   493,   494,   495,   496,   497,   498,
       0,     0,     0,     0,     0,   577,     0,     0,   780,     0,
       0,     0,     0,     0,   195,     0,     0,     0,     0,     0,
     195,     0,     0,     0,     0,     0,   797,     0,     0,     0,
       0,     0,     0,   799,     0,     0,     0,     0,   803,     0,
       0,     0,    -3,     1,     0,   -27,   -27,     2,     3,     4,
       5,     0,     6,     7,     8,     9,    10,     0,     0,     0,
       0,    11,    12,    13,    14,    15,    16,    17,    18,     0,
       0,   685,    19,     0,     0,     0,    20,    21,     0,    22,
       0,     0,     0,     0,    23,    24,    25,    26,     0,    27,
      28,     0,     0,    29,    30,    31,     0,     0,     0,     0,
     846,     0,   847,    32,    33,    34,     0,   195,     0,     0,
      35,     0,    36,    37,    38,    39,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    40,    41,    42,    43,     0,
       0,     0,     0,     0,     0,     0,     0,    44,    45,    46,
      47,    48,    49,     0,    50,     0,    51,    52,     0,     0,
      53,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    54,     0,    55,    56,     0,    57,     0,
      58,     0,    59,    -2,   281,     0,   -27,   -27,     2,     3,
       4,     5,     0,     6,     7,     8,     9,    10,     0,     0,
     195,     0,    11,    12,    13,    14,    15,    16,    17,    18,
       0,     0,     0,    19,     0,     0,     0,    20,    21,     0,
      22,     0,     0,     0,     0,    23,    24,    25,    26,     0,
      27,    28,     0,     0,    29,    30,    31,     0,     0,     0,
       0,     0,     0,     0,    32,    33,    34,     0,     0,     0,
       0,    35,     0,    36,    37,    38,    39,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    40,    41,    42,    43,
       0,     0,     0,     0,     0,     0,     0,     0,    44,    45,
      46,    47,    48,    49,     0,    50,     0,    51,    52,     0,
       0,    53,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    54,     0,    55,    56,     0,    57,
       0,    58,   419,    59,  -108,  -108,     2,     3,     4,     5,
       0,     6,     7,   420,     9,    10,  -115,  -115,  -115,  -115,
      11,    12,    13,    14,    15,    16,   421,   422,     0,     0,
       0,    19,     0,     0,     0,    20,    21,     0,    22,  -115,
    -115,  -115,  -115,    23,    24,    25,    26,  -115,    27,    28,
       0,     0,    29,    30,    31,     0,     0,     0,     0,     0,
       0,     0,    32,    33,    34,  -115,  -115,  -115,  -115,    35,
       0,    36,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,    41,    42,    43,     0,     0,
       0,     0,     0,     0,     0,     0,    44,    45,    46,    47,
      48,    49,  -115,    50,  -115,    51,    52,     0,     0,    53,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    54,     0,    55,    56,     0,    57,     0,    58,
    -115,    59,   419,     0,  -108,  -108,     2,     3,     4,     5,
       0,     6,     7,   420,     9,    10,     0,     0,  -114,     0,
      11,    12,    13,    14,    15,    16,   421,   422,     0,     0,
       0,    19,     0,     0,     0,    20,    21,     0,    22,     0,
       0,     0,     0,    23,    24,    25,    26,     0,    27,    28,
       0,     0,    29,    30,    31,     0,     0,     0,     0,     0,
       0,     0,    32,    33,    34,  -114,  -114,  -114,  -114,    35,
       0,    36,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,    41,    42,    43,     0,     0,
       0,     0,     0,     0,     0,     0,    44,    45,    46,    47,
      48,    49,     0,    50,     0,    51,    52,     0,     0,    53,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    54,     0,    55,    56,     0,    57,     0,    58,
     419,    59,  -108,  -108,     2,     3,     4,     5,     0,     6,
       7,   420,     9,    10,     0,     0,  -511,     0,    11,    12,
      13,    14,    15,    16,   421,   422,     0,     0,     0,    19,
       0,     0,     0,    20,    21,     0,    22,  -511,  -511,  -511,
       0,    23,    24,    25,    26,     0,    27,    28,     0,     0,
      29,    30,    31,     0,     0,     0,     0,     0,     0,     0,
      32,    33,    34,     0,     0,     0,     0,    35,     0,    36,
      37,    38,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,    41,    42,    43,     0,     0,     0,     0,
       0,     0,     0,     0,    44,    45,    46,    47,    48,    49,
       0,    50,     0,    51,    52,     0,     0,    53,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      54,     0,    55,    56,     0,    57,     0,    58,   419,    59,
    -108,  -108,     2,     3,     4,     5,     0,     6,     7,   420,
       9,    10,     0,     0,  -566,     0,    11,    12,    13,    14,
      15,    16,   421,   422,     0,     0,     0,    19,     0,     0,
       0,    20,    21,     0,    22,  -566,  -566,     0,     0,    23,
      24,    25,    26,     0,    27,    28,     0,     0,    29,    30,
      31,     0,     0,     0,     0,     0,     0,     0,    32,    33,
      34,     0,     0,     0,     0,    35,     0,    36,    37,    38,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,    41,    42,    43,     0,     0,     0,     0,     0,     0,
       0,     0,    44,    45,    46,    47,    48,    49,  -566,    50,
       0,    51,    52,     0,     0,    53,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    54,     0,
      55,    56,     0,    57,     0,    58,   419,    59,  -108,  -108,
       2,     3,     4,     5,     0,     6,     7,   420,     9,    10,
       0,     0,  -512,     0,    11,    12,    13,    14,    15,    16,
     421,   422,     0,     0,     0,    19,     0,     0,     0,    20,
      21,     0,    22,  -512,  -512,  -512,     0,    23,    24,    25,
      26,     0,    27,    28,     0,     0,    29,    30,    31,     0,
       0,     0,     0,     0,     0,     0,    32,    33,    34,     0,
       0,     0,     0,    35,     0,    36,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,    41,
      42,    43,     0,     0,     0,     0,     0,     0,     0,     0,
      44,    45,    46,    47,    48,    49,     0,    50,     0,    51,
      52,     0,     0,    53,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    54,     0,    55,    56,
       0,    57,     0,    58,   419,    59,  -108,  -108,     2,     3,
       4,     5,     0,     6,     7,   420,     9,    10,     0,     0,
    -567,     0,    11,    12,    13,    14,    15,    16,   421,   422,
       0,     0,     0,    19,     0,     0,     0,    20,    21,     0,
      22,  -567,  -567,     0,     0,    23,    24,    25,    26,     0,
      27,    28,     0,     0,    29,    30,    31,     0,     0,     0,
       0,     0,     0,     0,    32,    33,    34,     0,     0,     0,
       0,    35,     0,    36,    37,    38,    39,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    40,    41,    42,    43,
       0,     0,     0,     0,     0,     0,     0,     0,    44,    45,
      46,    47,    48,    49,  -567,    50,     0,    51,    52,     0,
       0,    53,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    54,     0,    55,    56,     0,    57,
       0,    58,   419,    59,  -108,  -108,     2,     3,     4,     5,
       0,     6,     7,   420,     9,    10,  -114,  -114,  -114,  -114,
      11,    12,    13,    14,    15,    16,   421,   422,     0,     0,
       0,    19,     0,     0,     0,    20,    21,     0,    22,     0,
       0,     0,     0,    23,    24,    25,    26,     0,    27,    28,
       0,     0,    29,    30,    31,     0,     0,     0,     0,     0,
       0,     0,    32,    33,    34,     0,     0,     0,     0,    35,
       0,    36,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,    41,    42,    43,     0,     0,
       0,     0,     0,     0,     0,     0,    44,    45,    46,    47,
      48,    49,     0,    50,     0,    51,    52,     0,     0,    53,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    54,     0,    55,    56,     0,    57,     0,    58,
     419,    59,  -108,  -108,     2,     3,     4,     5,     0,     6,
       7,   420,     9,    10,     0,     0,  -114,     0,    11,    12,
      13,    14,    15,    16,   421,   422,     0,     0,     0,    19,
       0,     0,     0,    20,    21,     0,    22,  -114,  -114,  -114,
       0,    23,    24,    25,    26,     0,    27,    28,     0,     0,
      29,    30,    31,     0,     0,     0,     0,     0,     0,     0,
      32,    33,    34,     0,     0,     0,     0,    35,     0,    36,
      37,    38,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,    41,    42,    43,     0,     0,     0,     0,
       0,     0,     0,     0,    44,    45,    46,    47,    48,    49,
       0,    50,     0,    51,    52,     0,     0,    53,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      54,     0,    55,    56,     0,    57,     0,    58,   419,    59,
    -108,  -108,     2,     3,     4,     5,     0,     6,     7,   420,
       9,    10,     0,     0,  -114,     0,    11,    12,    13,    14,
      15,    16,   421,   422,     0,     0,     0,    19,     0,     0,
       0,    20,    21,     0,    22,  -114,  -114,     0,     0,    23,
      24,    25,    26,     0,    27,    28,     0,     0,    29,    30,
      31,     0,     0,     0,     0,     0,     0,     0,    32,    33,
      34,     0,     0,     0,     0,    35,     0,    36,    37,    38,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,    41,    42,    43,     0,     0,     0,     0,     0,     0,
       0,     0,    44,    45,    46,    47,    48,    49,  -114,    50,
       0,    51,    52,     0,     0,    53,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    54,     0,
      55,    56,     0,    57,     0,    58,   419,    59,  -108,  -108,
       2,     3,     4,     5,     0,     6,     7,   420,     9,    10,
       0,     0,  -114,     0,    11,    12,    13,    14,    15,    16,
     421,   422,     0,     0,     0,    19,     0,     0,     0,    20,
      21,     0,    22,     0,  -114,  -114,     0,    23,    24,    25,
      26,     0,    27,    28,     0,     0,    29,    30,    31,     0,
       0,     0,     0,     0,     0,     0,    32,    33,    34,     0,
       0,     0,     0,    35,     0,    36,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,    41,
      42,    43,     0,     0,     0,     0,     0,     0,     0,     0,
      44,    45,    46,    47,    48,    49,     0,    50,     0,    51,
      52,     0,     0,    53,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    54,     0,    55,    56,
       0,    57,     0,    58,   419,    59,  -108,  -108,     2,     3,
       4,     5,     0,     6,     7,   420,     9,    10,     0,     0,
    -114,     0,    11,    12,    13,    14,    15,    16,   421,   422,
       0,     0,     0,    19,     0,     0,     0,    20,    21,     0,
      22,     0,     0,     0,     0,    23,    24,    25,    26,     0,
      27,    28,     0,     0,    29,    30,    31,     0,     0,     0,
       0,     0,     0,     0,    32,    33,    34,     0,     0,  -114,
    -114,    35,     0,    36,    37,    38,    39,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    40,    41,    42,    43,
       0,     0,     0,     0,     0,     0,     0,     0,    44,    45,
      46,    47,    48,    49,     0,    50,     0,    51,    52,     0,
       0,    53,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    54,     0,    55,    56,     0,    57,
       0,    58,   419,    59,  -108,  -108,     2,     3,     4,     5,
       0,     6,     7,   420,     9,    10,     0,     0,  -114,     0,
      11,    12,    13,    14,    15,    16,   421,   422,     0,     0,
       0,    19,     0,     0,     0,    20,    21,     0,    22,     0,
       0,     0,     0,    23,    24,    25,    26,     0,    27,    28,
       0,     0,    29,    30,    31,     0,     0,     0,     0,     0,
       0,     0,    32,    33,    34,     0,     0,     0,     0,    35,
       0,    36,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,    41,    42,    43,     0,     0,
       0,     0,     0,     0,     0,     0,    44,    45,    46,    47,
      48,    49,     0,    50,  -114,    51,    52,     0,     0,    53,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    54,     0,    55,    56,     0,    57,     0,    58,
     419,    59,  -108,  -108,     2,     3,     4,     5,     0,     6,
       7,   420,     9,    10,     0,     0,  -114,  -114,    11,    12,
      13,    14,    15,    16,   421,   422,     0,     0,     0,    19,
       0,     0,     0,    20,    21,     0,    22,     0,     0,     0,
       0,    23,    24,    25,    26,     0,    27,    28,     0,     0,
      29,    30,    31,     0,     0,     0,     0,     0,     0,     0,
      32,    33,    34,     0,     0,     0,     0,    35,     0,    36,
      37,    38,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    40,    41,    42,    43,     0,     0,     0,     0,
       0,     0,     0,     0,    44,    45,    46,    47,    48,    49,
       0,    50,     0,    51,    52,     0,     0,    53,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      54,     0,    55,    56,     0,    57,     0,    58,   419,    59,
    -108,  -108,     2,     3,     4,     5,     0,     6,     7,   420,
       9,    10,     0,     0,  -114,     0,    11,    12,    13,    14,
      15,    16,   421,   422,     0,     0,     0,    19,     0,     0,
       0,    20,    21,     0,    22,     0,     0,     0,  -114,    23,
      24,    25,    26,     0,    27,    28,     0,     0,    29,    30,
      31,     0,     0,     0,     0,     0,     0,     0,    32,    33,
      34,     0,     0,     0,     0,    35,     0,    36,    37,    38,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,    41,    42,    43,     0,     0,     0,     0,     0,     0,
       0,     0,    44,    45,    46,    47,    48,    49,     0,    50,
       0,    51,    52,     0,     0,    53,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    54,     0,
      55,    56,     0,    57,     0,    58,   419,    59,  -108,  -108,
       2,     3,     4,     5,     0,     6,     7,   420,     9,    10,
       0,     0,  -114,     0,    11,    12,    13,    14,    15,    16,
     421,   422,     0,     0,     0,    19,     0,     0,     0,    20,
      21,     0,    22,     0,     0,     0,     0,    23,    24,    25,
      26,  -114,    27,    28,     0,     0,    29,    30,    31,     0,
       0,     0,     0,     0,     0,     0,    32,    33,    34,     0,
       0,     0,     0,    35,     0,    36,    37,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,    41,
      42,    43,     0,     0,     0,     0,     0,     0,     0,     0,
      44,    45,    46,    47,    48,    49,     0,    50,     0,    51,
      52,     0,     0,    53,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    54,     0,    55,    56,
       0,    57,     0,    58,   419,    59,  -108,  -108,     2,     3,
       4,     5,     0,     6,     7,   420,     9,    10,     0,     0,
    -114,     0,    11,    12,    13,    14,    15,    16,   421,   422,
       0,     0,     0,    19,     0,     0,     0,    20,    21,     0,
      22,     0,     0,     0,     0,    23,    24,    25,    26,     0,
      27,    28,     0,     0,    29,    30,    31,     0,     0,     0,
       0,     0,     0,     0,    32,    33,    34,     0,     0,     0,
    -114,    35,     0,    36,    37,    38,    39,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    40,    41,    42,    43,
       0,     0,     0,     0,     0,     0,     0,     0,    44,    45,
      46,    47,    48,    49,     0,    50,     0,    51,    52,     0,
       0,    53,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    54,     0,    55,    56,     0,    57,
       0,    58,   419,    59,  -108,  -108,     2,     3,     4,     5,
       0,     6,     7,   420,     9,    10,     0,     0,     0,     0,
      11,    12,    13,    14,    15,    16,   421,   422,     0,     0,
       0,    19,     0,     0,     0,    20,    21,     0,    22,     0,
       0,     0,     0,    23,    24,    25,    26,     0,    27,    28,
       0,     0,    29,    30,    31,     0,     0,     0,     0,     0,
       0,     0,    32,    33,    34,     0,     0,     0,     0,    35,
       0,    36,    37,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    40,    41,    42,    43,     0,     0,
       0,     0,     0,     0,     0,     0,    44,    45,    46,    47,
      48,    49,     0,    50,     0,    51,    52,     0,     0,    53,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    54,     0,    55,    56,     0,    57,     0,    58,
    -114,    59,     2,     0,     4,     5,     0,     6,   155,   156,
       9,     0,     0,     0,     0,     0,    11,    12,    13,   157,
     158,   159,     0,   160,     0,     0,   161,   162,     0,     0,
       0,    20,    21,     0,     0,     0,     0,     0,     0,   163,
       0,   164,     0,     0,    27,    28,     0,     0,   165,    30,
     166,     0,     0,     0,     0,     0,     0,     0,   167,     0,
       0,     0,     0,     0,     0,     0,     0,    36,     0,    38,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   168,    45,     0,     0,    48,     0,     0,     0,
       0,    51,    52,   267,     0,   169,     0,     0,     0,     0,
       0,   170,   171,     0,     0,     0,     0,     0,    54,   269,
       0,     0,     0,    57,     0,    58,     2,    59,     4,     5,
       0,     6,   155,   156,     9,     0,     0,     0,     0,     0,
      11,    12,    13,   157,   158,   159,     0,   160,     0,     0,
     161,   162,     0,     0,     0,    20,    21,     0,     0,     0,
       0,     0,     0,   163,     0,   164,     0,     0,    27,    28,
       0,     0,   165,    30,   166,     0,     0,     0,     0,     0,
       0,     0,   167,     0,     0,     0,     0,     0,     0,     0,
       0,    36,     0,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    41,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   168,    45,     0,     0,
      48,     0,     0,     0,     0,    51,    52,   576,     0,   169,
       0,     0,     0,     0,     0,   170,   171,     0,     0,     0,
       0,     0,    54,   172,     0,     0,     0,    57,     0,    58,
       2,    59,     4,     5,     0,     6,   155,   156,     9,     0,
       0,     0,     0,     0,    11,    12,    13,   157,   158,   159,
       0,   160,     0,     0,   161,   162,     0,     0,     0,    20,
      21,     0,     0,     0,     0,     0,     0,   163,     0,   164,
       0,     0,    27,    28,     0,     0,   165,    30,   166,     0,
       0,     0,     0,     0,     0,     0,   167,     0,     0,     0,
       0,     0,     0,     0,     0,    36,     0,    38,    39,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     168,    45,     0,     0,    48,     0,     0,     0,     0,    51,
      52,     0,     0,   169,     0,     0,     0,     0,     0,   170,
     171,     0,     0,     0,     0,     0,    54,   172,     0,     0,
       0,    57,     0,    58,     2,    59,     4,     5,     0,     6,
     155,   156,     9,     0,     0,     0,     0,     0,    11,    12,
      13,   157,   158,   159,     0,   160,     0,     0,   161,   162,
       0,     0,     0,    20,    21,     0,     0,     0,     0,     0,
       0,   163,     0,   164,     0,     0,    27,    28,     0,     0,
     165,    30,   166,     0,     0,     0,     0,     0,     0,     0,
     167,     0,     0,     0,     0,     0,     0,     0,     0,    36,
       0,    38,    39,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    41,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   168,    45,     0,     0,    48,     0,
       0,     0,     0,    51,    52,     0,     0,   169,     0,     0,
       0,     0,     0,   170,   171,     0,     0,     0,     0,     0,
      54,   265,     0,     0,     0,    57,     0,    58,     2,    59,
       4,     5,     0,     6,   155,   156,     9,     0,     0,     0,
       0,     0,    11,    12,    13,   157,   158,   159,     0,   160,
       0,     0,   161,   162,     0,     0,     0,    20,    21,     0,
       0,     0,     0,     0,     0,   163,     0,   164,     0,     0,
      27,    28,     0,     0,   165,    30,   166,     0,     0,     0,
       0,     0,     0,     0,   167,     0,     0,     0,     0,     0,
       0,     0,     0,    36,     0,    38,    39,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    41,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   168,    45,
       0,     0,    48,     0,     0,     0,     0,    51,    52,     0,
       0,   169,     0,     0,     0,     0,     0,   170,   171,     0,
       0,     0,     0,     0,    54,   269,     0,     0,     0,    57,
       0,    58,     2,    59,     4,     5,     0,     6,   155,   156,
       9,     0,     0,     0,     0,     0,    11,    12,    13,   157,
     158,   159,     0,   160,     0,     0,   161,   162,     0,     0,
       0,    20,    21,     0,     0,     0,     0,     0,     0,   163,
       0,   164,     0,     0,    27,    28,     0,     0,   165,    30,
     166,     0,     0,     0,     0,     0,     0,     0,   167,     0,
       0,     0,     0,     0,     0,     0,     0,    36,     0,    38,
      39,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    41,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   168,    45,     0,     0,    48,     0,     0,     0,
       0,    51,    52,     0,     0,   169,     0,     0,     0,     0,
       0,   170,   171,     0,     0,     0,     0,     0,    54,   684,
       0,     0,     0,    57,     0,    58,     2,    59,     4,     5,
       0,     6,   155,   156,     9,     0,     0,     0,     0,     0,
      11,    12,    13,   157,   158,   159,     0,   160,     0,     0,
       0,   162,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   163,     0,   164,     0,     0,    27,    28,
       0,     0,   165,    30,   166,     0,     0,     0,     0,     0,
       0,     0,   167,     0,     0,     0,     0,  -327,     0,     0,
       0,    36,     0,    38,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    41,     0,     0,     0,     0,
       0,     0,  -327,  -327,   367,     0,   168,    45,     0,     0,
      48,     0,     0,     0,     0,    51,    52,     0,     0,   169,
       0,     0,  -327,  -327,  -327,  -327,     0,  -327,  -327,     0,
       0,     0,    54,     0,     0,     0,     0,    57,  -330,    58,
       0,    59,   459,   460,   461,   462,   463,   464,   465,   466,
     467,     0,     0,     0,     0,   468,   469,   470,   471,   472,
     473,   474,   475,  -330,  -330,   376,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  -330,  -330,  -330,  -330,     0,  -330,  -330,
       0,     0,     0,     0,     0,     0,     0,     0,  -327,  -326,
     291,     0,     0,   459,   460,   461,   462,   463,   464,   465,
     466,   467,     0,     0,     0,     0,   468,   469,   470,   471,
     472,   473,   474,   475,  -326,  -326,   401,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  -326,  -326,  -326,  -326,     0,  -326,
    -326,     0,     0,     0,     0,     0,     0,     0,     0,  -330,
       0,   291,     0,     0,   459,   460,   461,   462,   463,   464,
     465,   466,   467,     0,     0,     0,     0,   468,   469,   470,
     471,   472,   473,   474,   475,     0,     2,     0,     0,     0,
       0,     0,   155,   156,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   157,   158,   159,     0,   160,     0,     0,
       0,   162,     0,     0,     0,     0,     0,     0,     0,     0,
    -326,     0,   291,   163,     0,   164,     0,     0,    27,    28,
       2,     0,     0,    30,   166,     0,   155,   156,     0,     0,
       0,     0,   167,     0,     0,     0,     0,   157,   158,   159,
       0,   160,     0,    38,    39,   162,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    41,     0,   163,     0,   164,
       0,     0,    27,    28,     0,     2,   168,    30,   166,     0,
      48,   155,   156,     0,     0,     0,   167,     0,     0,   169,
       0,     0,   157,   158,   159,     0,   160,     0,     0,     0,
     162,     0,    54,     0,     0,     0,     0,   263,     0,   748,
       0,     0,   163,     0,   164,     0,     0,    27,    28,     2,
     168,     0,    30,   166,    48,   155,   156,     0,     0,     0,
       0,   167,     0,   169,     0,     0,   157,   158,   159,     0,
     160,     0,     0,     0,   162,     0,     0,   749,     0,     0,
       0,     0,     0,     0,    41,     0,   163,     0,   164,     0,
       0,    27,    28,     0,     2,   168,    30,   166,     0,    48,
     155,   156,     0,     0,     0,   167,     0,     0,   169,     0,
       0,   157,   158,   159,     0,   160,     0,     0,     0,   162,
       0,     0,   809,     0,     0,     0,     0,     0,   748,     0,
       0,   163,     0,   164,     0,     0,    27,    28,     2,   168,
       0,    30,   166,    48,   155,   156,     0,     0,     0,     0,
     167,     0,   169,     0,     0,   157,   158,   159,     0,   160,
       0,     0,     0,   162,     0,     0,   860,     0,     0,     0,
       0,     0,     0,    41,     0,   163,     0,   164,     0,     0,
      27,    28,     0,     2,   168,    30,   166,     0,    48,   155,
     156,     0,     0,     0,   167,     0,     0,   169,     0,     0,
     157,   158,   159,     0,   160,    38,    39,     0,   162,     0,
       0,   902,     0,     0,     0,     0,     0,    41,     0,     0,
     163,     0,   164,     0,     0,    27,    28,     2,   168,     0,
      30,   166,    48,   155,   156,     0,     0,     0,     0,   167,
       0,   169,     0,     0,   157,   158,   159,     0,   160,     0,
      38,    39,   162,     0,    54,     0,     0,     0,     0,     0,
       0,     0,    41,     0,   163,     0,   164,     0,     0,    27,
      28,     0,     0,   168,    30,   166,     0,    48,     0,     0,
       0,     0,     0,   167,     0,     0,   169,     0,     0,     0,
       2,     0,     0,     0,     0,     0,   155,   156,     0,     0,
       0,     0,     0,     0,     0,     0,    41,   157,   158,   159,
       0,   160,     0,     0,     0,   162,     0,   168,     0,     0,
       0,    48,     0,     0,     0,     0,     0,   163,   538,   164,
     169,     0,    27,    28,     2,     0,     0,    30,   166,     0,
     155,   156,     0,     0,     0,     0,   167,     0,     0,     0,
       0,   157,   158,   159,     0,   160,     0,     0,     0,   162,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
       0,   163,     0,   164,     0,     0,    27,    28,     0,     0,
     168,    30,   166,     0,    48,     0,     0,     0,     0,     0,
     167,   765,     0,   169,     0,     0,     0,     2,     0,     0,
       0,     0,     0,   155,   156,     0,     0,     0,     0,     0,
       0,     0,     0,    41,   157,   158,   159,     0,   160,     0,
       0,     0,   162,     0,   168,     0,     0,     0,    48,     0,
       0,     0,     0,     0,   163,   829,   164,   169,     0,    27,
      28,     0,     0,     0,    30,   166,     0,     0,     0,     0,
       0,     0,     0,   167,   459,   460,   461,   462,   463,   464,
     465,   466,   467,     0,     0,     0,     0,   468,   469,   470,
     471,   472,   473,   474,   475,     0,    41,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   168,     0,     0,
       0,    48,     0,     0,     0,     0,     0,     0,   907,     0,
     169,     0,     0,     0,     0,     0,   857,   459,   460,   461,
     462,   463,   464,   465,   466,   467,     0,     0,     0,     0,
     468,   469,   470,   471,   472,   473,   474,   475,   459,   460,
     461,   462,   463,   464,   465,   466,   467,     0,     0,     0,
       0,   468,   469,   470,   471,   472,   473,   474,   475,   459,
     460,   461,   462,   463,   464,   465,   466,   467,     0,   894,
       0,     0,   468,   469,   470,   471,   472,   473,   474,   475,
     459,   460,   461,   462,   463,   464,   465,   466,   467,     0,
     925,     0,     0,   468,   469,   470,   471,   472,   473,   474,
     475,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   938
};

#define yypact_value_is_default(yystate) \
  ((yystate) == (-659))

#define yytable_value_is_error(yytable_value) \
  YYID (0)

static const yytype_int16 yycheck[] =
{
       0,    58,   153,   172,   625,    10,   215,   253,   253,   253,
     567,   415,   416,   428,   437,   438,   179,   671,   676,   542,
     183,   675,    19,   529,   579,   440,    26,   190,   237,   192,
     193,    17,    36,    48,    17,    35,   330,    17,    17,   449,
      36,     9,    52,     9,   207,    17,   374,    47,     3,     4,
       3,     4,    36,   620,    36,    38,    39,   126,   133,    59,
       0,    61,   390,    36,     0,   140,    46,   126,    36,    41,
      70,    36,    72,   132,    74,    75,    36,    77,   372,    79,
      36,    81,     9,    83,   651,    85,    26,    87,    67,    89,
      36,    91,    36,    93,    94,    35,   265,   507,    98,    36,
     269,   101,   512,   130,   104,   132,   106,    47,   518,    36,
     125,     9,    36,    36,    36,   125,    10,   103,   101,    59,
       0,    61,   122,    36,   124,    61,   123,   124,   132,   539,
      70,   136,    72,   133,    74,    75,   132,    77,    36,    79,
     140,    81,   110,    83,   110,    85,   130,    87,   703,    89,
     132,    91,    36,    93,    94,    35,   814,   130,    98,   132,
     683,   101,   820,   817,   104,   671,   106,    36,   123,   124,
     123,   124,   132,    17,    36,    36,   132,   595,    36,    59,
     801,    61,   122,   110,   124,    36,   609,    36,   132,   126,
      70,     0,    72,   133,    74,    75,   600,    77,    36,    79,
     140,    81,   126,    83,   126,    85,   130,    87,   132,    89,
     132,    91,   110,    93,    94,   215,   773,    26,    98,   132,
      36,   101,    36,    36,   104,    19,   106,     0,   126,     0,
       0,    52,   777,   123,   124,   125,    17,   237,    47,   123,
     124,   786,   122,   788,   124,    54,    69,   665,   132,    12,
      58,    84,    61,   133,   123,   124,    26,   101,    39,    40,
     140,    70,    58,   132,   126,   123,   124,   126,   130,   269,
     132,   132,   690,   106,   132,   126,     0,    47,    87,   130,
      89,   132,    91,   132,    93,   123,   124,   132,    61,    36,
      61,    61,   710,   708,   132,   894,   542,   542,   542,    36,
     857,   125,     9,   721,   125,   129,   114,   115,   116,   117,
     118,    72,    73,   122,   130,    52,   132,   735,   132,   132,
     116,   117,   118,    93,   133,    36,   925,    34,    35,   269,
     740,   140,   125,   743,   123,   124,     0,   894,   131,   938,
     750,    36,   125,   132,   754,   125,   129,    54,    55,    56,
      57,   131,    59,    60,   123,   124,   766,   126,   123,   124,
     121,   126,    26,   133,   130,     3,   923,   132,   925,    36,
     140,    17,   125,   791,   374,   793,   123,   124,   125,   126,
      36,   938,   125,    47,    17,   548,   129,    25,   125,   126,
     390,   130,    38,    39,    40,    69,    34,    61,   123,   124,
     810,   811,    51,   813,   555,    38,    39,    40,   125,   819,
     127,   123,   124,   622,   126,   114,   834,   123,   124,   125,
     838,   126,   832,   130,   126,   843,   844,   127,   428,    93,
      15,    16,    17,    18,   374,   123,   124,   683,   683,   683,
     440,     3,     4,   652,   253,   855,    15,    16,    17,    18,
     390,   861,   129,   125,    92,   127,   126,   875,    96,    36,
     269,   879,   100,   123,   124,   125,    36,   105,   886,   133,
     108,   109,   110,   111,   892,   893,   140,   122,   123,   124,
     118,     3,     4,   121,   125,   123,   127,     9,   428,    36,
     900,   129,    36,   903,   374,   125,     0,   127,   908,   269,
     440,   123,   124,   125,    36,   143,   123,   124,   125,    36,
     390,   568,    34,    35,    36,   684,   934,   927,     3,     4,
      36,   125,    26,   127,     9,   123,   124,   125,   125,     0,
     127,    36,    54,    55,    56,    57,     9,    59,    60,   123,
     124,   125,   125,    47,   127,   125,    36,   127,   428,    34,
      35,    36,   552,    17,    18,    26,    19,    61,     3,     4,
     440,    34,    35,    36,    38,    39,   126,   127,   125,    54,
      55,    56,    57,   125,    59,    60,    47,    64,    65,   133,
     125,    54,    55,    56,    57,   126,    59,    60,   110,    93,
      61,   126,   597,   132,   125,   595,     9,    58,     9,    19,
     605,   125,     9,   126,   126,   269,   126,   132,   130,    47,
     132,   129,   552,   125,   129,   125,   127,   125,   127,   428,
      99,   127,    93,   125,    84,   110,   125,   127,    61,   133,
     127,   440,   127,   127,   125,    66,   140,   110,   651,    93,
      93,   126,    93,   700,    93,   130,    93,   132,   234,    93,
      93,    93,   652,   126,    93,   595,    93,   130,   428,   132,
      74,    93,   133,    93,    93,   665,    93,   652,   507,   140,
     440,   237,   236,    87,    88,    89,    90,    91,    92,    93,
      94,     5,   923,     7,     8,   676,    10,    11,    12,    13,
     690,   437,   942,   416,   615,    19,    20,    21,    22,    23,
      24,   769,    26,   615,   552,   243,    30,   712,   708,    -1,
     710,    -1,    -1,   718,    -1,   595,    -1,    -1,    42,     0,
      44,   721,    -1,    47,    48,   665,    -1,    -1,    52,    53,
      -1,    -1,    -1,   542,    -1,   735,    -1,    61,    -1,    -1,
      -1,    -1,    -1,   552,    -1,    26,    70,     0,    72,    73,
     690,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      84,    -1,    -1,    -1,   428,   269,    47,    -1,   708,    -1,
     710,    95,    96,    26,    -1,    99,   440,    -1,    -1,    -1,
      61,   721,   552,    -1,   108,   665,   595,    -1,    -1,    -1,
      -1,   791,    -1,   793,    47,   735,    -1,   121,   269,    -1,
     805,    -1,   126,    -1,   128,    -1,    -1,    -1,    61,    -1,
     690,    -1,    93,    -1,    -1,    -1,     0,    -1,    -1,    -1,
       9,    -1,    -1,    -1,    -1,   595,    -1,    -1,   708,    -1,
     710,    -1,    -1,    -1,   834,    -1,    -1,    -1,   838,    -1,
      93,   721,    26,   843,   844,    34,    35,    36,    -1,    -1,
      -1,   791,   133,   793,    -1,   735,   665,    -1,    -1,   140,
      -1,    -1,    -1,    47,    -1,    54,    55,    56,    57,    -1,
      59,    60,    -1,    -1,   683,   875,    -1,    61,    -1,   879,
     133,   690,    -1,   888,    -1,    -1,   886,   140,   552,    -1,
      -1,    -1,   892,   893,   834,   665,    -1,    -1,   838,   708,
      -1,   710,    -1,   843,   844,    -1,    -1,    -1,    -1,    93,
      -1,   791,   721,   793,    -1,    -1,    -1,    -1,    -1,    -1,
     690,   110,    -1,    -1,   428,    -1,   735,    -1,    -1,    -1,
     930,   595,    -1,    -1,   934,   875,   440,   126,   708,   879,
     710,   130,   942,   132,    -1,    -1,   886,    -1,    -1,   133,
      -1,   721,   892,   893,   834,    -1,   140,   428,   838,    -1,
      -1,    -1,    -1,   843,   844,   735,    -1,    -1,    -1,   440,
      -1,    -1,    -1,    -1,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,   791,    58,   793,    -1,    -1,    -1,   269,    -1,
     930,    -1,    -1,    -1,   934,   875,    -1,    -1,    -1,   879,
      -1,   665,   942,    -1,     0,    -1,   886,    -1,    -1,    -1,
      -1,    -1,   892,   893,    -1,    -1,   269,    -1,    -1,    -1,
      -1,   791,    -1,   793,    -1,   834,   690,    -1,    -1,   838,
      26,    -1,    -1,    -1,   843,   844,   111,   112,   113,   114,
     115,   116,   117,   118,   708,    -1,   710,    -1,   552,    -1,
     930,    47,    -1,    -1,   934,    -1,    -1,   721,    -1,    -1,
      -1,    -1,   942,    -1,   834,    61,   875,     9,   838,    -1,
     879,   735,    -1,   843,   844,    -1,    -1,   886,    -1,    -1,
      -1,   552,    -1,   892,   893,   269,    -1,    -1,    -1,    -1,
      -1,   595,    34,    35,    36,    -1,    -1,    93,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   875,    -1,    -1,    -1,   879,
      -1,    -1,    54,    55,    56,    57,   886,    59,    60,    -1,
      -1,   930,   892,   893,   595,   934,    -1,   791,    -1,   793,
      -1,    -1,    -1,   942,    -1,    -1,    -1,   133,    -1,    -1,
      -1,    -1,    -1,    -1,   140,    -1,    -1,   428,    -1,    -1,
      -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   440,
     930,   665,    -1,    -1,   934,    -1,    -1,    -1,   110,    -1,
     834,    -1,   942,    -1,   838,   428,    34,    35,    36,   843,
     844,    -1,    -1,    -1,   126,    -1,   690,   440,   130,    -1,
     132,    -1,    -1,    -1,   665,     9,    54,    55,    56,    57,
      -1,    59,    60,    -1,   708,    -1,   710,    -1,     0,    -1,
      -1,   875,    -1,    -1,    -1,   879,    -1,   721,    -1,   690,
      34,    35,   886,    -1,    -1,    -1,    -1,    -1,   892,   893,
      -1,   735,    -1,    -1,    26,     9,    -1,   708,    -1,   710,
      54,    55,    56,    57,   428,    59,    60,    -1,    -1,    -1,
     721,    -1,   110,    -1,    -1,    47,   440,    -1,    -1,    -1,
      34,    35,    36,    -1,   735,     0,   930,    -1,   126,    61,
     934,   552,   130,   269,   132,    -1,    -1,    -1,   942,    -1,
      54,    55,    56,    57,    -1,    59,    60,   791,    -1,   793,
      -1,    26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   552,
      -1,    93,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    47,    -1,   595,    -1,   130,    -1,   132,    -1,
     791,    -1,   793,    -1,    -1,    -1,    61,    -1,    -1,    -1,
     834,    -1,    -1,     0,   838,    -1,   110,    -1,    -1,   843,
     844,   133,   595,    -1,    -1,    -1,    -1,    -1,   140,    -1,
      -1,    -1,   126,    -1,    -1,    -1,   130,    -1,   132,    26,
      -1,    -1,    -1,   834,    -1,    -1,    -1,   838,   552,    -1,
      -1,   875,   843,   844,    -1,   879,    -1,    -1,    -1,    -1,
      47,    -1,   886,    -1,   665,    -1,    -1,    -1,   892,   893,
      -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,   133,    -1,
      -1,    -1,    -1,    -1,   875,   140,    -1,    -1,   879,   690,
      -1,   595,   665,    -1,    -1,   886,    -1,    -1,    -1,    -1,
      -1,   892,   893,    -1,    -1,    -1,   930,   708,    -1,   710,
     934,    -1,   428,    -1,    -1,    -1,    -1,   690,   942,    -1,
     721,    -1,    -1,    -1,   440,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     0,   735,   708,    -1,   710,    -1,   930,
      -1,    -1,    -1,   934,    -1,    -1,   133,    -1,   721,    -1,
      -1,   942,    -1,   140,    -1,    -1,    -1,   269,    -1,    26,
       5,   665,   735,     0,    -1,    -1,    11,    12,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      47,    26,    -1,    -1,    -1,    30,   690,    -1,    -1,    26,
     791,    -1,   793,    -1,    61,    -1,    -1,    42,    -1,    44,
      -1,     9,    47,    48,   708,    -1,   710,    52,    53,    -1,
      47,    -1,    -1,    -1,   269,    -1,    61,   721,   791,    -1,
     793,    -1,    -1,    -1,    61,    -1,    34,    35,    36,    -1,
      -1,   735,    -1,   834,    -1,    -1,   552,   838,    -1,    84,
      -1,    -1,   843,   844,    -1,    -1,    54,    55,    56,    57,
      95,    59,    60,    -1,    99,    -1,    -1,    -1,    -1,    -1,
       0,   834,    -1,   108,    -1,   838,   133,    -1,    -1,    -1,
     843,   844,    -1,   140,   875,    -1,    -1,    -1,   879,   595,
      -1,    -1,   269,   128,    -1,   886,    26,   791,    -1,   793,
      -1,   892,   893,    -1,    -1,    -1,   133,    -1,    -1,    -1,
      -1,    -1,   875,   140,    -1,    -1,   879,    47,    -1,    -1,
      -1,    -1,    -1,   886,    -1,    -1,   428,    -1,   126,   892,
     893,    61,   130,    -1,   132,     0,    -1,    -1,   440,   930,
     834,    -1,    -1,   934,   838,    -1,    -1,    -1,    -1,   843,
     844,   942,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   665,
      -1,    26,    -1,    -1,    -1,    -1,    -1,   930,    -1,    -1,
      -1,   934,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   942,
      -1,   875,    47,   428,   690,   879,    -1,    -1,    -1,    -1,
      -1,    -1,   886,    -1,    -1,   440,    61,    -1,   892,   893,
      -1,    -1,   708,   133,   710,    -1,    -1,    -1,     9,    -1,
     140,    -1,   269,    -1,    -1,   721,    -1,    -1,    -1,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   735,
      -1,    -1,    -1,    34,    35,    36,   930,    -1,    -1,    -1,
     934,    -1,   269,    -1,    34,    35,    36,    -1,   942,    -1,
     552,   428,    -1,    54,    55,    56,    57,    -1,    59,    60,
      -1,    -1,    -1,   440,    54,    55,    56,    57,   133,    59,
      60,     9,    -1,    -1,    -1,   140,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   791,    -1,   793,    -1,    -1,
      -1,    -1,    -1,   595,    -1,    -1,    34,    35,    36,    -1,
      -1,     0,    -1,    -1,    -1,    -1,    -1,   552,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    54,    55,    56,    57,
      -1,    59,    60,    -1,    -1,   126,    -1,    26,   834,   130,
      -1,   132,   838,    34,    35,    36,    -1,   843,   844,   269,
     130,    -1,   132,    -1,    -1,    -1,    -1,    -1,    47,    -1,
     595,    -1,     9,    54,    55,    56,    57,    -1,    59,    60,
      -1,    -1,    61,   665,     9,    -1,    -1,    -1,    -1,   875,
      -1,   428,    -1,   879,    -1,   552,    -1,    34,    35,    36,
     886,    -1,    -1,   440,    -1,    -1,   892,   893,   690,    34,
      35,    36,   130,    -1,   132,    -1,    -1,    54,    55,    56,
      57,   428,    59,    60,   269,    -1,   708,    -1,   710,    54,
      55,    56,    57,   440,    59,    60,    -1,    -1,   595,   721,
     665,    -1,     0,    -1,   930,    -1,    -1,    -1,   934,   130,
      -1,   132,    -1,   735,   133,    -1,   942,    -1,    -1,    -1,
      -1,   140,    -1,    -1,    -1,   690,    -1,    -1,    26,    -1,
      -1,    -1,    -1,    -1,    -1,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   708,    -1,   710,    -1,    -1,    -1,    47,
      -1,    -1,    -1,   130,    -1,   132,   721,    -1,    -1,    -1,
      34,    35,    36,    61,    -1,   130,    -1,   132,   665,   791,
     735,   793,    -1,    -1,    -1,   552,    -1,    -1,   428,    -1,
      54,    55,    56,    57,    -1,    59,    60,    -1,    -1,    -1,
     440,    -1,    -1,   690,    -1,    -1,    -1,    -1,    -1,     0,
      -1,    -1,    -1,    -1,    -1,   552,    -1,    -1,    -1,    -1,
      -1,   708,   834,   710,    -1,    -1,   838,    -1,   595,    -1,
      -1,   843,   844,    -1,   721,    26,   791,    -1,   793,    -1,
      -1,    -1,    -1,    -1,    -1,   133,     9,    -1,   735,    -1,
      -1,    -1,   140,   428,    -1,    -1,    47,    -1,   595,    -1,
     269,    -1,    -1,   875,    -1,   440,   130,   879,   132,    -1,
      61,    34,    35,    36,   886,    -1,    -1,    -1,    -1,   834,
     892,   893,    -1,   838,    -1,    -1,    -1,    -1,   843,   844,
      -1,    54,    55,    56,    57,    -1,    59,    60,   665,    -1,
      -1,    -1,    -1,    -1,   791,    -1,   793,    -1,    -1,    -1,
      -1,    -1,   552,    -1,     9,    -1,    -1,    -1,   930,    -1,
     875,    -1,   934,   690,   879,    -1,    -1,    -1,   665,    -1,
     942,   886,    -1,    -1,    -1,    -1,    -1,   892,   893,    34,
      35,   708,   133,   710,    -1,    -1,    -1,   834,    -1,   140,
      -1,   838,    -1,   690,   721,   595,   843,   844,    -1,    54,
      55,    56,    57,    -1,    59,    60,    -1,   130,   735,   132,
      -1,   708,    -1,   710,    -1,   930,    -1,   552,    -1,   934,
      -1,   269,     9,    -1,   721,    -1,    -1,   942,   875,    -1,
       0,    -1,   879,    -1,    -1,    -1,    -1,    -1,   735,   886,
      -1,    -1,    -1,    -1,    -1,   892,   893,    34,    35,    -1,
      -1,    -1,    -1,    -1,     0,    -1,    -1,    -1,    -1,   428,
     595,    -1,    -1,    -1,   791,   665,   793,    54,    55,    56,
      57,   440,    59,    60,    -1,   130,    -1,   132,     9,    -1,
      26,    -1,    -1,   930,    -1,    -1,    -1,   934,    -1,    -1,
     690,    61,    -1,    -1,   791,   942,   793,    -1,    -1,    -1,
      -1,    47,    -1,    34,    35,    -1,    -1,   834,   708,    -1,
     710,   838,    -1,    -1,    -1,    61,   843,   844,   269,    -1,
      -1,   721,    -1,    54,    55,    56,    57,     0,    59,    60,
     665,    -1,    -1,    -1,    -1,   735,    -1,   834,    -1,    -1,
      -1,   838,    -1,   130,    -1,   132,   843,   844,   875,    -1,
      -1,     0,   879,    26,    -1,   690,    -1,    -1,    -1,   886,
      -1,    -1,    -1,   133,    -1,   892,   893,    -1,    -1,    -1,
     140,    -1,    -1,   708,    47,   710,    -1,    -1,   875,    -1,
     428,    -1,   879,   552,    -1,    -1,   721,   133,    61,   886,
      -1,   791,   440,   793,   140,   892,   893,    -1,    -1,   130,
     735,   132,    -1,   930,     9,    -1,    -1,   934,    -1,    -1,
      -1,    -1,    61,    -1,    -1,   942,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,    34,
      35,    -1,    -1,   930,   834,    -1,    -1,   934,   838,    -1,
      -1,    -1,    -1,   843,   844,   942,    -1,    -1,    -1,    54,
      55,    56,    57,    -1,    59,    60,   791,    -1,   793,    -1,
     133,    -1,    -1,    -1,    -1,    -1,    -1,   140,    -1,     9,
      -1,    -1,     0,    -1,    -1,   875,    -1,   428,    -1,   879,
      -1,    -1,    -1,    -1,   133,    -1,   886,    -1,    -1,   440,
      -1,   140,   892,   893,    34,    35,   665,    -1,    -1,   834,
      -1,    -1,    -1,   838,   552,    -1,    -1,    -1,   843,   844,
      -1,    -1,    -1,    -1,    54,    55,    56,    57,    -1,    59,
      60,   690,    -1,   269,    -1,   130,    -1,   132,    -1,    -1,
     930,    -1,    -1,    61,   934,    -1,    -1,    -1,     9,   708,
     875,   710,   942,    -1,   879,    -1,    -1,   595,    -1,    -1,
      -1,   886,   721,    -1,    -1,    -1,    -1,   892,   893,    -1,
      -1,    -1,    -1,    34,    35,    36,   735,    -1,     9,    -1,
     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     0,    54,    55,    56,    57,    -1,    59,    60,
     130,    -1,    -1,    34,    35,   930,   269,    -1,    -1,   934,
      -1,   552,    -1,    -1,    -1,   133,    -1,   942,    -1,    -1,
      -1,    -1,   140,    54,    55,    56,    57,   665,    59,    60,
      -1,    -1,   791,    -1,   793,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    75,    76,    77,    78,    79,    80,
      81,    82,   690,    61,   595,    -1,    87,    88,    89,    90,
      91,    92,    93,    94,     9,    -1,    -1,    -1,   428,   130,
     708,    -1,   710,    -1,    -1,   834,    -1,    -1,    -1,   838,
     440,    -1,    -1,   721,   843,   844,    -1,    -1,    -1,    34,
      35,    36,   428,    -1,    -1,    -1,    -1,   735,    -1,   130,
      -1,   132,    -1,    -1,   440,    -1,    -1,    -1,    -1,    54,
      55,    56,    57,    -1,    59,    60,   875,    -1,    -1,    -1,
     879,    -1,    -1,    -1,   665,   133,    -1,   886,    -1,    -1,
      -1,    -1,   140,   892,   893,    -1,    -1,    -1,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    11,    12,    -1,    -1,   690,
      -1,    -1,    -1,   791,    -1,   793,    22,    23,    24,    -1,
      26,    -1,    -1,    -1,    30,   428,    -1,   708,    -1,   710,
      -1,   930,    -1,    -1,    -1,   934,    42,   440,    44,    -1,
     721,    47,    48,   942,    -1,   130,    52,    53,    -1,   428,
      31,    32,    33,    -1,   735,    61,   834,    -1,    -1,    -1,
     838,   440,    -1,    -1,    -1,   843,   844,    -1,    49,    50,
      -1,    -1,    -1,    -1,    -1,    -1,   552,    58,    84,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,
      -1,    -1,    -1,    99,    -1,   595,    -1,   875,    -1,    -1,
      -1,   879,   108,    -1,    -1,    -1,    -1,    -1,   886,    -1,
     791,    -1,   793,    -1,   892,   893,    -1,   123,   124,   595,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   552,
      -1,    -1,   930,   834,    -1,    -1,   934,   838,    -1,    -1,
      -1,    -1,   843,   844,   942,   665,    -1,    -1,    -1,    -1,
     428,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   440,    -1,    -1,    -1,    -1,    -1,    -1,   665,
     690,    -1,   595,    -1,   875,    -1,    -1,    -1,   879,    -1,
      -1,    -1,    -1,    -1,    -1,   886,    -1,    -1,   708,    -1,
     710,   892,   893,    -1,   690,    -1,   595,    -1,    -1,    -1,
      -1,   721,    -1,    74,    75,    76,    77,    78,    79,    80,
      81,    82,   708,    -1,   710,   735,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,   721,    -1,    -1,    -1,   930,
      -1,    -1,    -1,   934,    -1,    -1,    -1,    -1,    -1,   735,
      -1,   942,   665,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     428,   132,    -1,    -1,    -1,    -1,   665,   690,    -1,    -1,
      -1,   791,   440,   793,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   708,    -1,   710,    -1,    -1,
      -1,   690,    -1,    -1,    -1,   791,    -1,   793,   721,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   708,
      -1,   710,   735,    -1,   834,    -1,    -1,   595,   838,    -1,
      -1,    -1,   721,   843,   844,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   735,    -1,   834,    -1,
      -1,    -1,   838,    -1,    -1,    -1,    -1,   843,   844,    -1,
      -1,    -1,    -1,    -1,    -1,   875,    -1,    -1,    -1,   879,
      -1,    -1,    -1,    -1,    -1,    -1,   886,    -1,   791,    -1,
     793,    -1,   892,   893,    -1,    -1,    -1,    -1,    -1,   875,
      -1,    -1,    -1,   879,    -1,    -1,    -1,   665,    -1,    -1,
     886,    -1,   791,    -1,   793,    -1,   892,   893,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     930,   834,   690,    -1,   934,   838,    -1,    -1,    -1,    -1,
     843,   844,   942,    -1,    -1,    -1,    -1,   595,    -1,    -1,
     708,    -1,   710,    -1,   930,   834,    -1,    -1,   934,   838,
      -1,    -1,    -1,   721,   843,   844,   942,    -1,    -1,    -1,
      -1,    -1,   875,    -1,    -1,    -1,   879,   735,    -1,    -1,
      -1,    27,    28,   886,    -1,    31,    32,    33,    -1,   892,
     893,    -1,    -1,    -1,    -1,    -1,   875,    -1,    -1,    -1,
     879,    -1,    -1,    49,    50,    -1,    -1,   886,    -1,    -1,
      -1,    -1,    58,   892,   893,    -1,    -1,   665,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   930,    -1,    -1,
      -1,   934,    -1,   791,    -1,   793,    -1,    -1,    -1,   942,
      -1,    -1,   690,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   930,    -1,    -1,    -1,   934,    -1,    -1,    -1,    -1,
     708,    -1,   710,   942,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   721,    -1,    -1,   834,     5,    -1,   125,
     838,    -1,    -1,    11,    12,   843,   844,   735,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    -1,    26,    -1,
      -1,    -1,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    -1,    44,   875,    -1,    47,
      48,   879,    -1,    -1,    52,    53,    -1,    -1,   886,    -1,
      -1,    -1,    -1,    61,   892,   893,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   791,    -1,   793,    -1,    -1,    -1,    14,
      15,    16,    -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,
      -1,    26,    -1,    -1,    -1,    -1,    -1,    95,    -1,    -1,
      -1,    99,   930,    -1,    -1,    40,   934,    42,    43,    -1,
     108,    -1,    47,    -1,   942,    -1,   834,    -1,    -1,    -1,
     838,    -1,    -1,    -1,    59,   843,   844,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    70,    -1,    72,    -1,    74,
      75,    -1,    77,    -1,    79,    -1,    81,    -1,    83,    -1,
      85,    -1,    87,    -1,    89,    -1,    91,   875,    93,    94,
      -1,   879,    -1,    98,    -1,    -1,   101,    -1,   886,   104,
      -1,   106,    -1,    -1,   892,   893,    -1,    72,    -1,    74,
      75,    -1,    77,    -1,    79,    -1,    81,   122,    83,   124,
      85,    -1,    87,    -1,    89,    -1,    91,    -1,    93,    94,
      -1,    -1,    -1,    98,    -1,    -1,   101,    -1,    -1,   104,
      -1,   106,   930,    -1,    -1,    -1,   934,   152,   153,    -1,
      -1,    -1,    -1,    -1,   942,    -1,    -1,   122,    -1,   124,
      -1,     0,     1,    -1,    -1,    -1,    -1,   172,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,
      71,    -1,    73,    -1,    -1,    76,    -1,    78,    -1,    80,
      -1,    -1,    -1,    84,    -1,    86,    -1,    -1,    -1,    -1,
     215,    92,    -1,    -1,   219,    96,    -1,    -1,    -1,   100,
      -1,   102,    61,    -1,   105,    -1,    -1,    -1,    -1,    -1,
     235,   236,   237,    -1,    -1,    -1,    -1,    -1,    -1,   120,
     121,   246,   123,    -1,    -1,    27,    28,   252,   253,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     265,    -1,    -1,    -1,   269,    -1,    -1,    49,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    58,    -1,    -1,    -1,
     119,    -1,   287,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,   182,   183,    -1,    -1,   186,    -1,   188,    -1,   190,
     149,   192,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   205,    -1,   207,   208,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,    -1,    -1,
      -1,   123,   124,    -1,   225,    -1,   227,   228,   229,    -1,
      -1,   232,   233,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     9,    -1,    -1,   374,
      -1,   210,    -1,   212,    -1,    -1,   257,    -1,    -1,   218,
      -1,    -1,    -1,    -1,    -1,   390,    -1,    -1,    -1,    -1,
      -1,    34,    35,    36,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   244,    -1,   246,    -1,    -1,
     249,    54,    55,    56,    57,    -1,    59,    60,    -1,    -1,
      -1,    -1,   261,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      -1,    -1,   281,    -1,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    -1,    -1,    -1,    -1,   462,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   346,   471,     5,    -1,     7,
       8,    -1,    10,    11,    12,    13,    -1,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,   130,    26,   132,
      -1,    29,    30,    -1,    -1,    -1,    34,    35,   503,    -1,
     505,    -1,    -1,    -1,    42,    -1,    44,    -1,    -1,    47,
      48,    -1,    -1,    51,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    61,   529,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    70,    -1,    72,    73,    -1,   542,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    84,   552,    -1,    -1,
     555,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    -1,
      -1,    99,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
     108,    -1,   411,    -1,    -1,    -1,   114,   115,    -1,    -1,
      -1,    -1,    -1,   121,   122,    -1,    -1,    -1,   126,    -1,
     128,    -1,   130,    -1,    -1,    -1,    -1,   602,   603,    -1,
     439,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   447,     5,
      -1,   450,    -1,   452,    -1,    11,    12,   622,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    -1,
      26,    -1,    -1,    -1,    30,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,   652,    44,    -1,
     655,    47,    48,    -1,   659,   660,    52,    53,    -1,    -1,
      -1,   500,    -1,   502,   669,    61,   671,   548,    -1,    -1,
     675,   676,    -1,    -1,   513,    -1,   681,    -1,   683,   684,
      -1,   520,    10,   564,   523,   524,    -1,   526,    84,    -1,
      -1,   530,    20,    21,    -1,    -1,    -1,    -1,   537,    95,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    -1,    -1,    -1,
     106,    -1,   108,    -1,   553,    -1,    -1,     5,    -1,    -1,
      -1,    -1,    50,    11,    12,    -1,   122,    -1,    -1,    57,
      58,    -1,    -1,    -1,    22,    23,    24,    -1,    26,    -1,
      -1,    -1,    30,   748,   749,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    -1,    44,    -1,    -1,    47,
      48,    -1,    -1,    -1,    52,    53,    -1,   606,    -1,    -1,
     775,    -1,   777,    61,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   786,    -1,   788,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   809,    -1,    -1,    95,   136,   814,
      -1,    99,   817,    -1,   653,   820,    -1,    -1,   106,   147,
     108,    -1,   661,    -1,   663,    -1,   154,    -1,    -1,    -1,
      -1,    27,   671,   161,   122,    31,    32,    33,    -1,    -1,
      -1,    -1,   170,   171,    -1,    -1,   851,    -1,    -1,    -1,
      -1,    -1,   691,    49,    50,   860,    -1,   696,   863,   698,
      -1,    -1,    58,    -1,    -1,    -1,   871,    -1,    -1,    -1,
      -1,    -1,   711,    -1,    -1,   714,   715,   716,    -1,    -1,
      -1,   720,    -1,    -1,   723,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   902,    -1,    -1,
      -1,    -1,    -1,    -1,     9,    -1,    -1,    -1,   747,    -1,
      -1,   239,    -1,    -1,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,    -1,   253,    -1,    -1,    -1,    34,
      35,    36,   260,    -1,    -1,   263,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   949,   950,   785,    -1,    -1,    54,
      55,    56,    57,   792,    59,    60,   795,    -1,    -1,    -1,
      -1,    -1,    -1,   291,    -1,    -1,    -1,    -1,    -1,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    -1,   818,
      -1,    -1,    87,    88,    89,    90,    91,    92,    93,    94,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   845,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   853,   854,    -1,     9,    -1,    -1,
     859,   126,    -1,    -1,    -1,   130,    -1,   132,    -1,    -1,
     869,   870,    -1,    -1,   873,    -1,    -1,   876,   877,    -1,
      -1,    -1,    34,    35,    36,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   380,    -1,    -1,   383,   384,   385,   386,   387,
     388,   389,    54,    55,    56,    57,    -1,    59,    60,   397,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   916,    -1,    -1,
     919,    -1,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    -1,    -1,    -1,    -1,    87,    88,    89,    90,    91,
      92,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    27,    28,    -1,    -1,    31,    32,    33,    -1,
      -1,    -1,    27,    28,    -1,    -1,    31,    32,    33,    -1,
      -1,   123,   124,   125,    49,    50,    -1,    -1,   130,    -1,
     132,    -1,    -1,    58,    49,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    58,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   516,    -1,
      -1,    -1,   107,    -1,   522,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   542,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   551,     5,    -1,     7,     8,    -1,    10,
      11,    12,    13,    -1,    -1,    -1,    -1,   565,    19,    20,
      21,    22,    23,    24,    -1,    26,    -1,    -1,    29,    30,
      -1,   579,    -1,    34,    35,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    -1,    44,    -1,    -1,    47,    48,    -1,   597,
      51,    52,    53,    -1,    -1,    -1,    -1,   605,    27,    28,
      61,    -1,    31,    32,    33,   613,    -1,    -1,    -1,    70,
     618,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      49,    50,    -1,    84,    -1,    -1,    -1,    -1,    -1,    58,
      -1,    -1,    -1,    -1,    95,    96,    -1,    -1,    99,    -1,
      -1,    -1,    -1,   104,   105,    -1,    -1,   108,    -1,    -1,
      -1,    -1,    -1,   114,   115,    -1,    -1,    -1,    -1,    -1,
     121,   122,    -1,    -1,   125,   126,    -1,   128,    -1,   130,
      -1,    -1,    -1,    -1,    -1,   683,    -1,    -1,   107,    -1,
      -1,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,    -1,    -1,    -1,    -1,   703,    -1,    -1,   706,    -1,
      -1,    -1,    -1,    -1,   712,    -1,    -1,    -1,    -1,    -1,
     718,    -1,    -1,    -1,    -1,    -1,   724,    -1,    -1,    -1,
      -1,    -1,    -1,   731,    -1,    -1,    -1,    -1,   736,    -1,
      -1,    -1,     0,     1,    -1,     3,     4,     5,     6,     7,
       8,    -1,    10,    11,    12,    13,    14,    -1,    -1,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
      -1,   769,    30,    -1,    -1,    -1,    34,    35,    -1,    37,
      -1,    -1,    -1,    -1,    42,    43,    44,    45,    -1,    47,
      48,    -1,    -1,    51,    52,    53,    -1,    -1,    -1,    -1,
     798,    -1,   800,    61,    62,    63,    -1,   805,    -1,    -1,
      68,    -1,    70,    71,    72,    73,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    83,    84,    85,    86,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,
      98,    99,   100,    -1,   102,    -1,   104,   105,    -1,    -1,
     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   121,    -1,   123,   124,    -1,   126,    -1,
     128,    -1,   130,     0,     1,    -1,     3,     4,     5,     6,
       7,     8,    -1,    10,    11,    12,    13,    14,    -1,    -1,
     888,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    -1,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,
      37,    -1,    -1,    -1,    -1,    42,    43,    44,    45,    -1,
      47,    48,    -1,    -1,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    61,    62,    63,    -1,    -1,    -1,
      -1,    68,    -1,    70,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    83,    84,    85,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,
      97,    98,    99,   100,    -1,   102,    -1,   104,   105,    -1,
      -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   121,    -1,   123,   124,    -1,   126,
      -1,   128,     1,   130,     3,     4,     5,     6,     7,     8,
      -1,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    -1,
      -1,    30,    -1,    -1,    -1,    34,    35,    -1,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      -1,    -1,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    83,    84,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,    -1,    -1,   108,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   121,    -1,   123,   124,    -1,   126,    -1,   128,
     129,   130,     1,    -1,     3,     4,     5,     6,     7,     8,
      -1,    10,    11,    12,    13,    14,    -1,    -1,    17,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    -1,
      -1,    30,    -1,    -1,    -1,    34,    35,    -1,    37,    -1,
      -1,    -1,    -1,    42,    43,    44,    45,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    62,    63,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    83,    84,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,    98,
      99,   100,    -1,   102,    -1,   104,   105,    -1,    -1,   108,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   121,    -1,   123,   124,    -1,   126,    -1,   128,
       1,   130,     3,     4,     5,     6,     7,     8,    -1,    10,
      11,    12,    13,    14,    -1,    -1,    17,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    -1,    -1,    30,
      -1,    -1,    -1,    34,    35,    -1,    37,    38,    39,    40,
      -1,    42,    43,    44,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      61,    62,    63,    -1,    -1,    -1,    -1,    68,    -1,    70,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    83,    84,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    95,    96,    97,    98,    99,   100,
      -1,   102,    -1,   104,   105,    -1,    -1,   108,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     121,    -1,   123,   124,    -1,   126,    -1,   128,     1,   130,
       3,     4,     5,     6,     7,     8,    -1,    10,    11,    12,
      13,    14,    -1,    -1,    17,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    -1,    -1,    30,    -1,    -1,
      -1,    34,    35,    -1,    37,    38,    39,    -1,    -1,    42,
      43,    44,    45,    -1,    47,    48,    -1,    -1,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,
      63,    -1,    -1,    -1,    -1,    68,    -1,    70,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      83,    84,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    95,    96,    97,    98,    99,   100,   101,   102,
      -1,   104,   105,    -1,    -1,   108,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,    -1,
     123,   124,    -1,   126,    -1,   128,     1,   130,     3,     4,
       5,     6,     7,     8,    -1,    10,    11,    12,    13,    14,
      -1,    -1,    17,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    -1,    -1,    30,    -1,    -1,    -1,    34,
      35,    -1,    37,    38,    39,    40,    -1,    42,    43,    44,
      45,    -1,    47,    48,    -1,    -1,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    63,    -1,
      -1,    -1,    -1,    68,    -1,    70,    71,    72,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    83,    84,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      95,    96,    97,    98,    99,   100,    -1,   102,    -1,   104,
     105,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   121,    -1,   123,   124,
      -1,   126,    -1,   128,     1,   130,     3,     4,     5,     6,
       7,     8,    -1,    10,    11,    12,    13,    14,    -1,    -1,
      17,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    -1,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,
      37,    38,    39,    -1,    -1,    42,    43,    44,    45,    -1,
      47,    48,    -1,    -1,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    61,    62,    63,    -1,    -1,    -1,
      -1,    68,    -1,    70,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    83,    84,    85,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,
      97,    98,    99,   100,   101,   102,    -1,   104,   105,    -1,
      -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   121,    -1,   123,   124,    -1,   126,
      -1,   128,     1,   130,     3,     4,     5,     6,     7,     8,
      -1,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    -1,
      -1,    30,    -1,    -1,    -1,    34,    35,    -1,    37,    -1,
      -1,    -1,    -1,    42,    43,    44,    45,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    62,    63,    -1,    -1,    -1,    -1,    68,
      -1,    70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    83,    84,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,    98,
      99,   100,    -1,   102,    -1,   104,   105,    -1,    -1,   108,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   121,    -1,   123,   124,    -1,   126,    -1,   128,
       1,   130,     3,     4,     5,     6,     7,     8,    -1,    10,
      11,    12,    13,    14,    -1,    -1,    17,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    -1,    -1,    30,
      -1,    -1,    -1,    34,    35,    -1,    37,    38,    39,    40,
      -1,    42,    43,    44,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      61,    62,    63,    -1,    -1,    -1,    -1,    68,    -1,    70,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    83,    84,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    95,    96,    97,    98,    99,   100,
      -1,   102,    -1,   104,   105,    -1,    -1,   108,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     121,    -1,   123,   124,    -1,   126,    -1,   128,     1,   130,
       3,     4,     5,     6,     7,     8,    -1,    10,    11,    12,
      13,    14,    -1,    -1,    17,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    -1,    -1,    30,    -1,    -1,
      -1,    34,    35,    -1,    37,    38,    39,    -1,    -1,    42,
      43,    44,    45,    -1,    47,    48,    -1,    -1,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,
      63,    -1,    -1,    -1,    -1,    68,    -1,    70,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      83,    84,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    95,    96,    97,    98,    99,   100,   101,   102,
      -1,   104,   105,    -1,    -1,   108,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,    -1,
     123,   124,    -1,   126,    -1,   128,     1,   130,     3,     4,
       5,     6,     7,     8,    -1,    10,    11,    12,    13,    14,
      -1,    -1,    17,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    -1,    -1,    30,    -1,    -1,    -1,    34,
      35,    -1,    37,    -1,    39,    40,    -1,    42,    43,    44,
      45,    -1,    47,    48,    -1,    -1,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    63,    -1,
      -1,    -1,    -1,    68,    -1,    70,    71,    72,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    83,    84,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      95,    96,    97,    98,    99,   100,    -1,   102,    -1,   104,
     105,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   121,    -1,   123,   124,
      -1,   126,    -1,   128,     1,   130,     3,     4,     5,     6,
       7,     8,    -1,    10,    11,    12,    13,    14,    -1,    -1,
      17,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    -1,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,
      37,    -1,    -1,    -1,    -1,    42,    43,    44,    45,    -1,
      47,    48,    -1,    -1,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    61,    62,    63,    -1,    -1,    66,
      67,    68,    -1,    70,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    83,    84,    85,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,
      97,    98,    99,   100,    -1,   102,    -1,   104,   105,    -1,
      -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   121,    -1,   123,   124,    -1,   126,
      -1,   128,     1,   130,     3,     4,     5,     6,     7,     8,
      -1,    10,    11,    12,    13,    14,    -1,    -1,    17,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    -1,
      -1,    30,    -1,    -1,    -1,    34,    35,    -1,    37,    -1,
      -1,    -1,    -1,    42,    43,    44,    45,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    62,    63,    -1,    -1,    -1,    -1,    68,
      -1,    70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    83,    84,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,    98,
      99,   100,    -1,   102,   103,   104,   105,    -1,    -1,   108,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   121,    -1,   123,   124,    -1,   126,    -1,   128,
       1,   130,     3,     4,     5,     6,     7,     8,    -1,    10,
      11,    12,    13,    14,    -1,    -1,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    -1,    -1,    30,
      -1,    -1,    -1,    34,    35,    -1,    37,    -1,    -1,    -1,
      -1,    42,    43,    44,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      61,    62,    63,    -1,    -1,    -1,    -1,    68,    -1,    70,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    83,    84,    85,    86,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    95,    96,    97,    98,    99,   100,
      -1,   102,    -1,   104,   105,    -1,    -1,   108,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     121,    -1,   123,   124,    -1,   126,    -1,   128,     1,   130,
       3,     4,     5,     6,     7,     8,    -1,    10,    11,    12,
      13,    14,    -1,    -1,    17,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    -1,    -1,    -1,    30,    -1,    -1,
      -1,    34,    35,    -1,    37,    -1,    -1,    -1,    41,    42,
      43,    44,    45,    -1,    47,    48,    -1,    -1,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    62,
      63,    -1,    -1,    -1,    -1,    68,    -1,    70,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      83,    84,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    95,    96,    97,    98,    99,   100,    -1,   102,
      -1,   104,   105,    -1,    -1,   108,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,    -1,
     123,   124,    -1,   126,    -1,   128,     1,   130,     3,     4,
       5,     6,     7,     8,    -1,    10,    11,    12,    13,    14,
      -1,    -1,    17,    -1,    19,    20,    21,    22,    23,    24,
      25,    26,    -1,    -1,    -1,    30,    -1,    -1,    -1,    34,
      35,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,
      45,    46,    47,    48,    -1,    -1,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    61,    62,    63,    -1,
      -1,    -1,    -1,    68,    -1,    70,    71,    72,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    83,    84,
      85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      95,    96,    97,    98,    99,   100,    -1,   102,    -1,   104,
     105,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   121,    -1,   123,   124,
      -1,   126,    -1,   128,     1,   130,     3,     4,     5,     6,
       7,     8,    -1,    10,    11,    12,    13,    14,    -1,    -1,
      17,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      -1,    -1,    -1,    30,    -1,    -1,    -1,    34,    35,    -1,
      37,    -1,    -1,    -1,    -1,    42,    43,    44,    45,    -1,
      47,    48,    -1,    -1,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    61,    62,    63,    -1,    -1,    -1,
      67,    68,    -1,    70,    71,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    83,    84,    85,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,
      97,    98,    99,   100,    -1,   102,    -1,   104,   105,    -1,
      -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   121,    -1,   123,   124,    -1,   126,
      -1,   128,     1,   130,     3,     4,     5,     6,     7,     8,
      -1,    10,    11,    12,    13,    14,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    25,    26,    -1,    -1,
      -1,    30,    -1,    -1,    -1,    34,    35,    -1,    37,    -1,
      -1,    -1,    -1,    42,    43,    44,    45,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    62,    63,    -1,    -1,    -1,    -1,    68,
      -1,    70,    71,    72,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    83,    84,    85,    86,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    97,    98,
      99,   100,    -1,   102,    -1,   104,   105,    -1,    -1,   108,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   121,    -1,   123,   124,    -1,   126,    -1,   128,
     129,   130,     5,    -1,     7,     8,    -1,    10,    11,    12,
      13,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    -1,    26,    -1,    -1,    29,    30,    -1,    -1,
      -1,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      -1,    44,    -1,    -1,    47,    48,    -1,    -1,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    -1,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    95,    96,    -1,    -1,    99,    -1,    -1,    -1,
      -1,   104,   105,   106,    -1,   108,    -1,    -1,    -1,    -1,
      -1,   114,   115,    -1,    -1,    -1,    -1,    -1,   121,   122,
      -1,    -1,    -1,   126,    -1,   128,     5,   130,     7,     8,
      -1,    10,    11,    12,    13,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    -1,    26,    -1,    -1,
      29,    30,    -1,    -1,    -1,    34,    35,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    -1,    44,    -1,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    70,    -1,    72,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    95,    96,    -1,    -1,
      99,    -1,    -1,    -1,    -1,   104,   105,   106,    -1,   108,
      -1,    -1,    -1,    -1,    -1,   114,   115,    -1,    -1,    -1,
      -1,    -1,   121,   122,    -1,    -1,    -1,   126,    -1,   128,
       5,   130,     7,     8,    -1,    10,    11,    12,    13,    -1,
      -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
      -1,    26,    -1,    -1,    29,    30,    -1,    -1,    -1,    34,
      35,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    44,
      -1,    -1,    47,    48,    -1,    -1,    51,    52,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    70,    -1,    72,    73,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      95,    96,    -1,    -1,    99,    -1,    -1,    -1,    -1,   104,
     105,    -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,   114,
     115,    -1,    -1,    -1,    -1,    -1,   121,   122,    -1,    -1,
      -1,   126,    -1,   128,     5,   130,     7,     8,    -1,    10,
      11,    12,    13,    -1,    -1,    -1,    -1,    -1,    19,    20,
      21,    22,    23,    24,    -1,    26,    -1,    -1,    29,    30,
      -1,    -1,    -1,    34,    35,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    -1,    44,    -1,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
      -1,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    95,    96,    -1,    -1,    99,    -1,
      -1,    -1,    -1,   104,   105,    -1,    -1,   108,    -1,    -1,
      -1,    -1,    -1,   114,   115,    -1,    -1,    -1,    -1,    -1,
     121,   122,    -1,    -1,    -1,   126,    -1,   128,     5,   130,
       7,     8,    -1,    10,    11,    12,    13,    -1,    -1,    -1,
      -1,    -1,    19,    20,    21,    22,    23,    24,    -1,    26,
      -1,    -1,    29,    30,    -1,    -1,    -1,    34,    35,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,    -1,
      47,    48,    -1,    -1,    51,    52,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    70,    -1,    72,    73,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    96,
      -1,    -1,    99,    -1,    -1,    -1,    -1,   104,   105,    -1,
      -1,   108,    -1,    -1,    -1,    -1,    -1,   114,   115,    -1,
      -1,    -1,    -1,    -1,   121,   122,    -1,    -1,    -1,   126,
      -1,   128,     5,   130,     7,     8,    -1,    10,    11,    12,
      13,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
      23,    24,    -1,    26,    -1,    -1,    29,    30,    -1,    -1,
      -1,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      -1,    44,    -1,    -1,    47,    48,    -1,    -1,    51,    52,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    -1,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    95,    96,    -1,    -1,    99,    -1,    -1,    -1,
      -1,   104,   105,    -1,    -1,   108,    -1,    -1,    -1,    -1,
      -1,   114,   115,    -1,    -1,    -1,    -1,    -1,   121,   122,
      -1,    -1,    -1,   126,    -1,   128,     5,   130,     7,     8,
      -1,    10,    11,    12,    13,    -1,    -1,    -1,    -1,    -1,
      19,    20,    21,    22,    23,    24,    -1,    26,    -1,    -1,
      -1,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    -1,    44,    -1,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    -1,    -1,    -1,    -1,     9,    -1,    -1,
      -1,    70,    -1,    72,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,
      -1,    -1,    34,    35,    36,    -1,    95,    96,    -1,    -1,
      99,    -1,    -1,    -1,    -1,   104,   105,    -1,    -1,   108,
      -1,    -1,    54,    55,    56,    57,    -1,    59,    60,    -1,
      -1,    -1,   121,    -1,    -1,    -1,    -1,   126,     9,   128,
      -1,   130,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    -1,    -1,    -1,    -1,    87,    88,    89,    90,    91,
      92,    93,    94,    34,    35,    36,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    54,    55,    56,    57,    -1,    59,    60,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,     9,
     132,    -1,    -1,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    -1,    -1,    -1,    -1,    87,    88,    89,    90,
      91,    92,    93,    94,    34,    35,    36,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    54,    55,    56,    57,    -1,    59,
      60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   130,
      -1,   132,    -1,    -1,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    -1,    -1,    -1,    -1,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    -1,    26,    -1,    -1,
      -1,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     130,    -1,   132,    42,    -1,    44,    -1,    -1,    47,    48,
       5,    -1,    -1,    52,    53,    -1,    11,    12,    -1,    -1,
      -1,    -1,    61,    -1,    -1,    -1,    -1,    22,    23,    24,
      -1,    26,    -1,    72,    73,    30,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    84,    -1,    42,    -1,    44,
      -1,    -1,    47,    48,    -1,     5,    95,    52,    53,    -1,
      99,    11,    12,    -1,    -1,    -1,    61,    -1,    -1,   108,
      -1,    -1,    22,    23,    24,    -1,    26,    -1,    -1,    -1,
      30,    -1,   121,    -1,    -1,    -1,    -1,   126,    -1,    84,
      -1,    -1,    42,    -1,    44,    -1,    -1,    47,    48,     5,
      95,    -1,    52,    53,    99,    11,    12,    -1,    -1,    -1,
      -1,    61,    -1,   108,    -1,    -1,    22,    23,    24,    -1,
      26,    -1,    -1,    -1,    30,    -1,    -1,   122,    -1,    -1,
      -1,    -1,    -1,    -1,    84,    -1,    42,    -1,    44,    -1,
      -1,    47,    48,    -1,     5,    95,    52,    53,    -1,    99,
      11,    12,    -1,    -1,    -1,    61,    -1,    -1,   108,    -1,
      -1,    22,    23,    24,    -1,    26,    -1,    -1,    -1,    30,
      -1,    -1,   122,    -1,    -1,    -1,    -1,    -1,    84,    -1,
      -1,    42,    -1,    44,    -1,    -1,    47,    48,     5,    95,
      -1,    52,    53,    99,    11,    12,    -1,    -1,    -1,    -1,
      61,    -1,   108,    -1,    -1,    22,    23,    24,    -1,    26,
      -1,    -1,    -1,    30,    -1,    -1,   122,    -1,    -1,    -1,
      -1,    -1,    -1,    84,    -1,    42,    -1,    44,    -1,    -1,
      47,    48,    -1,     5,    95,    52,    53,    -1,    99,    11,
      12,    -1,    -1,    -1,    61,    -1,    -1,   108,    -1,    -1,
      22,    23,    24,    -1,    26,    72,    73,    -1,    30,    -1,
      -1,   122,    -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,
      42,    -1,    44,    -1,    -1,    47,    48,     5,    95,    -1,
      52,    53,    99,    11,    12,    -1,    -1,    -1,    -1,    61,
      -1,   108,    -1,    -1,    22,    23,    24,    -1,    26,    -1,
      72,    73,    30,    -1,   121,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    -1,    42,    -1,    44,    -1,    -1,    47,
      48,    -1,    -1,    95,    52,    53,    -1,    99,    -1,    -1,
      -1,    -1,    -1,    61,    -1,    -1,   108,    -1,    -1,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    11,    12,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    84,    22,    23,    24,
      -1,    26,    -1,    -1,    -1,    30,    -1,    95,    -1,    -1,
      -1,    99,    -1,    -1,    -1,    -1,    -1,    42,   106,    44,
     108,    -1,    47,    48,     5,    -1,    -1,    52,    53,    -1,
      11,    12,    -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,
      -1,    22,    23,    24,    -1,    26,    -1,    -1,    -1,    30,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,
      -1,    42,    -1,    44,    -1,    -1,    47,    48,    -1,    -1,
      95,    52,    53,    -1,    99,    -1,    -1,    -1,    -1,    -1,
      61,   106,    -1,   108,    -1,    -1,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    11,    12,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    84,    22,    23,    24,    -1,    26,    -1,
      -1,    -1,    30,    -1,    95,    -1,    -1,    -1,    99,    -1,
      -1,    -1,    -1,    -1,    42,   106,    44,   108,    -1,    47,
      48,    -1,    -1,    -1,    52,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    61,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    -1,    -1,    -1,    -1,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    84,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    -1,    -1,
      -1,    99,    -1,    -1,    -1,    -1,    -1,    -1,   106,    -1,
     108,    -1,    -1,    -1,    -1,    -1,   126,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    -1,    -1,    -1,    -1,
      87,    88,    89,    90,    91,    92,    93,    94,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    -1,    -1,    -1,
      -1,    87,    88,    89,    90,    91,    92,    93,    94,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    -1,   126,
      -1,    -1,    87,    88,    89,    90,    91,    92,    93,    94,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    -1,
     126,    -1,    -1,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   126
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     1,     5,     6,     7,     8,    10,    11,    12,    13,
      14,    19,    20,    21,    22,    23,    24,    25,    26,    30,
      34,    35,    37,    42,    43,    44,    45,    47,    48,    51,
      52,    53,    61,    62,    63,    68,    70,    71,    72,    73,
      83,    84,    85,    86,    95,    96,    97,    98,    99,   100,
     102,   104,   105,   108,   121,   123,   124,   126,   128,   130,
     135,   136,   137,   138,   143,   150,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,   186,   187,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   199,   200,   201,   202,   203,
     204,   206,   211,   213,   214,   215,   216,   222,   224,   225,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   242,
     247,   252,   253,   254,   255,   256,   268,   272,   275,   291,
     292,   293,   305,   308,   310,   320,   323,   326,   338,   343,
     347,   349,   356,   368,   372,   375,   375,   152,   159,   160,
      36,    36,   257,   258,   126,    11,    12,    22,    23,    24,
      26,    29,    30,    42,    44,    51,    53,    61,    95,   108,
     114,   115,   122,   169,   170,   171,   173,   175,   178,   180,
     182,   184,   186,   189,   191,   193,   195,   199,   200,   201,
     204,   205,   211,   215,   217,   218,   222,   224,   225,   226,
     228,   235,   236,   237,   238,   247,   251,   252,   254,   168,
     166,   168,   167,   168,   159,   153,   218,   218,   309,   273,
     159,   168,   191,   193,   199,   200,   201,   204,   211,   215,
     221,   222,   252,   254,    36,   269,   260,   155,   357,   151,
     159,   191,   193,   195,    10,   168,   168,   128,   168,   281,
      19,   158,   243,    69,   369,   168,   199,   252,   334,   335,
     348,   218,    12,   126,   252,   122,   251,   106,   107,   122,
     188,   208,   209,   210,   218,   220,   241,   168,   195,   212,
       0,     1,   137,   138,   150,   275,   375,     3,     4,    36,
     126,   132,   239,   240,   239,   239,   168,   195,   198,   252,
      36,   239,   198,    36,   239,   198,   198,    36,   239,   198,
      36,   239,   198,    36,   239,   198,    36,   198,    36,   239,
     198,   239,   198,   252,    36,   198,   252,    36,   198,   252,
     126,   159,   239,     8,    10,   168,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   190,   192,   194,   198,   247,   252,   253,   254,
     255,   198,   239,   159,   239,    36,   198,    36,   159,   239,
     198,    36,   126,   239,   130,   198,    36,   159,   239,   198,
       9,    34,    35,    54,    55,    56,    57,    59,    60,   110,
     130,   223,   159,   159,   159,   159,   159,   248,   375,    36,
     239,    36,   159,   239,   198,   252,    36,   159,   239,   198,
     159,    15,    16,    17,    18,   296,   298,   303,   304,     1,
      12,    25,    26,   137,   150,   161,   162,   163,   164,   275,
     375,    17,    38,    39,    40,   306,   307,   311,   316,   251,
     164,    17,   101,   344,   345,   346,   159,   218,   375,   168,
     261,   264,   261,   218,   218,   218,   218,   168,   203,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    87,    88,
      89,    90,    91,    92,    93,    94,   147,   148,   147,   147,
     147,   147,    27,    28,    31,    32,    33,    49,    50,    58,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   125,
     294,   147,   157,   125,   375,   125,   375,   191,   262,   263,
     264,   375,   168,   274,     9,   110,   330,   196,   168,   270,
     274,   262,    69,   362,   218,   369,    19,   375,   126,   277,
     168,   375,   145,   147,   126,   375,   114,   127,   106,   168,
     244,   245,   125,   168,   205,   209,   217,   218,   252,   370,
     371,    52,   125,   218,   375,   259,   168,   127,   129,   168,
     191,   199,   201,   203,   211,   125,   129,   107,   125,   129,
     375,   168,   168,   207,   210,   218,   106,   218,   219,   125,
     131,   207,   207,   212,   218,   218,   218,   218,   218,   218,
     218,   218,   212,   218,   246,   250,   375,   299,   303,    16,
     296,   303,     3,     4,   161,   312,   317,    38,   306,   316,
      39,   306,   375,    38,    39,   350,   353,   375,   132,   145,
     266,   267,   125,   375,   375,   125,   168,   168,   218,   218,
     218,   218,   218,   218,   218,   218,   218,   218,   218,   218,
     218,   218,   218,   218,   218,   218,   375,   375,   168,   168,
     145,   266,   125,   154,   145,   125,   375,   218,   145,    52,
     125,   271,   375,   156,   218,   375,   375,   122,   375,   276,
     168,   280,   281,   283,   375,   278,   282,    19,   375,   145,
     133,   125,   371,   125,   122,   218,   336,   337,   334,   375,
     373,   261,   127,   218,   220,   210,   139,   141,   140,   142,
     125,   127,   219,   132,   127,   127,   125,   249,   164,   165,
     297,   251,   301,   303,   168,   168,   251,   375,   314,   306,
     319,   321,   218,   354,    38,   345,   353,   218,   265,   146,
     148,   125,   131,   264,   208,   295,     9,   146,   263,   375,
     168,   327,   168,   168,   375,   375,   165,    19,    84,   122,
     168,   285,   289,   290,   284,   281,   283,   375,   168,   279,
     283,   106,   286,   289,   290,   106,   168,   371,   168,   125,
     339,   165,   375,   107,   375,   126,   375,   126,   210,   219,
     218,   129,   129,   165,   375,   251,   126,   375,   126,   375,
     375,   318,   251,   375,   165,   351,   375,   218,     9,   218,
     132,   125,   165,   218,   145,    47,   145,   358,   375,   122,
     168,   168,   145,   127,   125,   125,   145,   125,   129,   127,
     125,   145,   336,    99,   342,    17,   103,   374,   220,   106,
     144,   149,   168,   144,   300,   375,   144,   144,   313,   165,
     375,   165,   322,   375,   355,   352,   218,   218,   208,   251,
      64,    65,   365,   366,   367,   168,   145,   126,   145,   145,
     122,   168,   290,    84,   283,   375,   145,   106,   290,   340,
     127,   125,   145,   127,   165,   302,   127,   127,   165,   315,
      17,    41,   324,   325,   165,   165,   375,   127,    48,   331,
     168,   359,   375,   375,   126,   145,   220,   287,   288,   375,
     168,   145,   122,   168,   125,   375,   375,   106,   168,   375,
     165,   375,   375,   165,   165,   251,   328,    66,   363,   364,
     165,   165,   287,   125,   127,   126,   145,   168,   145,   106,
     341,   145,   375,   360,   375,   127,   288,   287,   126,   145,
     165,   332,   329,    17,    67,   361,   165,   127,   287,    17,
      46,   333,   332,   127,   168,   168
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (pComp, YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* This macro is provided for backward compatibility. */

#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, pComp)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, pComp); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, PHB_COMP pComp)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, pComp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    PHB_COMP pComp;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (pComp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, PHB_COMP pComp)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, pComp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    PHB_COMP pComp;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, pComp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule, PHB_COMP pComp)
#else
static void
yy_reduce_print (yyvsp, yyrule, pComp)
    YYSTYPE *yyvsp;
    int yyrule;
    PHB_COMP pComp;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       , pComp);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule, pComp); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (0, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  YYSIZE_T yysize1;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = 0;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - Assume YYFAIL is not used.  It's too flawed to consider.  See
       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
       for details.  YYERROR is fine as it does not invoke this
       function.
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                yysize1 = yysize + yytnamerr (0, yytname[yyx]);
                if (! (yysize <= yysize1
                       && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                  return 2;
                yysize = yysize1;
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  yysize1 = yysize + yystrlen (yyformat);
  if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
    return 2;
  yysize = yysize1;

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, PHB_COMP pComp)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, pComp)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    PHB_COMP pComp;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (pComp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {
      case 19: /* "LITERAL" */

/* Line 1391 of yacc.c  */
#line 283 "harbour.y"
	{ if( (yyvaluep->valChar).dealloc ) hb_xfree( (yyvaluep->valChar).string ); };

/* Line 1391 of yacc.c  */
#line 3943 "harboury.c"
	break;
      case 96: /* "CBSTART" */

/* Line 1391 of yacc.c  */
#line 282 "harbour.y"
	{ if( (yyvaluep->asCodeblock).string )  hb_xfree( (yyvaluep->asCodeblock).string ); };

/* Line 1391 of yacc.c  */
#line 3952 "harboury.c"
	break;

      default:
	break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (PHB_COMP pComp);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */


/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (PHB_COMP pComp)
#else
int
yyparse (pComp)
    PHB_COMP pComp;
#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 9:

/* Line 1806 of yacc.c  */
#line 296 "harbour.y"
    { yyclearin; yyerrok; }
    break;

  case 15:

/* Line 1806 of yacc.c  */
#line 302 "harbour.y"
    { yyclearin; yyerrok; }
    break;

  case 16:

/* Line 1806 of yacc.c  */
#line 306 "harbour.y"
    { HB_COMP_PARAM->currLine = ( int ) (yyvsp[(2) - (3)].valLong).lNumber;
                    HB_COMP_PARAM->pLex->fEol = HB_FALSE; }
    break;

  case 17:

/* Line 1806 of yacc.c  */
#line 309 "harbour.y"
    { HB_COMP_PARAM->currModule = hb_compIdentifierNew( HB_COMP_PARAM, (yyvsp[(3) - (4)].valChar).string, (yyvsp[(3) - (4)].valChar).dealloc ? HB_IDENT_FREE : HB_IDENT_STATIC );
                    HB_COMP_PARAM->currLine = ( int ) (yyvsp[(2) - (4)].valLong).lNumber;
                    HB_COMP_PARAM->pLex->fEol = HB_FALSE;
                    (yyvsp[(3) - (4)].valChar).dealloc = HB_FALSE; }
    break;

  case 18:

/* Line 1806 of yacc.c  */
#line 314 "harbour.y"
    { HB_COMP_PARAM->currModule = hb_compIdentifierNew( HB_COMP_PARAM, (yyvsp[(5) - (6)].valChar).string, (yyvsp[(5) - (6)].valChar).dealloc ? HB_IDENT_FREE : HB_IDENT_STATIC );
                    HB_COMP_PARAM->currLine = ( int ) (yyvsp[(2) - (6)].valLong).lNumber;
                    HB_COMP_PARAM->pLex->fEol = HB_FALSE;
                    if( (yyvsp[(3) - (6)].valChar).dealloc ) { hb_xfree( (yyvsp[(3) - (6)].valChar).string ); (yyvsp[(3) - (6)].valChar).dealloc = HB_FALSE; }
                    (yyvsp[(5) - (6)].valChar).dealloc = HB_FALSE; }
    break;

  case 19:

/* Line 1806 of yacc.c  */
#line 321 "harbour.y"
    { hb_compFunctionAdd( HB_COMP_PARAM, (yyvsp[(3) - (3)].string), ( HB_SYMBOLSCOPE ) (yyvsp[(1) - (3)].iNumber), 0 ); }
    break;

  case 21:

/* Line 1806 of yacc.c  */
#line 322 "harbour.y"
    { hb_compFunctionAdd( HB_COMP_PARAM, (yyvsp[(3) - (3)].string), ( HB_SYMBOLSCOPE ) (yyvsp[(1) - (3)].iNumber), HB_FUNF_PROCEDURE ); }
    break;

  case 23:

/* Line 1806 of yacc.c  */
#line 323 "harbour.y"
    { hb_compFunctionAdd( HB_COMP_PARAM, (yyvsp[(3) - (3)].string), ( HB_SYMBOLSCOPE ) (yyvsp[(1) - (3)].iNumber), 0 ); HB_COMP_PARAM->iVarScope = HB_VSCOMP_PARAMETER; }
    break;

  case 25:

/* Line 1806 of yacc.c  */
#line 324 "harbour.y"
    { hb_compFunctionAdd( HB_COMP_PARAM, (yyvsp[(3) - (3)].string), ( HB_SYMBOLSCOPE ) (yyvsp[(1) - (3)].iNumber), HB_FUNF_PROCEDURE ); HB_COMP_PARAM->iVarScope = HB_VSCOMP_PARAMETER;}
    break;

  case 27:

/* Line 1806 of yacc.c  */
#line 327 "harbour.y"
    { (yyval.iNumber) = HB_FS_PUBLIC; }
    break;

  case 28:

/* Line 1806 of yacc.c  */
#line 328 "harbour.y"
    { (yyval.iNumber) = HB_FS_STATIC; }
    break;

  case 29:

/* Line 1806 of yacc.c  */
#line 329 "harbour.y"
    { (yyval.iNumber) = HB_FS_INIT; }
    break;

  case 30:

/* Line 1806 of yacc.c  */
#line 330 "harbour.y"
    { (yyval.iNumber) = HB_FS_EXIT; }
    break;

  case 31:

/* Line 1806 of yacc.c  */
#line 333 "harbour.y"
    { (yyval.iNumber) = 0; }
    break;

  case 32:

/* Line 1806 of yacc.c  */
#line 334 "harbour.y"
    { HB_COMP_PARAM->functions.pLast->fVParams = HB_TRUE; (yyval.iNumber) = 0; }
    break;

  case 34:

/* Line 1806 of yacc.c  */
#line 336 "harbour.y"
    { HB_COMP_PARAM->functions.pLast->fVParams = HB_TRUE; (yyval.iNumber) = (yyvsp[(1) - (3)].iNumber); }
    break;

  case 35:

/* Line 1806 of yacc.c  */
#line 339 "harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, ' ', NULL ); }
    break;

  case 37:

/* Line 1806 of yacc.c  */
#line 343 "harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, ' ', NULL ); }
    break;

  case 39:

/* Line 1806 of yacc.c  */
#line 347 "harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'N', NULL ); }
    break;

  case 40:

/* Line 1806 of yacc.c  */
#line 348 "harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'C', NULL ); }
    break;

  case 41:

/* Line 1806 of yacc.c  */
#line 349 "harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'D', NULL ); }
    break;

  case 42:

/* Line 1806 of yacc.c  */
#line 350 "harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'L', NULL ); }
    break;

  case 43:

/* Line 1806 of yacc.c  */
#line 351 "harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'B', NULL ); }
    break;

  case 44:

/* Line 1806 of yacc.c  */
#line 352 "harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'O', NULL ); }
    break;

  case 45:

/* Line 1806 of yacc.c  */
#line 353 "harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'S', (yyvsp[(2) - (2)].string) );   }
    break;

  case 46:

/* Line 1806 of yacc.c  */
#line 354 "harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, ' ', NULL ); }
    break;

  case 48:

/* Line 1806 of yacc.c  */
#line 358 "harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'A', NULL ); }
    break;

  case 49:

/* Line 1806 of yacc.c  */
#line 359 "harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'n', NULL ); }
    break;

  case 50:

/* Line 1806 of yacc.c  */
#line 360 "harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'c', NULL ); }
    break;

  case 51:

/* Line 1806 of yacc.c  */
#line 361 "harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'd', NULL ); }
    break;

  case 52:

/* Line 1806 of yacc.c  */
#line 362 "harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'l', NULL ); }
    break;

  case 53:

/* Line 1806 of yacc.c  */
#line 363 "harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'a', NULL ); }
    break;

  case 54:

/* Line 1806 of yacc.c  */
#line 364 "harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'b', NULL ); }
    break;

  case 55:

/* Line 1806 of yacc.c  */
#line 365 "harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 'o', NULL ); }
    break;

  case 56:

/* Line 1806 of yacc.c  */
#line 366 "harbour.y"
    { (yyval.asVarType) = hb_compVarTypeNew( HB_COMP_PARAM, 's', (yyvsp[(2) - (2)].string) );   }
    break;

  case 57:

/* Line 1806 of yacc.c  */
#line 369 "harbour.y"
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(1) - (2)].string), (yyvsp[(2) - (2)].asVarType) ); (yyval.iNumber) = 1; }
    break;

  case 58:

/* Line 1806 of yacc.c  */
#line 370 "harbour.y"
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(3) - (4)].string), (yyvsp[(4) - (4)].asVarType) ); (yyval.iNumber)++; }
    break;

  case 60:

/* Line 1806 of yacc.c  */
#line 379 "harbour.y"
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
    break;

  case 61:

/* Line 1806 of yacc.c  */
#line 380 "harbour.y"
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
    break;

  case 62:

/* Line 1806 of yacc.c  */
#line 381 "harbour.y"
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
    break;

  case 63:

/* Line 1806 of yacc.c  */
#line 382 "harbour.y"
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
    break;

  case 64:

/* Line 1806 of yacc.c  */
#line 383 "harbour.y"
    { if( HB_COMP_ISSUPPORTED( HB_COMPFLAG_XBASE ) )
                                         HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ) );
                                      else
                                         HB_COMP_EXPR_FREE( HB_COMP_ERROR_SYNTAX( (yyvsp[(1) - (2)].asExpr) ) );
                                       HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN;
                                    }
    break;

  case 65:

/* Line 1806 of yacc.c  */
#line 389 "harbour.y"
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
    break;

  case 66:

/* Line 1806 of yacc.c  */
#line 390 "harbour.y"
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
    break;

  case 67:

/* Line 1806 of yacc.c  */
#line 391 "harbour.y"
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
    break;

  case 68:

/* Line 1806 of yacc.c  */
#line 392 "harbour.y"
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
    break;

  case 69:

/* Line 1806 of yacc.c  */
#line 393 "harbour.y"
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
    break;

  case 70:

/* Line 1806 of yacc.c  */
#line 394 "harbour.y"
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
    break;

  case 71:

/* Line 1806 of yacc.c  */
#line 395 "harbour.y"
    { HB_COMP_EXPR_FREE( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ) ); HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN; }
    break;

  case 72:

/* Line 1806 of yacc.c  */
#line 396 "harbour.y"
    { hb_compGenBreak( HB_COMP_PARAM ); hb_compGenPCode2( HB_P_DOSHORT, 0, HB_COMP_PARAM );
                                      HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_BREAK_CODE; }
    break;

  case 73:

/* Line 1806 of yacc.c  */
#line 398 "harbour.y"
    { hb_compLinePushIfInside( HB_COMP_PARAM ); }
    break;

  case 74:

/* Line 1806 of yacc.c  */
#line 399 "harbour.y"
    {
                                       hb_compGenBreak( HB_COMP_PARAM ); HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[(3) - (4)].asExpr), HB_COMP_PARAM ) );
                                       hb_compGenPCode2( HB_P_DOSHORT, 1, HB_COMP_PARAM );
                                       HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_BREAK_CODE;
                                    }
    break;

  case 75:

/* Line 1806 of yacc.c  */
#line 404 "harbour.y"
    { hb_compLoopExit( HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_BREAK_CODE; }
    break;

  case 76:

/* Line 1806 of yacc.c  */
#line 405 "harbour.y"
    { hb_compLoopLoop( HB_COMP_PARAM ); HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_BREAK_CODE; }
    break;

  case 77:

/* Line 1806 of yacc.c  */
#line 406 "harbour.y"
    {
                        if( HB_COMP_PARAM->functions.pLast->wSeqCounter )
                        {
                           hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "RETURN", NULL );
                        }
                        hb_compGenPCode1( HB_P_ENDPROC, HB_COMP_PARAM );
                        if( ( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_PROCEDURE ) == 0 )
                        {
                           /* return from a function without a return value */
                           hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_NO_RETURN_VALUE, NULL, NULL );
                        }
                        HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE;
                     }
    break;

  case 78:

/* Line 1806 of yacc.c  */
#line 419 "harbour.y"
    {  hb_compLinePushIfInside( HB_COMP_PARAM ); }
    break;

  case 79:

/* Line 1806 of yacc.c  */
#line 421 "harbour.y"
    {
                        if( HB_COMP_PARAM->functions.pLast->wSeqCounter )
                        {
                           hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "RETURN", NULL );
                        }
                        /* TODO: check if return value agree with declared value */
                        HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[(3) - (4)].asExpr), HB_COMP_PARAM ) );
                        if( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_EXTBLOCK )
                           /* extended clodeblock, use HB_P_ENDBLOCK to return value and stop execution */
                           hb_compGenPCode1( HB_P_ENDBLOCK, HB_COMP_PARAM );
                        else
                           hb_compGenPCode2( HB_P_RETVALUE, HB_P_ENDPROC, HB_COMP_PARAM );
                        if( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_PROCEDURE )
                        {
                           /* procedure returns a value */
                           hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_PROC_RETURN_VALUE, NULL, NULL );
                        }
                        HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE;
                     }
    break;

  case 80:

/* Line 1806 of yacc.c  */
#line 440 "harbour.y"
    {  hb_compLinePushIfInside( HB_COMP_PARAM ); HB_COMP_PARAM->iVarScope = HB_VSCOMP_PUBLIC; }
    break;

  case 81:

/* Line 1806 of yacc.c  */
#line 442 "harbour.y"
    {  hb_compRTVariableGen( HB_COMP_PARAM, "__MVPUBLIC" );
                        HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE;
                        HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN;
                     }
    break;

  case 83:

/* Line 1806 of yacc.c  */
#line 446 "harbour.y"
    {  hb_compLinePushIfInside( HB_COMP_PARAM ); HB_COMP_PARAM->iVarScope = HB_VSCOMP_PRIVATE; }
    break;

  case 84:

/* Line 1806 of yacc.c  */
#line 448 "harbour.y"
    {  hb_compRTVariableGen( HB_COMP_PARAM, "__MVPRIVATE" );
                        HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE;
                        HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN;
                     }
    break;

  case 91:

/* Line 1806 of yacc.c  */
#line 457 "harbour.y"
    {
                  if( HB_COMP_PARAM->szAnnounce == NULL )
                     HB_COMP_PARAM->szAnnounce = (yyvsp[(2) - (2)].string);
                  else
                     hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_DUPL_ANNOUNCE, (yyvsp[(2) - (2)].string), NULL );
               }
    break;

  case 94:

/* Line 1806 of yacc.c  */
#line 466 "harbour.y"
    {
               if( (yyvsp[(1) - (1)].valChar).dealloc )
               {
                  (yyvsp[(1) - (1)].valChar).string = ( char * ) hb_compIdentifierNew( HB_COMP_PARAM, (yyvsp[(1) - (1)].valChar).string, HB_IDENT_FREE );
                  (yyvsp[(1) - (1)].valChar).dealloc = HB_FALSE;
               }
               hb_compModuleAdd( HB_COMP_PARAM, (yyvsp[(1) - (1)].valChar).string, HB_FALSE );
            }
    break;

  case 95:

/* Line 1806 of yacc.c  */
#line 474 "harbour.y"
    {
               {
                  char szFileName[ HB_PATH_MAX ];
                  hb_strncat( hb_strncpy( szFileName, (yyvsp[(1) - (3)].valChar).string, sizeof( szFileName ) - 1 ), (yyvsp[(3) - (3)].valChar).string, sizeof( szFileName ) - 1 );
                  hb_compModuleAdd( HB_COMP_PARAM, hb_compIdentifierNew( HB_COMP_PARAM, szFileName, HB_IDENT_COPY ), HB_FALSE );
                  if( (yyvsp[(1) - (3)].valChar).dealloc )
                  {
                     hb_xfree( (yyvsp[(1) - (3)].valChar).string );
                     (yyvsp[(1) - (3)].valChar).dealloc = HB_FALSE;
                  }
                  if( (yyvsp[(3) - (3)].valChar).dealloc )
                  {
                     hb_xfree( (yyvsp[(3) - (3)].valChar).string );
                     (yyvsp[(3) - (3)].valChar).dealloc = HB_FALSE;
                  }
               }
            }
    break;

  case 96:

/* Line 1806 of yacc.c  */
#line 493 "harbour.y"
    { hb_compLinePushIfInside( HB_COMP_PARAM ); }
    break;

  case 98:

/* Line 1806 of yacc.c  */
#line 496 "harbour.y"
    { (yyval.lNumber) = 0; }
    break;

  case 99:

/* Line 1806 of yacc.c  */
#line 497 "harbour.y"
    { (yyval.lNumber) = 1; }
    break;

  case 100:

/* Line 1806 of yacc.c  */
#line 498 "harbour.y"
    { (yyval.lNumber) = 1; }
    break;

  case 101:

/* Line 1806 of yacc.c  */
#line 499 "harbour.y"
    { (yyval.lNumber) = 0; }
    break;

  case 102:

/* Line 1806 of yacc.c  */
#line 500 "harbour.y"
    { (yyval.lNumber) = 0; hb_compCheckUnclosedStru( HB_COMP_PARAM, HB_COMP_PARAM->functions.pLast ); }
    break;

  case 103:

/* Line 1806 of yacc.c  */
#line 501 "harbour.y"
    { if( HB_COMP_PARAM->ilastLineErr && HB_COMP_PARAM->ilastLineErr == HB_COMP_PARAM->currLine )
                             {
                                yyclearin;
                             }
                             else
                             {
                                yyerrok;
                                HB_COMP_PARAM->ilastLineErr = HB_COMP_PARAM->currLine;
                             }
                             (yyval.lNumber) = 0;
                           }
    break;

  case 113:

/* Line 1806 of yacc.c  */
#line 527 "harbour.y"
    { (yyval.lNumber) += (yyvsp[(2) - (2)].lNumber); }
    break;

  case 114:

/* Line 1806 of yacc.c  */
#line 530 "harbour.y"
    { (yyval.lNumber) = 0; }
    break;

  case 116:

/* Line 1806 of yacc.c  */
#line 534 "harbour.y"
    { hb_compExternAdd( HB_COMP_PARAM, (yyvsp[(1) - (1)].string), 0 ); }
    break;

  case 117:

/* Line 1806 of yacc.c  */
#line 535 "harbour.y"
    { hb_compExternAdd( HB_COMP_PARAM, (yyvsp[(3) - (3)].string), 0 ); }
    break;

  case 118:

/* Line 1806 of yacc.c  */
#line 538 "harbour.y"
    { hb_compExternAdd( HB_COMP_PARAM, (yyvsp[(1) - (1)].string), HB_FS_DEFERRED ); }
    break;

  case 119:

/* Line 1806 of yacc.c  */
#line 539 "harbour.y"
    { hb_compExternAdd( HB_COMP_PARAM, (yyvsp[(3) - (3)].string), HB_FS_DEFERRED ); }
    break;

  case 121:

/* Line 1806 of yacc.c  */
#line 543 "harbour.y"
    { (yyval.string) = "STEP"; }
    break;

  case 122:

/* Line 1806 of yacc.c  */
#line 544 "harbour.y"
    { (yyval.string) = "TO"; }
    break;

  case 123:

/* Line 1806 of yacc.c  */
#line 545 "harbour.y"
    { (yyval.string) = "LOOP"; }
    break;

  case 124:

/* Line 1806 of yacc.c  */
#line 546 "harbour.y"
    { (yyval.string) = "EXIT"; }
    break;

  case 125:

/* Line 1806 of yacc.c  */
#line 547 "harbour.y"
    { (yyval.string) = "IN"; }
    break;

  case 126:

/* Line 1806 of yacc.c  */
#line 548 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); }
    break;

  case 127:

/* Line 1806 of yacc.c  */
#line 549 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); }
    break;

  case 128:

/* Line 1806 of yacc.c  */
#line 550 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); }
    break;

  case 129:

/* Line 1806 of yacc.c  */
#line 551 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); }
    break;

  case 130:

/* Line 1806 of yacc.c  */
#line 552 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); }
    break;

  case 131:

/* Line 1806 of yacc.c  */
#line 553 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); }
    break;

  case 132:

/* Line 1806 of yacc.c  */
#line 554 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); }
    break;

  case 133:

/* Line 1806 of yacc.c  */
#line 555 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); }
    break;

  case 134:

/* Line 1806 of yacc.c  */
#line 556 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); }
    break;

  case 135:

/* Line 1806 of yacc.c  */
#line 557 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); }
    break;

  case 136:

/* Line 1806 of yacc.c  */
#line 558 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); }
    break;

  case 137:

/* Line 1806 of yacc.c  */
#line 559 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); }
    break;

  case 138:

/* Line 1806 of yacc.c  */
#line 560 "harbour.y"
    { (yyval.string) = (yyvsp[(1) - (1)].string); }
    break;

  case 139:

/* Line 1806 of yacc.c  */
#line 565 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewDouble( (yyvsp[(1) - (1)].valDouble).dNumber, (yyvsp[(1) - (1)].valDouble).bWidth, (yyvsp[(1) - (1)].valDouble).bDec, HB_COMP_PARAM ); }
    break;

  case 140:

/* Line 1806 of yacc.c  */
#line 566 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewLong( (yyvsp[(1) - (1)].valLong).lNumber, HB_COMP_PARAM ); }
    break;

  case 141:

/* Line 1806 of yacc.c  */
#line 569 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewDate( ( long ) (yyvsp[(1) - (1)].valLong).lNumber, HB_COMP_PARAM ); }
    break;

  case 142:

/* Line 1806 of yacc.c  */
#line 572 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewTimeStamp( (yyvsp[(1) - (1)].valTimeStamp).date, (yyvsp[(1) - (1)].valTimeStamp).time, HB_COMP_PARAM ); }
    break;

  case 143:

/* Line 1806 of yacc.c  */
#line 575 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewLong( (yyvsp[(1) - (2)].valLong).lNumber, HB_COMP_PARAM ); }
    break;

  case 144:

/* Line 1806 of yacc.c  */
#line 576 "harbour.y"
    { (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, hb_compExprNewDouble( (yyvsp[(1) - (2)].valDouble).dNumber, (yyvsp[(1) - (2)].valDouble).bWidth, (yyvsp[(1) - (2)].valDouble).bDec, HB_COMP_PARAM ) ); }
    break;

  case 145:

/* Line 1806 of yacc.c  */
#line 581 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewNil( HB_COMP_PARAM ); }
    break;

  case 147:

/* Line 1806 of yacc.c  */
#line 589 "harbour.y"
    {
                                 (yyval.asExpr) = hb_compExprNewString( (yyvsp[(1) - (1)].valChar).string, (yyvsp[(1) - (1)].valChar).length, (yyvsp[(1) - (1)].valChar).dealloc, HB_COMP_PARAM );
                                 (yyvsp[(1) - (1)].valChar).dealloc = HB_FALSE;
                              }
    break;

  case 150:

/* Line 1806 of yacc.c  */
#line 605 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewLogical( HB_TRUE, HB_COMP_PARAM ); }
    break;

  case 151:

/* Line 1806 of yacc.c  */
#line 606 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewLogical( HB_FALSE, HB_COMP_PARAM ); }
    break;

  case 153:

/* Line 1806 of yacc.c  */
#line 614 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewSelf( HB_COMP_PARAM ); }
    break;

  case 155:

/* Line 1806 of yacc.c  */
#line 628 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArray( (yyvsp[(2) - (3)].asExpr), HB_COMP_PARAM ); }
    break;

  case 157:

/* Line 1806 of yacc.c  */
#line 636 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); }
    break;

  case 159:

/* Line 1806 of yacc.c  */
#line 642 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewHash( NULL, HB_COMP_PARAM ); }
    break;

  case 160:

/* Line 1806 of yacc.c  */
#line 643 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewHash( (yyvsp[(2) - (3)].asExpr), HB_COMP_PARAM ); }
    break;

  case 162:

/* Line 1806 of yacc.c  */
#line 649 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( hb_compExprNewList( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr) ); }
    break;

  case 163:

/* Line 1806 of yacc.c  */
#line 650 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( hb_compExprAddListExpr( (yyvsp[(1) - (5)].asExpr), (yyvsp[(3) - (5)].asExpr) ), (yyvsp[(5) - (5)].asExpr) ); }
    break;

  case 164:

/* Line 1806 of yacc.c  */
#line 655 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewVar( (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); }
    break;

  case 165:

/* Line 1806 of yacc.c  */
#line 658 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAlias( (yyvsp[(1) - (2)].string), HB_COMP_PARAM ); }
    break;

  case 166:

/* Line 1806 of yacc.c  */
#line 663 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewMacro( NULL, '&', (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); }
    break;

  case 167:

/* Line 1806 of yacc.c  */
#line 664 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewMacro( NULL, 0, (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); }
    break;

  case 169:

/* Line 1806 of yacc.c  */
#line 672 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewMacro( (yyvsp[(2) - (2)].asExpr), 0, NULL, HB_COMP_PARAM ); }
    break;

  case 173:

/* Line 1806 of yacc.c  */
#line 686 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAlias( "FIELD", HB_COMP_PARAM ); }
    break;

  case 174:

/* Line 1806 of yacc.c  */
#line 687 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(3) - (3)].asExpr); }
    break;

  case 175:

/* Line 1806 of yacc.c  */
#line 692 "harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); }
    break;

  case 176:

/* Line 1806 of yacc.c  */
#line 693 "harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); }
    break;

  case 177:

/* Line 1806 of yacc.c  */
#line 694 "harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); }
    break;

  case 178:

/* Line 1806 of yacc.c  */
#line 695 "harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); }
    break;

  case 179:

/* Line 1806 of yacc.c  */
#line 696 "harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); }
    break;

  case 180:

/* Line 1806 of yacc.c  */
#line 697 "harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); }
    break;

  case 181:

/* Line 1806 of yacc.c  */
#line 698 "harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); }
    break;

  case 182:

/* Line 1806 of yacc.c  */
#line 699 "harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); }
    break;

  case 183:

/* Line 1806 of yacc.c  */
#line 700 "harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); }
    break;

  case 184:

/* Line 1806 of yacc.c  */
#line 701 "harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); }
    break;

  case 185:

/* Line 1806 of yacc.c  */
#line 702 "harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); }
    break;

  case 186:

/* Line 1806 of yacc.c  */
#line 703 "harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); }
    break;

  case 187:

/* Line 1806 of yacc.c  */
#line 704 "harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); }
    break;

  case 188:

/* Line 1806 of yacc.c  */
#line 705 "harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); }
    break;

  case 189:

/* Line 1806 of yacc.c  */
#line 708 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewVar( (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); }
    break;

  case 191:

/* Line 1806 of yacc.c  */
#line 712 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); }
    break;

  case 192:

/* Line 1806 of yacc.c  */
#line 713 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); }
    break;

  case 193:

/* Line 1806 of yacc.c  */
#line 714 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); }
    break;

  case 194:

/* Line 1806 of yacc.c  */
#line 715 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); }
    break;

  case 195:

/* Line 1806 of yacc.c  */
#line 716 "harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(2) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); }
    break;

  case 196:

/* Line 1806 of yacc.c  */
#line 717 "harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(2) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); }
    break;

  case 197:

/* Line 1806 of yacc.c  */
#line 718 "harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(2) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); }
    break;

  case 198:

/* Line 1806 of yacc.c  */
#line 719 "harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(2) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); }
    break;

  case 199:

/* Line 1806 of yacc.c  */
#line 720 "harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(2) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); }
    break;

  case 200:

/* Line 1806 of yacc.c  */
#line 721 "harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(2) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); }
    break;

  case 201:

/* Line 1806 of yacc.c  */
#line 722 "harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(2) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); }
    break;

  case 202:

/* Line 1806 of yacc.c  */
#line 723 "harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(2) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); }
    break;

  case 203:

/* Line 1806 of yacc.c  */
#line 724 "harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(2) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); }
    break;

  case 204:

/* Line 1806 of yacc.c  */
#line 725 "harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(2) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); }
    break;

  case 205:

/* Line 1806 of yacc.c  */
#line 726 "harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(2) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); }
    break;

  case 206:

/* Line 1806 of yacc.c  */
#line 727 "harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(2) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); }
    break;

  case 207:

/* Line 1806 of yacc.c  */
#line 728 "harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(2) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(1) - (2)].asExpr) ); }
    break;

  case 208:

/* Line 1806 of yacc.c  */
#line 729 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); }
    break;

  case 209:

/* Line 1806 of yacc.c  */
#line 730 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); }
    break;

  case 210:

/* Line 1806 of yacc.c  */
#line 731 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); }
    break;

  case 211:

/* Line 1806 of yacc.c  */
#line 740 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); }
    break;

  case 212:

/* Line 1806 of yacc.c  */
#line 741 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); }
    break;

  case 213:

/* Line 1806 of yacc.c  */
#line 742 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); }
    break;

  case 214:

/* Line 1806 of yacc.c  */
#line 743 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); }
    break;

  case 215:

/* Line 1806 of yacc.c  */
#line 744 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); }
    break;

  case 216:

/* Line 1806 of yacc.c  */
#line 745 "harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); }
    break;

  case 217:

/* Line 1806 of yacc.c  */
#line 750 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); }
    break;

  case 218:

/* Line 1806 of yacc.c  */
#line 751 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); }
    break;

  case 219:

/* Line 1806 of yacc.c  */
#line 752 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); }
    break;

  case 220:

/* Line 1806 of yacc.c  */
#line 753 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); }
    break;

  case 221:

/* Line 1806 of yacc.c  */
#line 754 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); }
    break;

  case 222:

/* Line 1806 of yacc.c  */
#line 755 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); }
    break;

  case 223:

/* Line 1806 of yacc.c  */
#line 756 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); }
    break;

  case 224:

/* Line 1806 of yacc.c  */
#line 757 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); }
    break;

  case 225:

/* Line 1806 of yacc.c  */
#line 758 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); }
    break;

  case 226:

/* Line 1806 of yacc.c  */
#line 759 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); }
    break;

  case 227:

/* Line 1806 of yacc.c  */
#line 760 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); }
    break;

  case 228:

/* Line 1806 of yacc.c  */
#line 761 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); }
    break;

  case 229:

/* Line 1806 of yacc.c  */
#line 762 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); }
    break;

  case 230:

/* Line 1806 of yacc.c  */
#line 763 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); }
    break;

  case 231:

/* Line 1806 of yacc.c  */
#line 764 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); }
    break;

  case 232:

/* Line 1806 of yacc.c  */
#line 765 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); }
    break;

  case 233:

/* Line 1806 of yacc.c  */
#line 766 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); }
    break;

  case 234:

/* Line 1806 of yacc.c  */
#line 767 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); }
    break;

  case 236:

/* Line 1806 of yacc.c  */
#line 774 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewFunCall( hb_compExprNewFunName( (yyvsp[(1) - (4)].string), HB_COMP_PARAM ), (yyvsp[(3) - (4)].asExpr), HB_COMP_PARAM ); }
    break;

  case 238:

/* Line 1806 of yacc.c  */
#line 778 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewFunCall( (yyvsp[(1) - (4)].asExpr), (yyvsp[(3) - (4)].asExpr), HB_COMP_PARAM ); }
    break;

  case 239:

/* Line 1806 of yacc.c  */
#line 782 "harbour.y"
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); }
    break;

  case 241:

/* Line 1806 of yacc.c  */
#line 788 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); }
    break;

  case 242:

/* Line 1806 of yacc.c  */
#line 789 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); }
    break;

  case 245:

/* Line 1806 of yacc.c  */
#line 796 "harbour.y"
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, hb_compExprNewVarRef( (yyvsp[(2) - (2)].string), HB_COMP_PARAM ) ); }
    break;

  case 246:

/* Line 1806 of yacc.c  */
#line 797 "harbour.y"
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, hb_compExprNewRef( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ) ); }
    break;

  case 247:

/* Line 1806 of yacc.c  */
#line 798 "harbour.y"
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, hb_compExprNewRef( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ) ); }
    break;

  case 248:

/* Line 1806 of yacc.c  */
#line 799 "harbour.y"
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, hb_compExprNewRef( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ) ); }
    break;

  case 249:

/* Line 1806 of yacc.c  */
#line 800 "harbour.y"
    { (yyval.asExpr) = hb_compCheckPassByRef( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); (yyval.asExpr)->value.asList.reference = HB_TRUE; }
    break;

  case 250:

/* Line 1806 of yacc.c  */
#line 803 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArgRef( HB_COMP_PARAM ); }
    break;

  case 252:

/* Line 1806 of yacc.c  */
#line 809 "harbour.y"
    { (yyval.asExpr) = hb_compCheckMethod( HB_COMP_PARAM, hb_compExprNewMethodObject( (yyvsp[(3) - (3)].asExpr), (yyvsp[(1) - (3)].asExpr) ) ); }
    break;

  case 253:

/* Line 1806 of yacc.c  */
#line 810 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewMethodObject( (yyvsp[(3) - (3)].asExpr), (yyvsp[(1) - (3)].asExpr) ); }
    break;

  case 254:

/* Line 1806 of yacc.c  */
#line 811 "harbour.y"
    {  if( HB_COMP_PARAM->functions.pLast->wWithObjectCnt == 0 )
                                                hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_WITHOBJECT, NULL, NULL );
                                             (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr);
                                          }
    break;

  case 255:

/* Line 1806 of yacc.c  */
#line 817 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewSend( (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); }
    break;

  case 256:

/* Line 1806 of yacc.c  */
#line 818 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewMacroSend( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); }
    break;

  case 257:

/* Line 1806 of yacc.c  */
#line 821 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewVarRef( (yyvsp[(3) - (4)].string), HB_COMP_PARAM ); }
    break;

  case 259:

/* Line 1806 of yacc.c  */
#line 829 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewMethodCall( (yyvsp[(1) - (4)].asExpr), (yyvsp[(3) - (4)].asExpr) ); }
    break;

  case 269:

/* Line 1806 of yacc.c  */
#line 849 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); }
    break;

  case 279:

/* Line 1806 of yacc.c  */
#line 859 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); }
    break;

  case 282:

/* Line 1806 of yacc.c  */
#line 862 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); }
    break;

  case 284:

/* Line 1806 of yacc.c  */
#line 864 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); }
    break;

  case 296:

/* Line 1806 of yacc.c  */
#line 878 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); }
    break;

  case 297:

/* Line 1806 of yacc.c  */
#line 879 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); }
    break;

  case 299:

/* Line 1806 of yacc.c  */
#line 883 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArgRef( HB_COMP_PARAM ); }
    break;

  case 301:

/* Line 1806 of yacc.c  */
#line 887 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewEmpty( HB_COMP_PARAM ); }
    break;

  case 303:

/* Line 1806 of yacc.c  */
#line 891 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewVar( (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); }
    break;

  case 309:

/* Line 1806 of yacc.c  */
#line 897 "harbour.y"
    { (yyval.asExpr) = hb_compExprListStrip( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); }
    break;

  case 331:

/* Line 1806 of yacc.c  */
#line 930 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewPostInc( (yyvsp[(0) - (1)].asExpr), HB_COMP_PARAM ); }
    break;

  case 332:

/* Line 1806 of yacc.c  */
#line 931 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewPostDec( (yyvsp[(0) - (1)].asExpr), HB_COMP_PARAM ); }
    break;

  case 333:

/* Line 1806 of yacc.c  */
#line 934 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); }
    break;

  case 334:

/* Line 1806 of yacc.c  */
#line 937 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewPreInc( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); }
    break;

  case 335:

/* Line 1806 of yacc.c  */
#line 938 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewPreDec( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); }
    break;

  case 336:

/* Line 1806 of yacc.c  */
#line 941 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewNot( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); }
    break;

  case 337:

/* Line 1806 of yacc.c  */
#line 942 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewNegate( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); }
    break;

  case 338:

/* Line 1806 of yacc.c  */
#line 943 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); }
    break;

  case 339:

/* Line 1806 of yacc.c  */
#line 946 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); }
    break;

  case 340:

/* Line 1806 of yacc.c  */
#line 949 "harbour.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); }
    break;

  case 341:

/* Line 1806 of yacc.c  */
#line 952 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); }
    break;

  case 342:

/* Line 1806 of yacc.c  */
#line 955 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinusEq( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); }
    break;

  case 343:

/* Line 1806 of yacc.c  */
#line 958 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMultEq( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); }
    break;

  case 344:

/* Line 1806 of yacc.c  */
#line 961 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDivEq( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); }
    break;

  case 345:

/* Line 1806 of yacc.c  */
#line 964 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewModEq( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); }
    break;

  case 346:

/* Line 1806 of yacc.c  */
#line 967 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewExpEq( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); }
    break;

  case 353:

/* Line 1806 of yacc.c  */
#line 978 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlus( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); }
    break;

  case 354:

/* Line 1806 of yacc.c  */
#line 979 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinus( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); }
    break;

  case 355:

/* Line 1806 of yacc.c  */
#line 980 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMult( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); }
    break;

  case 356:

/* Line 1806 of yacc.c  */
#line 981 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDiv( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); }
    break;

  case 357:

/* Line 1806 of yacc.c  */
#line 982 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMod( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); }
    break;

  case 358:

/* Line 1806 of yacc.c  */
#line 983 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPower( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); }
    break;

  case 359:

/* Line 1806 of yacc.c  */
#line 986 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewAnd( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); }
    break;

  case 360:

/* Line 1806 of yacc.c  */
#line 987 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewOr( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); }
    break;

  case 361:

/* Line 1806 of yacc.c  */
#line 990 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewEQ( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); }
    break;

  case 362:

/* Line 1806 of yacc.c  */
#line 991 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewLT( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); }
    break;

  case 363:

/* Line 1806 of yacc.c  */
#line 992 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewGT( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); }
    break;

  case 364:

/* Line 1806 of yacc.c  */
#line 993 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewLE( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); }
    break;

  case 365:

/* Line 1806 of yacc.c  */
#line 994 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewGE( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); }
    break;

  case 366:

/* Line 1806 of yacc.c  */
#line 995 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewNE( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); }
    break;

  case 367:

/* Line 1806 of yacc.c  */
#line 996 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewNE( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); }
    break;

  case 368:

/* Line 1806 of yacc.c  */
#line 997 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewIN( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); }
    break;

  case 369:

/* Line 1806 of yacc.c  */
#line 998 "harbour.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewEqual( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); }
    break;

  case 371:

/* Line 1806 of yacc.c  */
#line 1007 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArrayAt( (yyvsp[(0) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); }
    break;

  case 372:

/* Line 1806 of yacc.c  */
#line 1008 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArrayAt( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); }
    break;

  case 373:

/* Line 1806 of yacc.c  */
#line 1009 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArrayAt( (yyvsp[(1) - (4)].asExpr), (yyvsp[(4) - (4)].asExpr), HB_COMP_PARAM ); }
    break;

  case 374:

/* Line 1806 of yacc.c  */
#line 1012 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewList( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); }
    break;

  case 375:

/* Line 1806 of yacc.c  */
#line 1013 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); }
    break;

  case 376:

/* Line 1806 of yacc.c  */
#line 1016 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewCodeBlock( (yyvsp[(1) - (1)].asCodeblock).string, (yyvsp[(1) - (1)].asCodeblock).length, (yyvsp[(1) - (1)].asCodeblock).flags, HB_COMP_PARAM ); (yyvsp[(1) - (1)].asCodeblock).string = NULL; }
    break;

  case 377:

/* Line 1806 of yacc.c  */
#line 1017 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (4)].asExpr); }
    break;

  case 378:

/* Line 1806 of yacc.c  */
#line 1022 "harbour.y"
    { (yyval.asExpr) = NULL; }
    break;

  case 379:

/* Line 1806 of yacc.c  */
#line 1023 "harbour.y"
    { (yyval.asExpr) = NULL; (yyvsp[(0) - (1)].asExpr)->value.asCodeblock.flags |= HB_BLOCK_VPARAMS; }
    break;

  case 380:

/* Line 1806 of yacc.c  */
#line 1024 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr);   }
    break;

  case 381:

/* Line 1806 of yacc.c  */
#line 1025 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(1) - (3)].asExpr);   (yyvsp[(0) - (3)].asExpr)->value.asCodeblock.flags |= HB_BLOCK_VPARAMS; }
    break;

  case 382:

/* Line 1806 of yacc.c  */
#line 1028 "harbour.y"
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_LOCAL; (yyval.asExpr) = hb_compExprCBVarAdd( (yyvsp[(0) - (2)].asExpr), (yyvsp[(1) - (2)].string), (yyvsp[(2) - (2)].asVarType)->cVarType, HB_COMP_PARAM ); }
    break;

  case 383:

/* Line 1806 of yacc.c  */
#line 1029 "harbour.y"
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_LOCAL; (yyval.asExpr) = hb_compExprCBVarAdd( (yyvsp[(0) - (4)].asExpr), (yyvsp[(3) - (4)].string), (yyvsp[(4) - (4)].asVarType)->cVarType, HB_COMP_PARAM ); }
    break;

  case 384:

/* Line 1806 of yacc.c  */
#line 1032 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddCodeblockExpr( (yyvsp[(-1) - (1)].asExpr), (yyvsp[(1) - (1)].asExpr) ); }
    break;

  case 385:

/* Line 1806 of yacc.c  */
#line 1033 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddCodeblockExpr( (yyvsp[(-1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); }
    break;

  case 386:

/* Line 1806 of yacc.c  */
#line 1037 "harbour.y"
    { (yyval.bTrue) = HB_COMP_PARAM->functions.pLast->bBlock;
                HB_COMP_PARAM->functions.pLast->bBlock = HB_TRUE; }
    break;

  case 387:

/* Line 1806 of yacc.c  */
#line 1040 "harbour.y"
    { HB_COMP_PARAM->functions.pLast->bBlock = (yyvsp[(2) - (3)].bTrue); }
    break;

  case 389:

/* Line 1806 of yacc.c  */
#line 1043 "harbour.y"
    {  /* 3 */
               PHB_CBVAR pVar;
               (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
               (yyvsp[(2) - (2)].sNumber) = HB_COMP_PARAM->lastLine;
               hb_compCodeBlockStart( HB_COMP_PARAM, 0 );
               HB_COMP_PARAM->functions.pLast->funFlags |= HB_FUNF_EXTBLOCK;
               HB_COMP_PARAM->functions.pLast->fVParams =
                  ( (yyvsp[(1) - (2)].asExpr)->value.asCodeblock.flags & HB_BLOCK_VPARAMS ) != 0;

               (yyvsp[(1) - (2)].asExpr)->value.asCodeblock.flags |= HB_BLOCK_EXT;
               if( (yyvsp[(1) - (2)].asExpr)->value.asCodeblock.string )
               {
                  hb_xfree( (yyvsp[(1) - (2)].asExpr)->value.asCodeblock.string );
                  (yyvsp[(1) - (2)].asExpr)->value.asCodeblock.string = NULL;
                  (yyvsp[(1) - (2)].asExpr)->nLength = 0;
               }

               HB_COMP_PARAM->iVarScope = HB_VSCOMP_PARAMETER;
               pVar = (yyvsp[(1) - (2)].asExpr)->value.asCodeblock.pLocals;
               while( pVar )
               {
                  hb_compVariableAdd( HB_COMP_PARAM, pVar->szName, hb_compVarTypeNew( HB_COMP_PARAM, pVar->bType, NULL ) );
                  pVar =pVar->pNext;
               }
            }
    break;

  case 390:

/* Line 1806 of yacc.c  */
#line 1069 "harbour.y"
    {  /* 6 */
               hb_compCodeBlockEnd( HB_COMP_PARAM );
               (yyval.asExpr) = hb_compExprSetCodeblockBody( (yyvsp[(1) - (5)].asExpr),
                     HB_COMP_PARAM->functions.pLast->pCode + (yyvsp[(3) - (5)].sNumber),
                     HB_COMP_PARAM->functions.pLast->nPCodePos - (yyvsp[(3) - (5)].sNumber) );
               HB_COMP_PARAM->functions.pLast->nPCodePos = (yyvsp[(3) - (5)].sNumber);
               HB_COMP_PARAM->lastLine = (yyvsp[(2) - (5)].sNumber);
            }
    break;

  case 391:

/* Line 1806 of yacc.c  */
#line 1079 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewList( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); }
    break;

  case 392:

/* Line 1806 of yacc.c  */
#line 1080 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); }
    break;

  case 393:

/* Line 1806 of yacc.c  */
#line 1082 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (3)].asExpr); }
    break;

  case 395:

/* Line 1806 of yacc.c  */
#line 1095 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewIIF( hb_compExprAddListExpr( hb_compExprAddListExpr( hb_compExprNewList( (yyvsp[(3) - (8)].asExpr), HB_COMP_PARAM ), (yyvsp[(5) - (8)].asExpr) ), (yyvsp[(7) - (8)].asExpr) ) ); }
    break;

  case 397:

/* Line 1806 of yacc.c  */
#line 1101 "harbour.y"
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_LOCAL; hb_compLinePush( HB_COMP_PARAM ); }
    break;

  case 399:

/* Line 1806 of yacc.c  */
#line 1103 "harbour.y"
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_STATIC; hb_compLinePush( HB_COMP_PARAM ); }
    break;

  case 401:

/* Line 1806 of yacc.c  */
#line 1105 "harbour.y"
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_TH_STATIC; hb_compLinePush( HB_COMP_PARAM ); }
    break;

  case 403:

/* Line 1806 of yacc.c  */
#line 1107 "harbour.y"
    { if( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_USES_LOCAL_PARAMS )
                           hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_PARAMETERS_NOT_ALLOWED, NULL, NULL );
                        else
                        {
                           HB_COMP_PARAM->functions.pLast->wParamNum = 0;
                           HB_COMP_PARAM->iVarScope = ( HB_VSCOMP_PRIVATE | HB_VSCOMP_PARAMETER );
                        }
                      }
    break;

  case 404:

/* Line 1806 of yacc.c  */
#line 1114 "harbour.y"
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE; }
    break;

  case 405:

/* Line 1806 of yacc.c  */
#line 1117 "harbour.y"
    { (yyval.iNumber) = 1; }
    break;

  case 406:

/* Line 1806 of yacc.c  */
#line 1118 "harbour.y"
    { (yyval.iNumber)++; }
    break;

  case 407:

/* Line 1806 of yacc.c  */
#line 1121 "harbour.y"
    { (yyval.iNumber) = 1; }
    break;

  case 408:

/* Line 1806 of yacc.c  */
#line 1122 "harbour.y"
    { (yyval.iNumber)++; }
    break;

  case 410:

/* Line 1806 of yacc.c  */
#line 1132 "harbour.y"
    { hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( NULL, (yyvsp[(1) - (2)].asExpr), HB_COMP_PARAM ), HB_FALSE ); }
    break;

  case 411:

/* Line 1806 of yacc.c  */
#line 1134 "harbour.y"
    { HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[(4) - (4)].asExpr), HB_COMP_PARAM ) );
                 hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( NULL, (yyvsp[(1) - (4)].asExpr), HB_COMP_PARAM ), HB_TRUE );
               }
    break;

  case 412:

/* Line 1806 of yacc.c  */
#line 1138 "harbour.y"
    {
                  HB_COMP_EXPR_FREE( hb_compArrayDimPush( (yyvsp[(2) - (3)].asExpr), HB_COMP_PARAM ) );
                  hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( NULL, (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), HB_TRUE );
               }
    break;

  case 413:

/* Line 1806 of yacc.c  */
#line 1145 "harbour.y"
    {
                  hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(1) - (2)].string), (yyvsp[(2) - (2)].asVarType) );
                  if( HB_COMP_PARAM->iVarScope & HB_VSCOMP_STATIC )
                  {
                     hb_compStaticDefStart( HB_COMP_PARAM );   /* switch to statics pcode buffer */
                     hb_compStaticDefEnd( HB_COMP_PARAM, (yyvsp[(1) - (2)].string) );
                  }
                  else if( HB_COMP_PARAM->iVarScope == HB_VSCOMP_PUBLIC || HB_COMP_PARAM->iVarScope == HB_VSCOMP_PRIVATE )
                  {
                     hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( (yyvsp[(1) - (2)].string), NULL, HB_COMP_PARAM ), HB_FALSE );
                  }
                  else if( HB_COMP_PARAM->iVarScope == HB_VSCOMP_LOCAL &&
                           ( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_EXTBLOCK ) )
                  {
                     HB_COMP_EXPR_FREE( hb_compExprGenPush( hb_compExprNewNil( HB_COMP_PARAM ), HB_COMP_PARAM ) );
                  }
               }
    break;

  case 414:

/* Line 1806 of yacc.c  */
#line 1162 "harbour.y"
    { (yyval.iNumber) = HB_COMP_PARAM->iVarScope;
                                hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(1) - (2)].string), (yyvsp[(2) - (2)].asVarType) );
                              }
    break;

  case 415:

/* Line 1806 of yacc.c  */
#line 1166 "harbour.y"
    {
                  HB_COMP_PARAM->iVarScope = (yyvsp[(3) - (5)].iNumber);
                  if( HB_COMP_PARAM->iVarScope & HB_VSCOMP_STATIC )
                  {
                     hb_compStaticDefStart( HB_COMP_PARAM );   /* switch to statics pcode buffer */
                     HB_COMP_EXPR_FREE( hb_compExprGenStatement( hb_compExprAssignStatic( hb_compExprNewVar( (yyvsp[(1) - (5)].string), HB_COMP_PARAM ), (yyvsp[(5) - (5)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ) );
                     hb_compStaticDefEnd( HB_COMP_PARAM, (yyvsp[(1) - (5)].string) );
                  }
                  else if( HB_COMP_PARAM->iVarScope == HB_VSCOMP_PUBLIC || HB_COMP_PARAM->iVarScope == HB_VSCOMP_PRIVATE )
                  {
                     HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[(5) - (5)].asExpr), HB_COMP_PARAM ) );
                     hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( (yyvsp[(1) - (5)].string), NULL, HB_COMP_PARAM ), HB_TRUE );
                  }
                  else if( HB_COMP_PARAM->iVarScope == HB_VSCOMP_LOCAL &&
                           ( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_EXTBLOCK ) )
                  {
                     HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[(5) - (5)].asExpr), HB_COMP_PARAM ) );
                  }
                  else
                  {
                     HB_COMP_EXPR_FREE( hb_compExprGenStatement( hb_compExprAssign( hb_compExprNewVar( (yyvsp[(1) - (5)].string), HB_COMP_PARAM ), (yyvsp[(5) - (5)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ) );
                  }
                  HB_COMP_PARAM->iVarScope = (yyvsp[(3) - (5)].iNumber);
               }
    break;

  case 416:

/* Line 1806 of yacc.c  */
#line 1191 "harbour.y"
    { hb_compVariableDim( (yyvsp[(1) - (3)].string), (yyvsp[(2) - (3)].asExpr), HB_COMP_PARAM ); }
    break;

  case 418:

/* Line 1806 of yacc.c  */
#line 1200 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); }
    break;

  case 419:

/* Line 1806 of yacc.c  */
#line 1201 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); }
    break;

  case 420:

/* Line 1806 of yacc.c  */
#line 1202 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (4)].asExpr), (yyvsp[(4) - (4)].asExpr) ); }
    break;

  case 421:

/* Line 1806 of yacc.c  */
#line 1205 "harbour.y"
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_FIELD; }
    break;

  case 422:

/* Line 1806 of yacc.c  */
#line 1207 "harbour.y"
    {
               if( (yyvsp[(4) - (5)].string) ) hb_compFieldSetAlias( HB_COMP_PARAM, (yyvsp[(4) - (5)].string), (yyvsp[(3) - (5)].iNumber) );
             }
    break;

  case 423:

/* Line 1806 of yacc.c  */
#line 1212 "harbour.y"
    { (yyval.iNumber) = hb_compFieldsCount( HB_COMP_PARAM ); hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(1) - (2)].string), (yyvsp[(2) - (2)].asVarType) ); }
    break;

  case 424:

/* Line 1806 of yacc.c  */
#line 1213 "harbour.y"
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(3) - (4)].string), (yyvsp[(4) - (4)].asVarType) ); }
    break;

  case 425:

/* Line 1806 of yacc.c  */
#line 1216 "harbour.y"
    { (yyval.string) = NULL; }
    break;

  case 426:

/* Line 1806 of yacc.c  */
#line 1217 "harbour.y"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 427:

/* Line 1806 of yacc.c  */
#line 1220 "harbour.y"
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_MEMVAR; }
    break;

  case 429:

/* Line 1806 of yacc.c  */
#line 1223 "harbour.y"
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(1) - (2)].string), (yyvsp[(2) - (2)].asVarType) ); }
    break;

  case 430:

/* Line 1806 of yacc.c  */
#line 1224 "harbour.y"
    { hb_compVariableAdd( HB_COMP_PARAM, (yyvsp[(3) - (4)].string), (yyvsp[(4) - (4)].asVarType) ); }
    break;

  case 431:

/* Line 1806 of yacc.c  */
#line 1227 "harbour.y"
    { hb_compDeclaredAdd( HB_COMP_PARAM, (yyvsp[(2) - (3)].string) ); HB_COMP_PARAM->szDeclaredFun = (yyvsp[(2) - (3)].string); }
    break;

  case 432:

/* Line 1806 of yacc.c  */
#line 1228 "harbour.y"
    {
               if( HB_COMP_PARAM->pLastDeclared )
               {
                 HB_COMP_PARAM->pLastDeclared->cType = (yyvsp[(7) - (8)].asVarType)->cVarType;

                 if( HB_TOUPPER( (yyvsp[(7) - (8)].asVarType)->cVarType ) == 'S' )
                 {
                   HB_COMP_PARAM->pLastDeclared->pClass = hb_compClassFind( HB_COMP_PARAM, (yyvsp[(7) - (8)].asVarType)->szFromClass );
                   if( ! HB_COMP_PARAM->pLastDeclared->pClass )
                   {
                     hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_CLASS_NOT_FOUND, (yyvsp[(7) - (8)].asVarType)->szFromClass, HB_COMP_PARAM->pLastDeclared->szName );
                     HB_COMP_PARAM->pLastDeclared->cType = ( HB_ISUPPER( ( HB_UCHAR ) (yyvsp[(7) - (8)].asVarType)->cVarType ) ? 'O' : 'o' );
                   }
                 }
               }
               HB_COMP_PARAM->szDeclaredFun = NULL;
               HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE;
             }
    break;

  case 433:

/* Line 1806 of yacc.c  */
#line 1246 "harbour.y"
    { HB_COMP_PARAM->pLastClass = hb_compClassAdd( HB_COMP_PARAM, (yyvsp[(2) - (2)].string), NULL ); }
    break;

  case 434:

/* Line 1806 of yacc.c  */
#line 1246 "harbour.y"
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE; }
    break;

  case 435:

/* Line 1806 of yacc.c  */
#line 1247 "harbour.y"
    { HB_COMP_PARAM->pLastClass = hb_compClassAdd( HB_COMP_PARAM, (yyvsp[(2) - (3)].string), NULL ); HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE; }
    break;

  case 436:

/* Line 1806 of yacc.c  */
#line 1248 "harbour.y"
    { HB_COMP_PARAM->pLastClass = hb_compClassAdd( HB_COMP_PARAM, (yyvsp[(2) - (4)].string), (yyvsp[(3) - (4)].string) ); HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE; }
    break;

  case 437:

/* Line 1806 of yacc.c  */
#line 1249 "harbour.y"
    { HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE; }
    break;

  case 438:

/* Line 1806 of yacc.c  */
#line 1250 "harbour.y"
    { HB_COMP_PARAM->cDataListType = (yyvsp[(3) - (3)].asVarType)->cVarType; }
    break;

  case 439:

/* Line 1806 of yacc.c  */
#line 1250 "harbour.y"
    { HB_COMP_PARAM->cDataListType = 0; HB_COMP_PARAM->iVarScope = HB_VSCOMP_NONE; }
    break;

  case 446:

/* Line 1806 of yacc.c  */
#line 1263 "harbour.y"
    { HB_COMP_PARAM->pLastMethod = hb_compMethodAdd( HB_COMP_PARAM, HB_COMP_PARAM->pLastClass, (yyvsp[(1) - (2)].string) ); }
    break;

  case 447:

/* Line 1806 of yacc.c  */
#line 1264 "harbour.y"
    {
               if( HB_COMP_PARAM->pLastMethod )
               {
                 HB_COMP_PARAM->pLastMethod->cType = (yyvsp[(6) - (6)].asVarType)->cVarType;
                 if( HB_TOUPPER( (yyvsp[(6) - (6)].asVarType)->cVarType ) == 'S' )
                 {
                   HB_COMP_PARAM->pLastMethod->pClass = hb_compClassFind( HB_COMP_PARAM, (yyvsp[(6) - (6)].asVarType)->szFromClass );
                   if( ! HB_COMP_PARAM->pLastMethod->pClass )
                   {
                     hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_CLASS_NOT_FOUND, (yyvsp[(6) - (6)].asVarType)->szFromClass, HB_COMP_PARAM->pLastMethod->szName );
                     HB_COMP_PARAM->pLastMethod->cType = ( HB_ISUPPER( ( HB_UCHAR ) (yyvsp[(6) - (6)].asVarType)->cVarType ) ? 'O' : 'o' );
                   }
                 }
               }
               HB_COMP_PARAM->pLastMethod = NULL;
             }
    break;

  case 448:

/* Line 1806 of yacc.c  */
#line 1282 "harbour.y"
    { HB_COMP_PARAM->pLastMethod = hb_compMethodAdd( HB_COMP_PARAM, HB_COMP_PARAM->pLastClass, (yyvsp[(1) - (1)].string) ); }
    break;

  case 449:

/* Line 1806 of yacc.c  */
#line 1283 "harbour.y"
    {
               if( HB_COMP_PARAM->pLastMethod )
               {
                  PHB_HCLASS pClass;
                  char       szSetData[ HB_SYMBOL_NAME_LEN + 1 ];
                  int        iLen;
                  char       cVarType = (yyvsp[(3) - (3)].asVarType)->cVarType;

                  /* List Type overrides if exists. */
                  if( HB_COMP_PARAM->cDataListType )
                     cVarType = HB_COMP_PARAM->cDataListType;

                  HB_COMP_PARAM->pLastMethod->cType = cVarType;
                  if( HB_TOUPPER( cVarType ) == 'S' )
                  {
                     pClass = hb_compClassFind( HB_COMP_PARAM, (yyvsp[(3) - (3)].asVarType)->szFromClass );
                     HB_COMP_PARAM->pLastMethod->pClass = pClass;
                     if( ! HB_COMP_PARAM->pLastMethod->pClass )
                     {
                        hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_CLASS_NOT_FOUND, (yyvsp[(3) - (3)].asVarType)->szFromClass, HB_COMP_PARAM->pLastMethod->szName );
                        HB_COMP_PARAM->pLastMethod->cType = ( HB_ISUPPER( ( HB_UCHAR ) cVarType ) ? 'O' :'o' );
                     }
                  }
                  else
                     pClass = NULL;

                  iLen = ( int ) strlen( (yyvsp[(1) - (3)].string) );
                  if( iLen >= HB_SYMBOL_NAME_LEN )
                     iLen = HB_SYMBOL_NAME_LEN - 1;
                  szSetData[ 0 ] = '_';
                  memcpy( szSetData + 1, (yyvsp[(1) - (3)].string), iLen );
                  szSetData[ iLen + 1 ] = '\0';

                  HB_COMP_PARAM->pLastMethod = hb_compMethodAdd( HB_COMP_PARAM, HB_COMP_PARAM->pLastClass,
                     hb_compIdentifierNew( HB_COMP_PARAM, szSetData, HB_IDENT_COPY ) );
                  HB_COMP_PARAM->pLastMethod->cType = cVarType;
                  HB_COMP_PARAM->pLastMethod->iParamCount = 1;

                  HB_COMP_PARAM->pLastMethod->cParamTypes = ( HB_BYTE * ) hb_xgrab( 1 );
                  HB_COMP_PARAM->pLastMethod->pParamClasses = ( PHB_HCLASS * ) hb_xgrab( sizeof( HB_HCLASS ) );

                  HB_COMP_PARAM->pLastMethod->cParamTypes[0] = cVarType;
                  HB_COMP_PARAM->pLastMethod->pParamClasses[0] = pClass;

                  if( HB_TOUPPER( cVarType ) == 'S' )
                  {
                     HB_COMP_PARAM->pLastMethod->pClass = pClass;
                  }
               }

               HB_COMP_PARAM->pLastMethod = NULL;
             }
    break;

  case 463:

/* Line 1806 of yacc.c  */
#line 1356 "harbour.y"
    { HB_COMP_EXPR_FREE( (yyvsp[(1) - (1)].asExpr) ); }
    break;

  case 464:

/* Line 1806 of yacc.c  */
#line 1359 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(1) - (2)].string), (yyvsp[(2) - (2)].asVarType) ); }
    break;

  case 465:

/* Line 1806 of yacc.c  */
#line 1360 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(2) - (3)].string), hb_compVarTypeNew( HB_COMP_PARAM, (yyvsp[(3) - (3)].asVarType)->cVarType + HB_VT_OFFSET_BYREF, NULL ) ); }
    break;

  case 466:

/* Line 1806 of yacc.c  */
#line 1361 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(2) - (5)].string), hb_compVarTypeNew( HB_COMP_PARAM, 'F', NULL ) ); }
    break;

  case 467:

/* Line 1806 of yacc.c  */
#line 1362 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(3) - (4)].string), (yyvsp[(4) - (4)].asVarType) ); }
    break;

  case 468:

/* Line 1806 of yacc.c  */
#line 1363 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(4) - (5)].string), hb_compVarTypeNew( HB_COMP_PARAM, (yyvsp[(5) - (5)].asVarType)->cVarType + HB_VT_OFFSET_BYREF, NULL ) ); }
    break;

  case 469:

/* Line 1806 of yacc.c  */
#line 1364 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(4) - (7)].string), hb_compVarTypeNew( HB_COMP_PARAM, 'F', NULL ) ); }
    break;

  case 470:

/* Line 1806 of yacc.c  */
#line 1367 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(2) - (3)].string), hb_compVarTypeNew( HB_COMP_PARAM, (yyvsp[(3) - (3)].asVarType)->cVarType + HB_VT_OFFSET_OPTIONAL, NULL ) ); }
    break;

  case 471:

/* Line 1806 of yacc.c  */
#line 1368 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(3) - (4)].string), hb_compVarTypeNew( HB_COMP_PARAM, (yyvsp[(4) - (4)].asVarType)->cVarType + HB_VT_OFFSET_OPTIONAL + HB_VT_OFFSET_BYREF, NULL ) ); }
    break;

  case 472:

/* Line 1806 of yacc.c  */
#line 1369 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(3) - (6)].string), hb_compVarTypeNew( HB_COMP_PARAM, 'F' + HB_VT_OFFSET_OPTIONAL + HB_VT_OFFSET_BYREF, NULL ) ); }
    break;

  case 473:

/* Line 1806 of yacc.c  */
#line 1370 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(4) - (5)].string), hb_compVarTypeNew( HB_COMP_PARAM, (yyvsp[(5) - (5)].asVarType)->cVarType + HB_VT_OFFSET_OPTIONAL, NULL ) ); }
    break;

  case 474:

/* Line 1806 of yacc.c  */
#line 1371 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(5) - (6)].string), hb_compVarTypeNew( HB_COMP_PARAM, (yyvsp[(6) - (6)].asVarType)->cVarType + HB_VT_OFFSET_OPTIONAL + HB_VT_OFFSET_BYREF, NULL ) ); }
    break;

  case 475:

/* Line 1806 of yacc.c  */
#line 1372 "harbour.y"
    { hb_compDeclaredParameterAdd( HB_COMP_PARAM, (yyvsp[(5) - (8)].string), hb_compVarTypeNew( HB_COMP_PARAM, 'F' + HB_VT_OFFSET_OPTIONAL + HB_VT_OFFSET_BYREF, NULL ) ); }
    break;

  case 484:

/* Line 1806 of yacc.c  */
#line 1385 "harbour.y"
    { hb_compGenJumpHere( (yyvsp[(1) - (2)].sNumber), HB_COMP_PARAM ); }
    break;

  case 485:

/* Line 1806 of yacc.c  */
#line 1386 "harbour.y"
    { hb_compGenJumpHere( (yyvsp[(1) - (3)].sNumber), HB_COMP_PARAM ); }
    break;

  case 486:

/* Line 1806 of yacc.c  */
#line 1387 "harbour.y"
    { hb_compGenJumpHere( (yyvsp[(1) - (3)].sNumber), HB_COMP_PARAM ); hb_compElseIfFix( HB_COMP_PARAM, (yyvsp[(2) - (3)].pVoid) ); }
    break;

  case 487:

/* Line 1806 of yacc.c  */
#line 1388 "harbour.y"
    { hb_compGenJumpHere( (yyvsp[(1) - (4)].sNumber), HB_COMP_PARAM ); hb_compElseIfFix( HB_COMP_PARAM, (yyvsp[(2) - (4)].pVoid) ); }
    break;

  case 488:

/* Line 1806 of yacc.c  */
#line 1392 "harbour.y"
    { ++HB_COMP_PARAM->functions.pLast->wIfCounter; hb_compLinePushIfInside( HB_COMP_PARAM ); }
    break;

  case 489:

/* Line 1806 of yacc.c  */
#line 1394 "harbour.y"
    { HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[(2) - (4)].asExpr), HB_COMP_PARAM ) ); (yyval.sNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM ); }
    break;

  case 490:

/* Line 1806 of yacc.c  */
#line 1396 "harbour.y"
    { (yyval.sNumber) = hb_compGenJump( 0, HB_COMP_PARAM ); hb_compGenJumpHere( (yyvsp[(5) - (6)].sNumber), HB_COMP_PARAM ); }
    break;

  case 491:

/* Line 1806 of yacc.c  */
#line 1399 "harbour.y"
    { HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE; }
    break;

  case 493:

/* Line 1806 of yacc.c  */
#line 1403 "harbour.y"
    { HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE; hb_compLinePush( HB_COMP_PARAM ); }
    break;

  case 494:

/* Line 1806 of yacc.c  */
#line 1405 "harbour.y"
    { HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[(3) - (4)].asExpr), HB_COMP_PARAM ) );
                  (yyval.sNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
               }
    break;

  case 495:

/* Line 1806 of yacc.c  */
#line 1409 "harbour.y"
    { (yyval.pVoid) = hb_compElseIfGen( HB_COMP_PARAM, NULL, hb_compGenJump( 0, HB_COMP_PARAM ) );
                  hb_compGenJumpHere( (yyvsp[(5) - (6)].sNumber), HB_COMP_PARAM );
               }
    break;

  case 496:

/* Line 1806 of yacc.c  */
#line 1413 "harbour.y"
    { HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE; hb_compLinePush( HB_COMP_PARAM ); }
    break;

  case 497:

/* Line 1806 of yacc.c  */
#line 1415 "harbour.y"
    { HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[(4) - (5)].asExpr), HB_COMP_PARAM ) );
                  (yyval.sNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
               }
    break;

  case 498:

/* Line 1806 of yacc.c  */
#line 1419 "harbour.y"
    { (yyval.pVoid) = hb_compElseIfGen( HB_COMP_PARAM, (yyvsp[(1) - (7)].pVoid), hb_compGenJump( 0, HB_COMP_PARAM ) );
                  hb_compGenJumpHere( (yyvsp[(6) - (7)].sNumber), HB_COMP_PARAM );
               }
    break;

  case 499:

/* Line 1806 of yacc.c  */
#line 1425 "harbour.y"
    {
                  if( HB_COMP_PARAM->functions.pLast->wIfCounter )
                     --HB_COMP_PARAM->functions.pLast->wIfCounter;
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ ( HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE );
               }
    break;

  case 502:

/* Line 1806 of yacc.c  */
#line 1438 "harbour.y"
    { hb_compElseIfFix( HB_COMP_PARAM, (yyvsp[(2) - (3)].pVoid) ); }
    break;

  case 505:

/* Line 1806 of yacc.c  */
#line 1450 "harbour.y"
    { hb_compElseIfFix( HB_COMP_PARAM, (yyvsp[(2) - (4)].pVoid) ); }
    break;

  case 506:

/* Line 1806 of yacc.c  */
#line 1454 "harbour.y"
    {  if( HB_COMP_PARAM->functions.pLast->wCaseCounter )
                     --HB_COMP_PARAM->functions.pLast->wCaseCounter;
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ ( HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE );
               }
    break;

  case 509:

/* Line 1806 of yacc.c  */
#line 1464 "harbour.y"
    { ++HB_COMP_PARAM->functions.pLast->wCaseCounter; hb_compLinePushIfDebugger( HB_COMP_PARAM );}
    break;

  case 512:

/* Line 1806 of yacc.c  */
#line 1468 "harbour.y"
    {
                        if( (yyvsp[(2) - (2)].lNumber) > 0 )
                        {
                           hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_MAYHEM_IN_CASE, NULL, NULL );
                        }
                     }
    break;

  case 513:

/* Line 1806 of yacc.c  */
#line 1476 "harbour.y"
    { hb_compLinePushIfInside( HB_COMP_PARAM ); }
    break;

  case 514:

/* Line 1806 of yacc.c  */
#line 1477 "harbour.y"
    {
                  HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[(3) - (4)].asExpr), HB_COMP_PARAM ) );
                  (yyval.sNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
               }
    break;

  case 515:

/* Line 1806 of yacc.c  */
#line 1482 "harbour.y"
    {
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE;
                  (yyval.pVoid) = hb_compElseIfGen( HB_COMP_PARAM, NULL, hb_compGenJump( 0, HB_COMP_PARAM ) );
                  hb_compGenJumpHere( (yyvsp[(5) - (6)].sNumber), HB_COMP_PARAM );
               }
    break;

  case 516:

/* Line 1806 of yacc.c  */
#line 1488 "harbour.y"
    { hb_compLinePushIfInside( HB_COMP_PARAM ); }
    break;

  case 517:

/* Line 1806 of yacc.c  */
#line 1489 "harbour.y"
    {
                  HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[(4) - (5)].asExpr), HB_COMP_PARAM ) );
                  (yyval.sNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
               }
    break;

  case 518:

/* Line 1806 of yacc.c  */
#line 1494 "harbour.y"
    {
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE;
                  (yyval.pVoid) = hb_compElseIfGen( HB_COMP_PARAM, (yyvsp[(1) - (7)].pVoid), hb_compGenJump( 0, HB_COMP_PARAM ) );
                  hb_compGenJumpHere( (yyvsp[(6) - (7)].sNumber), HB_COMP_PARAM );
               }
    break;

  case 519:

/* Line 1806 of yacc.c  */
#line 1501 "harbour.y"
    {hb_compLinePushIfDebugger( HB_COMP_PARAM ); }
    break;

  case 520:

/* Line 1806 of yacc.c  */
#line 1501 "harbour.y"
    { HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE; }
    break;

  case 522:

/* Line 1806 of yacc.c  */
#line 1503 "harbour.y"
    { hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_MAYHEM_IN_CASE, NULL, NULL ); }
    break;

  case 524:

/* Line 1806 of yacc.c  */
#line 1508 "harbour.y"
    {
                  HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[(2) - (3)].asExpr), HB_COMP_PARAM ) );
                  (yyval.sNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
               }
    break;

  case 525:

/* Line 1806 of yacc.c  */
#line 1513 "harbour.y"
    {
                  hb_compLoopHere( HB_COMP_PARAM );
                  hb_compGenJump( (yyvsp[(1) - (5)].sNumber) - HB_COMP_PARAM->functions.pLast->nPCodePos, HB_COMP_PARAM );
               }
    break;

  case 526:

/* Line 1806 of yacc.c  */
#line 1518 "harbour.y"
    {
                  hb_compGenJumpHere( (yyvsp[(4) - (7)].sNumber), HB_COMP_PARAM );
                  if( HB_COMP_PARAM->functions.pLast->wWhileCounter )
                     --HB_COMP_PARAM->functions.pLast->wWhileCounter;
                  hb_compLoopEnd( HB_COMP_PARAM );
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_WITH_RETURN;
               }
    break;

  case 527:

/* Line 1806 of yacc.c  */
#line 1528 "harbour.y"
    {
                  (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
                  hb_compLinePushIfInside( HB_COMP_PARAM );
                  ++HB_COMP_PARAM->functions.pLast->wWhileCounter;
                  hb_compLoopStart( HB_COMP_PARAM, HB_TRUE );
               }
    break;

  case 528:

/* Line 1806 of yacc.c  */
#line 1537 "harbour.y"
    { HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE; }
    break;

  case 531:

/* Line 1806 of yacc.c  */
#line 1545 "harbour.y"
    {                                      /* 5 */
                  hb_compLinePushIfInside( HB_COMP_PARAM );
                  (yyvsp[(1) - (4)].iNumber) = HB_COMP_PARAM->currLine;
                  hb_compDebugStart();
                  ++HB_COMP_PARAM->functions.pLast->wForCounter;
                  (yyvsp[(2) - (4)].asExpr) = hb_compExprReduce( (yyvsp[(2) - (4)].asExpr), HB_COMP_PARAM );
                  (yyval.asExpr) = hb_compExprGenPush( hb_compExprAssign( (yyvsp[(2) - (4)].asExpr), (yyvsp[(4) - (4)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                  if( hb_compExprAsSymbol( (yyvsp[(2) - (4)].asExpr) ) )
                  {
                     hb_compForStart( HB_COMP_PARAM, hb_compExprAsSymbol( (yyvsp[(2) - (4)].asExpr) ), 0 );
                  }
               }
    break;

  case 532:

/* Line 1806 of yacc.c  */
#line 1558 "harbour.y"
    {                                      /* 9 */
                  hb_compLoopStart( HB_COMP_PARAM, HB_TRUE );
                  (yyval.sNumber) = hb_compGenJump( 0, HB_COMP_PARAM );
               }
    break;

  case 533:

/* Line 1806 of yacc.c  */
#line 1563 "harbour.y"
    {                                      /* 11 */
                  (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
               }
    break;

  case 534:

/* Line 1806 of yacc.c  */
#line 1567 "harbour.y"
    {
                  int iSign, iLine;

                  hb_compLoopHere( HB_COMP_PARAM );

                  iLine = HB_COMP_PARAM->currLine;
                  HB_COMP_PARAM->currLine = (yyvsp[(1) - (12)].iNumber);
                  hb_compLinePush( HB_COMP_PARAM );
                  HB_COMP_PARAM->currLine = iLine;

                  if( (yyvsp[(8) - (12)].asExpr) )
                  {
                     (yyvsp[(8) - (12)].asExpr) = hb_compExprReduce( (yyvsp[(8) - (12)].asExpr), HB_COMP_PARAM );
                     iSign = hb_compExprAsNumSign( (yyvsp[(8) - (12)].asExpr) );
                     HB_COMP_EXPR_CLEAR( hb_compExprGenPush( hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(2) - (12)].asExpr), HB_COMP_PARAM ), (yyvsp[(8) - (12)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ) );
                  }
                  else
                  {
                     iSign = 1;
                     HB_COMP_EXPR_CLEAR( hb_compExprGenPush( hb_compExprNewPreInc( (yyvsp[(2) - (12)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM ) );
                  }
                  hb_compGenJumpHere( (yyvsp[(9) - (12)].sNumber), HB_COMP_PARAM );
                  HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[(7) - (12)].asExpr), HB_COMP_PARAM ) );   /* end */
                  if( iSign )
                  {
                     hb_compGenPCode1( ( HB_BYTE ) ( iSign > 0 ? HB_P_GREATER : HB_P_LESS ), HB_COMP_PARAM );
                     if( (yyvsp[(8) - (12)].asExpr) )
                        HB_COMP_EXPR_FREE( (yyvsp[(8) - (12)].asExpr) );
                  }
                  else
                  {
                     HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[(8) - (12)].asExpr), HB_COMP_PARAM ) );   /* step */
                     hb_compGenPCode1( HB_P_FORTEST, HB_COMP_PARAM );
                  }

                  hb_compGenJumpFalse( (yyvsp[(11) - (12)].sNumber) - HB_COMP_PARAM->functions.pLast->nPCodePos, HB_COMP_PARAM );
                  hb_compLoopEnd( HB_COMP_PARAM );
                  if( hb_compExprAsSymbol( (yyvsp[(2) - (12)].asExpr) ) )
                     hb_compForEnd( HB_COMP_PARAM, hb_compExprAsSymbol( (yyvsp[(2) - (12)].asExpr) ) );
                  HB_COMP_EXPR_FREE( (yyvsp[(5) - (12)].asExpr) );  /* deletes $5, $2, $4 */
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ ( HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE );
               }
    break;

  case 537:

/* Line 1806 of yacc.c  */
#line 1615 "harbour.y"
    { (yyval.asExpr) = NULL; }
    break;

  case 538:

/* Line 1806 of yacc.c  */
#line 1616 "harbour.y"
    { (yyval.asExpr) = hb_compExprReduce( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); }
    break;

  case 539:

/* Line 1806 of yacc.c  */
#line 1620 "harbour.y"
    {
                     hb_compLinePush( HB_COMP_PARAM );
                     if( HB_COMP_PARAM->functions.pLast->wForCounter )
                        --HB_COMP_PARAM->functions.pLast->wForCounter;
                  }
    break;

  case 544:

/* Line 1806 of yacc.c  */
#line 1633 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewVarRef( (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); }
    break;

  case 545:

/* Line 1806 of yacc.c  */
#line 1634 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewRef( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); }
    break;

  case 546:

/* Line 1806 of yacc.c  */
#line 1637 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); }
    break;

  case 547:

/* Line 1806 of yacc.c  */
#line 1638 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); }
    break;

  case 548:

/* Line 1806 of yacc.c  */
#line 1641 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewVarRef( (yyvsp[(2) - (2)].string), HB_COMP_PARAM ); }
    break;

  case 550:

/* Line 1806 of yacc.c  */
#line 1645 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); }
    break;

  case 551:

/* Line 1806 of yacc.c  */
#line 1646 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); }
    break;

  case 552:

/* Line 1806 of yacc.c  */
#line 1651 "harbour.y"
    {
                ++HB_COMP_PARAM->functions.pLast->wForCounter;    /* 5 */
                hb_compLinePushIfInside( HB_COMP_PARAM );
                hb_compDebugStart();
             }
    break;

  case 553:

/* Line 1806 of yacc.c  */
#line 1657 "harbour.y"
    {
                /* 7 */
                (yyvsp[(2) - (6)].asExpr) = hb_compExprReduce( (yyvsp[(2) - (6)].asExpr), HB_COMP_PARAM );
                (yyvsp[(4) - (6)].asExpr) = hb_compExprReduce( (yyvsp[(4) - (6)].asExpr), HB_COMP_PARAM );
                hb_compEnumStart( HB_COMP_PARAM, (yyvsp[(2) - (6)].asExpr), (yyvsp[(4) - (6)].asExpr), (yyvsp[(6) - (6)].iNumber) );

                hb_compLoopStart( HB_COMP_PARAM, HB_TRUE );
                (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
             }
    break;

  case 554:

/* Line 1806 of yacc.c  */
#line 1667 "harbour.y"
    {
                /* 9 */
                (yyval.sNumber) = hb_compGenJumpFalse( 0, HB_COMP_PARAM );
             }
    break;

  case 555:

/* Line 1806 of yacc.c  */
#line 1672 "harbour.y"
    {
                hb_compLoopHere( HB_COMP_PARAM );
                hb_compEnumNext( HB_COMP_PARAM, (yyvsp[(2) - (10)].asExpr), (yyvsp[(6) - (10)].iNumber) );
                hb_compGenJump( (yyvsp[(7) - (10)].sNumber) - HB_COMP_PARAM->functions.pLast->nPCodePos, HB_COMP_PARAM );

                hb_compGenJumpHere( (yyvsp[(9) - (10)].sNumber), HB_COMP_PARAM );
                hb_compLoopEnd( HB_COMP_PARAM );
                HB_COMP_PARAM->functions.pLast->funFlags &= ~ ( HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE );
                hb_compEnumEnd( HB_COMP_PARAM, (yyvsp[(2) - (10)].asExpr) );
                HB_COMP_EXPR_FREE( (yyvsp[(2) - (10)].asExpr) );
                HB_COMP_EXPR_FREE( (yyvsp[(4) - (10)].asExpr) );
             }
    break;

  case 556:

/* Line 1806 of yacc.c  */
#line 1686 "harbour.y"
    { (yyval.iNumber) =  1; }
    break;

  case 557:

/* Line 1806 of yacc.c  */
#line 1687 "harbour.y"
    { (yyval.iNumber) = -1; }
    break;

  case 558:

/* Line 1806 of yacc.c  */
#line 1691 "harbour.y"
    {
                  hb_compLoopStart( HB_COMP_PARAM, HB_FALSE );
                  hb_compSwitchStart( HB_COMP_PARAM, (yyvsp[(1) - (1)].asExpr) );
                  hb_compGenJump( 0, HB_COMP_PARAM );
               }
    break;

  case 559:

/* Line 1806 of yacc.c  */
#line 1698 "harbour.y"
    {
                  hb_compSwitchEnd( HB_COMP_PARAM );
                  hb_compLoopEnd( HB_COMP_PARAM );
               }
    break;

  case 560:

/* Line 1806 of yacc.c  */
#line 1705 "harbour.y"
    {
                  HB_COMP_EXPR_FREE( (yyvsp[(1) - (2)].asExpr) );
               }
    break;

  case 561:

/* Line 1806 of yacc.c  */
#line 1711 "harbour.y"
    {
                  if( HB_COMP_PARAM->functions.pLast->wSwitchCounter )
                     --HB_COMP_PARAM->functions.pLast->wSwitchCounter;
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ ( HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE );
               }
    break;

  case 564:

/* Line 1806 of yacc.c  */
#line 1723 "harbour.y"
    {
                  ++HB_COMP_PARAM->functions.pLast->wSwitchCounter;
                  hb_compLinePushIfInside( HB_COMP_PARAM );
               }
    break;

  case 565:

/* Line 1806 of yacc.c  */
#line 1728 "harbour.y"
    {
                  (yyval.asExpr) = hb_compExprReduce( (yyvsp[(3) - (4)].asExpr), HB_COMP_PARAM );
               }
    break;

  case 567:

/* Line 1806 of yacc.c  */
#line 1735 "harbour.y"
    {
                  if( (yyvsp[(2) - (2)].lNumber) > 0 )
                  {
                     hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_MAYHEM_IN_CASE, NULL, NULL );
                  }
               }
    break;

  case 568:

/* Line 1806 of yacc.c  */
#line 1743 "harbour.y"
    { hb_compSwitchAdd( HB_COMP_PARAM, (yyvsp[(2) - (2)].asExpr) ); hb_compLinePush( HB_COMP_PARAM ); }
    break;

  case 570:

/* Line 1806 of yacc.c  */
#line 1746 "harbour.y"
    { hb_compSwitchAdd( HB_COMP_PARAM, (yyvsp[(3) - (3)].asExpr) ); hb_compLinePush( HB_COMP_PARAM ); }
    break;

  case 574:

/* Line 1806 of yacc.c  */
#line 1754 "harbour.y"
    { hb_compSwitchAdd( HB_COMP_PARAM, NULL ); hb_compLinePush( HB_COMP_PARAM ); }
    break;

  case 575:

/* Line 1806 of yacc.c  */
#line 1754 "harbour.y"
    { HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE; }
    break;

  case 577:

/* Line 1806 of yacc.c  */
#line 1759 "harbour.y"
    {              /* 2 */
                  hb_compLinePushIfInside( HB_COMP_PARAM );
                  ++HB_COMP_PARAM->functions.pLast->wSeqCounter;
                  (yyval.sNumber) = hb_compSequenceBegin( HB_COMP_PARAM );
               }
    break;

  case 578:

/* Line 1806 of yacc.c  */
#line 1767 "harbour.y"
    {              /* 6 */
                  /* Set jump address for HB_P_SEQBEGIN opcode - this address
                   * will be used in BREAK code if there is no RECOVER clause
                   */
                  if( (yyvsp[(3) - (5)].sNumber) )
                     hb_compGenPCode1( HB_P_POP, HB_COMP_PARAM );
                  hb_compGenJumpHere( (yyvsp[(2) - (5)].sNumber), HB_COMP_PARAM );
                  (yyval.sNumber) = hb_compSequenceEnd( HB_COMP_PARAM );
                  (yyvsp[(4) - (5)].lNumber) = hb_compLoopCount( HB_COMP_PARAM );
               }
    break;

  case 579:

/* Line 1806 of yacc.c  */
#line 1778 "harbour.y"
    {              /* 8 */
                  /* Replace END address with RECOVER address in
                   * HB_P_SEQBEGIN opcode if there is RECOVER clause
                   */
                  if( (yyvsp[(7) - (7)].sNumber) )
                     hb_compGenJumpThere( (yyvsp[(2) - (7)].sNumber), (yyvsp[(7) - (7)].sNumber), HB_COMP_PARAM );
                  else if( HB_COMP_PARAM->functions.pLast->wSeqCounter )
                     --HB_COMP_PARAM->functions.pLast->wSeqCounter;
               }
    break;

  case 580:

/* Line 1806 of yacc.c  */
#line 1788 "harbour.y"
    {              /* 10 */
                  long lLoopCount = hb_compLoopCount( HB_COMP_PARAM );
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ ( HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE );
                  if( (yyvsp[(9) - (9)].sNumber) )
                  {
                     if( (yyvsp[(4) - (9)].lNumber) != lLoopCount )
                     {
                        /* ALWAYS statement after RECOVER with EXIT/LOOP statments */
                        hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_ALWAYS_AFTER_EXIT, "EXIT/LOOP", NULL );
                     }
                     --HB_COMP_PARAM->functions.pLast->wAlwaysCounter;
                     /* replace END address with ALWAYS address in
                        HB_P_SEQEND opcode */
                     hb_compGenJumpThere( (yyvsp[(6) - (9)].sNumber), (yyvsp[(9) - (9)].sNumber), HB_COMP_PARAM );
                     /* Fix ALWAYS address in HB_P_SEQALWAYS opcode */
                     hb_compGenJumpThere( (yyvsp[(2) - (9)].sNumber) - 4, (yyvsp[(9) - (9)].sNumber), HB_COMP_PARAM );
                     /* Fix ALWAYSEND address in HB_P_ALWAYSBEGIN opcode */
                     hb_compGenJumpHere( (yyvsp[(9) - (9)].sNumber) + 1, HB_COMP_PARAM );
                     hb_compGenPCode1( HB_P_ALWAYSEND, HB_COMP_PARAM );
                  }
                  else
                  {
                     /* Fix END address in HB_P_SEQEND opcode */
                     hb_compGenJumpHere( (yyvsp[(6) - (9)].sNumber), HB_COMP_PARAM );
                  }
                  hb_compSequenceFinish( HB_COMP_PARAM, (yyvsp[(2) - (9)].sNumber), (yyvsp[(6) - (9)].sNumber), (yyvsp[(9) - (9)].sNumber),
                                         (yyvsp[(5) - (9)].lNumber) != 0, (yyvsp[(7) - (9)].sNumber) != 0, (yyvsp[(4) - (9)].lNumber) == lLoopCount );
               }
    break;

  case 584:

/* Line 1806 of yacc.c  */
#line 1823 "harbour.y"
    { (yyval.sNumber) = 0; }
    break;

  case 585:

/* Line 1806 of yacc.c  */
#line 1825 "harbour.y"
    {
                  HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ) );
                  hb_compGenPCode1( HB_P_SEQBLOCK, HB_COMP_PARAM );
                  (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
               }
    break;

  case 586:

/* Line 1806 of yacc.c  */
#line 1832 "harbour.y"
    { (yyval.sNumber) = 0; }
    break;

  case 588:

/* Line 1806 of yacc.c  */
#line 1837 "harbour.y"
    {
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ ( HB_FUNF_WITH_RETURN | HB_FUNF_BREAK_CODE );
                  (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
                  ++HB_COMP_PARAM->functions.pLast->wAlwaysCounter;
                  hb_compSequenceAlways( HB_COMP_PARAM );
               }
    break;

  case 589:

/* Line 1806 of yacc.c  */
#line 1845 "harbour.y"
    { (yyval.sNumber) = 0; HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE; }
    break;

  case 592:

/* Line 1806 of yacc.c  */
#line 1851 "harbour.y"
    {
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE;
                  (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
                  if( HB_COMP_PARAM->functions.pLast->wSeqCounter )
                     --HB_COMP_PARAM->functions.pLast->wSeqCounter;
                  hb_compLinePushIfInside( HB_COMP_PARAM );
                  hb_compGenPCode2( HB_P_SEQRECOVER, HB_P_POP, HB_COMP_PARAM );
               }
    break;

  case 593:

/* Line 1806 of yacc.c  */
#line 1862 "harbour.y"
    {
                  HB_COMP_PARAM->functions.pLast->funFlags &= ~ HB_FUNF_BREAK_CODE;
                  (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
                  if( HB_COMP_PARAM->functions.pLast->wSeqCounter )
                     --HB_COMP_PARAM->functions.pLast->wSeqCounter;
                  hb_compLinePushIfInside( HB_COMP_PARAM );
                  hb_compGenPCode1( HB_P_SEQRECOVER, HB_COMP_PARAM );
                  hb_compGenPopVar( (yyvsp[(2) - (2)].string), HB_COMP_PARAM );
               }
    break;

  case 594:

/* Line 1806 of yacc.c  */
#line 1880 "harbour.y"
    {
                  (yyval.asExpr) = hb_compExprNewFunCall( (yyvsp[(2) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM );
               }
    break;

  case 595:

/* Line 1806 of yacc.c  */
#line 1884 "harbour.y"
    {
                  hb_compModuleAdd( HB_COMP_PARAM, (yyvsp[(1) - (2)].string), HB_FALSE );
                  /* DOIDENT is the only one identifier which can be returned in lower letters */
                  (yyval.asExpr) = hb_compExprNewFunCall( hb_compExprNewFunName( hb_compIdentifierNew( HB_COMP_PARAM, hb_strupr( hb_strdup( (yyvsp[(1) - (2)].string) ) ), HB_IDENT_FREE ), HB_COMP_PARAM ), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM );
               }
    break;

  case 596:

/* Line 1806 of yacc.c  */
#line 1891 "harbour.y"
    { (yyval.asExpr) = NULL; }
    break;

  case 597:

/* Line 1806 of yacc.c  */
#line 1892 "harbour.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); }
    break;

  case 598:

/* Line 1806 of yacc.c  */
#line 1895 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( hb_compExprNewArgList( hb_compExprNewNil( HB_COMP_PARAM ), HB_COMP_PARAM ), hb_compExprNewNil( HB_COMP_PARAM ) ); }
    break;

  case 599:

/* Line 1806 of yacc.c  */
#line 1896 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( hb_compExprNewArgList( hb_compExprNewNil( HB_COMP_PARAM ), HB_COMP_PARAM ), (yyvsp[(2) - (2)].asExpr) ); }
    break;

  case 600:

/* Line 1806 of yacc.c  */
#line 1897 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); }
    break;

  case 601:

/* Line 1806 of yacc.c  */
#line 1898 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (2)].asExpr), hb_compExprNewNil( HB_COMP_PARAM ) ); }
    break;

  case 602:

/* Line 1806 of yacc.c  */
#line 1899 "harbour.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); }
    break;

  case 603:

/* Line 1806 of yacc.c  */
#line 1902 "harbour.y"
    { (yyval.asExpr) = hb_compExprNewVarRef( (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); }
    break;

  case 608:

/* Line 1806 of yacc.c  */
#line 1910 "harbour.y"
    {
                  hb_compLinePushIfInside( HB_COMP_PARAM );
                  HB_COMP_EXPR_FREE( hb_compExprGenPush( (yyvsp[(2) - (3)].asExpr), HB_COMP_PARAM ) );
                  (yyval.sNumber) = HB_COMP_PARAM->functions.pLast->nPCodePos;
                  hb_compGenPCode1( HB_P_WITHOBJECTSTART, HB_COMP_PARAM );
                  HB_COMP_PARAM->functions.pLast->wWithObjectCnt++;
               }
    break;

  case 609:

/* Line 1806 of yacc.c  */
#line 1919 "harbour.y"
    {  if( HB_COMP_PARAM->functions.pLast->wWithObjectCnt )
                    --HB_COMP_PARAM->functions.pLast->wWithObjectCnt;
                  if( (yyvsp[(5) - (6)].lNumber) )
                     hb_compGenPCode1( HB_P_WITHOBJECTEND, HB_COMP_PARAM );
                  else
                  {
                     hb_compNOOPfill( HB_COMP_PARAM->functions.pLast,
                                      (yyvsp[(4) - (6)].sNumber), 1, HB_FALSE, HB_TRUE );
                     hb_compGenPCode1( HB_P_POP, HB_COMP_PARAM );
                  }
               }
    break;

  case 612:

/* Line 1806 of yacc.c  */
#line 1936 "harbour.y"
    { HB_COMP_PARAM->fError = HB_FALSE; }
    break;



/* Line 1806 of yacc.c  */
#line 7612 "harboury.c"
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (pComp, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (pComp, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, pComp);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, pComp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (pComp, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, pComp);
    }
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, pComp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



/* Line 2067 of yacc.c  */
#line 1940 "harbour.y"


/*
 ** ------------------------------------------------------------------------ **
 */

/*
 * Avoid tracing in preprocessor/compiler.
 */
#if ! defined( HB_TRACE_UTILS )
   #if defined( HB_TRACE_LEVEL )
      #undef HB_TRACE_LEVEL
   #endif
#endif


/* ************************************************************************* */

/*
 * This function stores the position in pcode buffer where the FOR/WHILE
 * loop starts. It will be used to fix any LOOP/EXIT statements
 */
static void hb_compLoopStart( HB_COMP_DECL, HB_BOOL fCanLoop )
{
   PHB_LOOPEXIT pLoop = ( PHB_LOOPEXIT ) hb_xgrab( sizeof( HB_LOOPEXIT ) );
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;

   if( pFunc->pLoops )
   {
      PHB_LOOPEXIT pLast = pFunc->pLoops;

      while( pLast->pNext )
         pLast = pLast->pNext;
      pLast->pNext = pLoop;
   }
   else
      pFunc->pLoops = pLoop;

   pLoop->nOffset          = pFunc->nPCodePos;  /* store the start position */
   pLoop->fCanLoop         = fCanLoop;    /* can we use LOOP inside */
   pLoop->wSeqCounter      = pFunc->wSeqCounter;      /* store current SEQUENCE counter */
   pLoop->wWithObjectCnt   = pFunc->wWithObjectCnt;   /* store current WITH OBJECT counter */
   pLoop->wAlwaysCounter   = pFunc->wAlwaysCounter;   /* store current ALWAYS counter */
   pLoop->pExitList        = NULL;
   pLoop->pLoopList        = NULL;
   pLoop->pNext            = NULL;
}

/*
 * return number of LOOP of EXIT statement in the top most structure
 */
static long hb_compLoopCount( HB_COMP_DECL )
{
   PHB_LOOPEXIT pLastLoop, pLastExit, pLoop;
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;
   long lCount = 0;

   pLastLoop = pLastExit = NULL;
   pLoop = pFunc->pLoops;
   while( pLoop )
   {
      if( pLoop->fCanLoop )
         pLastLoop = pLoop;
      pLastExit = pLoop;
      pLoop = pLoop->pNext;
   }

   if( pLastLoop )
   {
      while( pLastLoop->pLoopList )
      {
         ++lCount;
         pLastLoop = pLastLoop->pLoopList;
      }
   }
   if( pLastExit )
   {
      while( pLastExit->pExitList )
      {
         ++lCount;
         pLastExit = pLastExit->pExitList;
      }
   }

   return lCount;
}

/*
 * Stores the position of LOOP statement to fix it later at the end of loop
 */
static void hb_compLoopLoop( HB_COMP_DECL )
{
   PHB_LOOPEXIT pLast = NULL, pLoop;
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;

   pLoop = pFunc->pLoops;
   while( pLoop )
   {
      if( pLoop->fCanLoop )
         pLast = pLoop;
      pLoop = pLoop->pNext;
   }

   if( ! pLast )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNMATCHED_EXIT, "LOOP", NULL );
   }
   else
   {
      if( pLast->wSeqCounter != pFunc->wSeqCounter )
      {
         /* Attempt to LOOP from BEGIN/END sequence
          * Current SEQUENCE counter is different then at the beginning of loop
          * Notice that LOOP is allowed in RECOVER code when there is no
          * ALWAYS block
          */
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "LOOP", NULL );
      }
      else if( pLast->wAlwaysCounter != pFunc->wAlwaysCounter )
      {
         /* Attempt to LOOP from ALWAYS block of BEGIN/END sequence
          */
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "LOOP", NULL );
      }
      else
      {
         HB_USHORT wWithObjectCnt = pLast->wWithObjectCnt;

         pLoop = ( PHB_LOOPEXIT ) hb_xgrab( sizeof( HB_LOOPEXIT ) );
         pLoop->pLoopList = NULL;
         while( pLast->pLoopList )
            pLast = pLast->pLoopList;
         pLast->pLoopList = pLoop;

         while( wWithObjectCnt < pFunc->wWithObjectCnt )
         {
            hb_compGenPCode1( HB_P_WITHOBJECTEND, HB_COMP_PARAM );
            wWithObjectCnt++;
         }
         /* store the position to fix */
         pLoop->nOffset = pFunc->nPCodePos;
         hb_compGenJump( 0, HB_COMP_PARAM );
      }
   }
}

/*
 * Stores the position of EXIT statement to fix it later at the end of loop
 */
static void hb_compLoopExit( HB_COMP_DECL )
{
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;

   if( ! pFunc->pLoops )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNMATCHED_EXIT, "EXIT", NULL );
   }
   else
   {
      PHB_LOOPEXIT pLast, pLoop;

      pLast = pFunc->pLoops;
      while( pLast->pNext )
         pLast = pLast->pNext;

      if( pLast->wSeqCounter != pFunc->wSeqCounter )
      {
         /* Attempt to EXIT from BEGIN/END sequence
          * Current SEQUENCE counter is different then at the beginning of loop
          * Notice that EXIT is allowed in RECOVER code when there is no
          * ALWAYS block
          */
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "EXIT", NULL );
      }
      else if( pLast->wAlwaysCounter != pFunc->wAlwaysCounter )
      {
         /* Attempt to EXIT from ALWAYS block of BEGIN/END sequence
          */
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "EXIT", NULL );
      }
      else
      {
         HB_USHORT wWithObjectCnt = pLast->wWithObjectCnt;

         pLoop = ( PHB_LOOPEXIT ) hb_xgrab( sizeof( HB_LOOPEXIT ) );
         pLoop->pExitList = NULL;
         while( pLast->pExitList )
            pLast = pLast->pExitList;
         pLast->pExitList = pLoop;

         while( wWithObjectCnt < pFunc->wWithObjectCnt )
         {
            hb_compGenPCode1( HB_P_WITHOBJECTEND, HB_COMP_PARAM );
            wWithObjectCnt++;
         }
         /* store the position to fix */
         pLoop->nOffset = pFunc->nPCodePos;
         hb_compGenJump( 0, HB_COMP_PARAM );
      }
   }
}

/*
 * Fixes the LOOP statement
 */
static void hb_compLoopHere( HB_COMP_DECL )
{
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;
   PHB_LOOPEXIT pLoop = pFunc->pLoops, pFree, pLast;

   if( pLoop )
   {
      while( pLoop->pNext )
         pLoop = pLoop->pNext;

      pLast = pLoop;
      pLoop = pLoop->pLoopList;
      while( pLoop )
      {
         hb_compGenJumpHere( pLoop->nOffset + 1, HB_COMP_PARAM );
         pFree = pLoop;
         pLoop = pLoop->pLoopList;
         hb_xfree( pFree );
      }
      pLast->pLoopList = NULL;
   }
}

/*
 * Fixes the EXIT statements and releases memory allocated for current loop
 */
static void hb_compLoopEnd( HB_COMP_DECL )
{
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;
   PHB_LOOPEXIT pLoop = pFunc->pLoops, pLast = pFunc->pLoops, pExit, pFree;

   if( pLoop )
   {
      while( pLoop->pNext )
      {
         pLast = pLoop;
         pLoop = pLoop->pNext;
      }

      pExit = pLoop->pExitList;
      while( pExit )
      {
         hb_compGenJumpHere( pExit->nOffset + 1, HB_COMP_PARAM );
         pFree = pExit;
         pExit = pExit->pExitList;
         hb_xfree( pFree );
      }

      pLast->pNext = NULL;
      if( pLoop == pFunc->pLoops )
         pFunc->pLoops = NULL;
      hb_xfree( pLoop );
   }
}

void hb_compLoopKill( PHB_HFUNC pFunc )
{
   PHB_LOOPEXIT pLoop, pFree;

   while( pFunc->pLoops )
   {
      pLoop = pFunc->pLoops;
      while( pLoop->pExitList )
      {
         pFree = pLoop->pExitList;
         pLoop->pExitList = pFree->pExitList;
         hb_xfree( pFree );
      }
      while( pLoop->pLoopList )
      {
         pFree = pLoop->pLoopList;
         pLoop->pLoopList = pFree->pLoopList;
         hb_xfree( pFree );
      }
      pFunc->pLoops = pLoop->pNext;
      hb_xfree( pLoop );
   }
}

static void * hb_compElseIfGen( HB_COMP_DECL, void * pFirst, HB_SIZE nOffset )
{
   PHB_ELSEIF pElseIf = ( PHB_ELSEIF ) hb_xgrab( sizeof( HB_ELSEIF ) ), pLast;
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;

   pElseIf->nOffset = nOffset;
   pElseIf->pPrev   = NULL;
   pElseIf->pElseif = NULL;

   if( pFirst )
   {
      pLast = ( PHB_ELSEIF ) pFirst;
      while( pLast->pElseif )
         pLast = pLast->pElseif;
      pLast->pElseif = pElseIf;
   }
   else
   {
      if( pFunc->elseif )
      {
         pElseIf->pPrev = pFunc->elseif;
      }
      pFirst = pElseIf;
      pFunc->elseif = pElseIf;
   }
   return pFirst;
}


static void hb_compElseIfFix( HB_COMP_DECL, void * pFixElseIfs )
{
   PHB_ELSEIF pFix = ( PHB_ELSEIF ) pFixElseIfs;
   PHB_ELSEIF pDel;

   HB_COMP_PARAM->functions.pLast->elseif = pFix->pPrev;
   while( pFix )
   {
      hb_compGenJumpHere( pFix->nOffset, HB_COMP_PARAM );
      pDel = pFix;
      pFix = pFix->pElseif;
      hb_xfree( pDel );
   }
}

void hb_compElseIfKill( PHB_HFUNC pFunc )
{
   PHB_ELSEIF pFix;
   PHB_ELSEIF pDel;

   while( pFunc->elseif )
   {
      pFix = pFunc->elseif;
      pFunc->elseif = pFix->pPrev;
      while( pFix )
      {
         pDel = pFix;
         pFix = pFix->pElseif;
         hb_xfree( pDel );
      }
   }
}

static void hb_compRTVariableAdd( HB_COMP_DECL, PHB_EXPR pVar, HB_BOOL bPopInitValue )
{
   PHB_RTVAR pRTvar = ( PHB_RTVAR ) hb_xgrab( sizeof( HB_RTVAR ) );
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;

   pRTvar->pVar = pVar;
   pRTvar->bPopValue = bPopInitValue;
   pRTvar->pNext = NULL;
   pRTvar->pPrev = NULL;

   if( pFunc->rtvars )
   {
      PHB_RTVAR pLast = pFunc->rtvars;
      while( pLast->pNext )
         pLast = pLast->pNext;
      pLast->pNext = pRTvar;
      pRTvar->pPrev = pLast;
   }
   else
      pFunc->rtvars = pRTvar;
}

static void hb_compRTVariableGen( HB_COMP_DECL, const char * szCreateFun )
{
   HB_USHORT usCount = 0;
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;
   PHB_RTVAR pVar = pFunc->rtvars;
   PHB_RTVAR pDel;

   /* generate the function call frame */
   hb_compGenPushFunCall( szCreateFun, HB_FN_UDF, HB_COMP_PARAM );

   /* push variable names to create */
   while( pVar->pNext )
   {
      pVar->pVar = hb_compExprGenPush( pVar->pVar, HB_COMP_PARAM );
      pVar = pVar->pNext;
      ++usCount;
   }
   pVar->pVar = hb_compExprGenPush( pVar->pVar, HB_COMP_PARAM );
   ++usCount;

   /* call function that will create either PUBLIC or PRIVATE variables */
   if( usCount > 255 )
      hb_compGenPCode3( HB_P_DO, HB_LOBYTE( usCount ), HB_HIBYTE( usCount ), HB_COMP_PARAM );
   else
      hb_compGenPCode2( HB_P_DOSHORT, ( HB_BYTE ) usCount, HB_COMP_PARAM );

   /* pop initial values */
   while( pVar )
   {
      if( pVar->bPopValue )
         HB_COMP_EXPR_FREE( hb_compExprGenPop( pVar->pVar, HB_COMP_PARAM ) );
      else
         HB_COMP_EXPR_FREE( pVar->pVar );
      pDel = pVar;
      pVar = pVar->pPrev;
      hb_xfree( pDel );
   }
   pFunc->rtvars = NULL;
}

void hb_compRTVariableKill( HB_COMP_DECL, PHB_HFUNC pFunc )
{
   PHB_RTVAR pVar;

   while( pFunc->rtvars )
   {
      pVar = pFunc->rtvars;

      HB_COMP_EXPR_FREE( pVar->pVar );
      pFunc->rtvars = pVar->pPrev;
      hb_xfree( pVar );
   }
   pFunc->rtvars = NULL;
}

static PHB_EXPR hb_compArrayDimPush( PHB_EXPR pInitValue, HB_COMP_DECL )
{
   HB_USHORT uCount = ( HB_USHORT ) hb_compExprListLen( pInitValue );

   if( uCount == 1 && hb_compExprIsInteger( pInitValue->value.asList.pExprList ) &&
       hb_compExprAsInteger( pInitValue->value.asList.pExprList ) == 0 )
   {
      hb_compGenPCode3( HB_P_ARRAYGEN, 0, 0, HB_COMP_PARAM );
   }
   else
   {
      pInitValue = hb_compExprGenPush( pInitValue, HB_COMP_PARAM );
      hb_compGenPCode3( HB_P_ARRAYDIM, HB_LOBYTE( uCount ), HB_HIBYTE( uCount ), HB_COMP_PARAM );
   }
   return pInitValue;
}

static void hb_compVariableDim( const char * szName, PHB_EXPR pInitValue, HB_COMP_DECL )
{
   if( HB_COMP_PARAM->iVarScope == HB_VSCOMP_PUBLIC || HB_COMP_PARAM->iVarScope == HB_VSCOMP_PRIVATE )
   {
      hb_compVariableAdd( HB_COMP_PARAM, szName, hb_compVarTypeNew( HB_COMP_PARAM, 'A', NULL ) );
      HB_COMP_EXPR_FREE( hb_compArrayDimPush( pInitValue, HB_COMP_PARAM ) );
      hb_compRTVariableAdd( HB_COMP_PARAM, hb_compExprNewRTVar( szName, NULL, HB_COMP_PARAM ), HB_TRUE );
   }
   else if( HB_COMP_PARAM->iVarScope & HB_VSCOMP_STATIC )
   {
      PHB_EXPR pVar = hb_compExprNewVar( szName, HB_COMP_PARAM );
      PHB_EXPR pAssign;

      /* create a static variable */
      hb_compVariableAdd( HB_COMP_PARAM, szName, hb_compVarTypeNew( HB_COMP_PARAM, 'A', NULL ) );

      hb_compStaticDefStart( HB_COMP_PARAM );   /* switch to statics pcode buffer */
      /* create an array */
      pInitValue = hb_compArrayDimPush( pInitValue, HB_COMP_PARAM );
      /* now pop an array */
      pVar = hb_compExprGenPop( pVar, HB_COMP_PARAM );
      /* check if valid initializers were used but don't generate any code */
      pAssign = hb_compExprAssignStatic( pVar, pInitValue, HB_COMP_PARAM );
      /* delete all used expressions */
      HB_COMP_EXPR_FREE( pAssign );
      hb_compStaticDefEnd( HB_COMP_PARAM, szName );
   }
   else
   {
      hb_compVariableAdd( HB_COMP_PARAM, szName, hb_compVarTypeNew( HB_COMP_PARAM, 'A', NULL ) );
      HB_COMP_EXPR_FREE( hb_compArrayDimPush( pInitValue, HB_COMP_PARAM ) );
      if( HB_COMP_PARAM->iVarScope != HB_VSCOMP_LOCAL ||
          !( HB_COMP_PARAM->functions.pLast->funFlags & HB_FUNF_EXTBLOCK ) )
      {
         HB_COMP_EXPR_FREE( hb_compExprGenPop( hb_compExprNewVar( szName, HB_COMP_PARAM ), HB_COMP_PARAM ) );
      }
   }
}

static void hb_compForStart( HB_COMP_DECL, const char *szVarName, int iForEachDir )
{
   PHB_ENUMERATOR pEnumVar;

   pEnumVar = HB_COMP_PARAM->functions.pLast->pEnum;
   if( pEnumVar == NULL )
   {
      HB_COMP_PARAM->functions.pLast->pEnum = ( PHB_ENUMERATOR ) hb_xgrab( sizeof( HB_ENUMERATOR ) );
      pEnumVar = HB_COMP_PARAM->functions.pLast->pEnum;
   }
   else
   {
      HB_BOOL bWarn = HB_TRUE;
      PHB_ENUMERATOR pLast = pEnumVar;

      while( pEnumVar )
      {
         if( strcmp( pEnumVar->szName, szVarName ) == 0 )
         {
            /* Enumerator variable exists already - throw warning */
            if( bWarn )
            {
               hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_FORVAR_DUPL, szVarName, NULL );
               bWarn = HB_FALSE;
            }
         }
         pLast = pEnumVar;
         pEnumVar = pEnumVar->pNext;
      }
      pLast->pNext = ( PHB_ENUMERATOR ) hb_xgrab( sizeof( HB_ENUMERATOR ) );
      pEnumVar = pLast->pNext;
   }
   pEnumVar->szName      = szVarName;
   pEnumVar->iForEachDir = iForEachDir;
   pEnumVar->pNext       = NULL;
}

static HB_BOOL hb_compForEachVarError( HB_COMP_DECL, const char *szVarName, int * piDir )
{
   PHB_ENUMERATOR pEnumVar;

   pEnumVar = HB_COMP_PARAM->functions.pLast->pEnum;
   if( pEnumVar && ! HB_COMP_PARAM->functions.pLast->bBlock )
   {
      while( pEnumVar )
      {
         if( strcmp( pEnumVar->szName, szVarName ) == 0 )
         {
            * piDir = pEnumVar->iForEachDir;
            if( * piDir != 0 )
            {
               /* only if it is FOR EACH enumerator
                * generate warning if it is FOR/NEXT loop
               */
               return HB_FALSE;
            }
         }
         pEnumVar = pEnumVar->pNext;
      }
   }

   hb_compGenWarning( HB_COMP_PARAM, hb_comp_szWarnings, 'W', HB_COMP_WARN_ENUM_INVALID, szVarName, NULL );
   return HB_TRUE;
}

static void hb_compForEnd( HB_COMP_DECL, const char *szVar )
{
   PHB_ENUMERATOR * pEnumVar;

   HB_SYMBOL_UNUSED( szVar );

   pEnumVar = &HB_COMP_PARAM->functions.pLast->pEnum;
   if( *pEnumVar )
   {
      while( ( *pEnumVar )->pNext )
         pEnumVar = &( *pEnumVar )->pNext;

      hb_xfree( *pEnumVar );
      *pEnumVar = NULL;
   }
}

static HB_COMP_CARGO2_FUNC( hb_compEnumEvalStart )
{
   const char * szName = hb_compExprAsSymbol( ( PHB_EXPR ) cargo );

   if( szName )
      hb_compForStart( HB_COMP_PARAM, szName, HB_COMP_PARAM->fDescend ? -1 : 1 );

   hb_compExprGenPush( ( PHB_EXPR ) dummy, HB_COMP_PARAM );  /* expression */
   hb_compExprGenPush( ( PHB_EXPR ) cargo, HB_COMP_PARAM );  /* variable */
}

static void hb_compEnumStart( HB_COMP_DECL, PHB_EXPR pVars, PHB_EXPR pExprs, int descend )
{
   HB_SIZE ulLen;

   if( hb_compExprListLen( pVars ) != hb_compExprListLen( pExprs ) )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_FORVAR_DIFF, NULL, NULL );
   }

   HB_COMP_PARAM->fDescend = descend < 0;
   ulLen = hb_compExprListEval2( HB_COMP_PARAM, pVars, pExprs, hb_compEnumEvalStart );

   if( ulLen > 255 )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_FORVAR_TOOMANY, NULL, NULL );
   }
   else
   {
      hb_compGenPCode3( HB_P_ENUMSTART, ( HB_BYTE ) ( ulLen & 0xFF ), ( HB_BYTE ) ( descend > 0 ? 1 : 0 ), HB_COMP_PARAM );
   }
}

static void hb_compEnumNext( HB_COMP_DECL, PHB_EXPR pExpr, int descend )
{
   HB_SYMBOL_UNUSED( pExpr );
   if( descend > 0 )
   {
      hb_compGenPCode1( HB_P_ENUMNEXT, HB_COMP_PARAM );
   }
   else
   {
      hb_compGenPCode1( HB_P_ENUMPREV, HB_COMP_PARAM );
   }
}

static HB_COMP_CARGO_FUNC( hb_compEnumEvalEnd )
{
   const char * szName = hb_compExprAsSymbol( ( PHB_EXPR ) cargo );

   if( szName )
      hb_compForEnd( HB_COMP_PARAM, szName );
}

static void hb_compEnumEnd( HB_COMP_DECL, PHB_EXPR pExpr )
{
   hb_compExprListEval( HB_COMP_PARAM, pExpr, hb_compEnumEvalEnd );
   hb_compGenPCode1( HB_P_ENUMEND, HB_COMP_PARAM );
}

static void hb_compSwitchStart( HB_COMP_DECL, PHB_EXPR pExpr )
{
   PHB_SWITCHCMD pSwitch = ( PHB_SWITCHCMD ) hb_xgrab( sizeof( HB_SWITCHCMD ) );
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;

   pSwitch->pCases = NULL;
   pSwitch->pLast  = NULL;
   pSwitch->nDefault = 0;
   pSwitch->nOffset = pFunc->nPCodePos;
   pSwitch->pExpr = pExpr;
   pSwitch->pPrev = pFunc->pSwitch;
   pFunc->pSwitch = pSwitch;
}

static void hb_compSwitchAdd( HB_COMP_DECL, PHB_EXPR pExpr )
{
   PHB_SWITCHCASE pCase;
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;

   pFunc->funFlags &= ~HB_FUNF_BREAK_CODE;

   if( pExpr )
   {
      /* normal CASE */
      pCase = ( PHB_SWITCHCASE ) hb_xgrab( sizeof( HB_SWITCHCASE ) );
      pCase->nOffset = pFunc->nPCodePos;
      pCase->pNext = NULL;
      pCase->pExpr = pExpr = hb_compExprReduce( pExpr, HB_COMP_PARAM );
      if( !( hb_compExprIsLong( pExpr ) || hb_compExprIsString( pExpr ) ) )
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_NOT_LITERAL_CASE, NULL, NULL );
      else if( pFunc->pSwitch->pCases )
      {
         PHB_SWITCHCASE pCases = pFunc->pSwitch->pCases;
         while( pCases )
         {
            HB_BOOL fEqual = HB_FALSE;

            if( hb_compExprIsLong( pExpr ) )
            {
               if( hb_compExprIsLong( pCases->pExpr ) )
                  fEqual = hb_compExprAsLongNum( pExpr ) == hb_compExprAsLongNum( pCases->pExpr );
            }
            else
            {
               if( hb_compExprIsString( pCases->pExpr ) )
                  fEqual = hb_compExprAsStringLen( pExpr ) == hb_compExprAsStringLen( pCases->pExpr ) &&
                           memcmp( hb_compExprAsString( pExpr ),
                                   hb_compExprAsString( pCases->pExpr ),
                                   hb_compExprAsStringLen( pExpr ) ) == 0;
            }
            if( fEqual )
               hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_DUPL_CASE, NULL, NULL );
            pCases = pCases->pNext;
         }
      }

      if( pFunc->pSwitch->pLast )
      {
         pFunc->pSwitch->pLast->pNext = pCase;
         pFunc->pSwitch->pLast = pCase;
      }
      else
      {
         pFunc->pSwitch->pCases = pFunc->pSwitch->pLast = pCase;
      }
      if( hb_compExprIsString( pExpr ) && hb_compExprAsStringLen( pExpr ) > 255 )
      {
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_INVALID_STR, NULL, NULL );
      }
   }
   else
   {
      /* DEFAULT */
      if( pFunc->pSwitch->nDefault )
      {
         /* more than one default clause */
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_MAYHEM_IN_CASE, NULL, NULL );
      }
      else
      {
         pFunc->pSwitch->nDefault = pFunc->nPCodePos;
      }
   }
}

static void hb_compSwitchEnd( HB_COMP_DECL )
{
   PHB_HFUNC pFunc = HB_COMP_PARAM->functions.pLast;
   PHB_SWITCHCMD pSwitch = pFunc->pSwitch;
   PHB_EXPR pExpr = pSwitch->pExpr;
   PHB_SWITCHCASE pCase, pTmp;
   HB_SIZE ulExitPos, ulCountPos;
   int iCount = 0;

   /* skip switch pcode if there was no EXIT in the last CASE
    * or in the DEFAULT case
   */
   ulExitPos = hb_compGenJump( 0, HB_COMP_PARAM );
   hb_compGenJumpHere( pSwitch->nOffset + 1, HB_COMP_PARAM );

   pCase = pSwitch->pCases;
   if( hb_compExprIsLong( pExpr ) || hb_compExprIsString( pExpr ) )
   {
      HB_BOOL fGen = HB_FALSE;
      while( pCase )
      {
         if( hb_compExprIsLong( pCase->pExpr ) )
         {
            fGen = hb_compExprIsLong( pExpr ) &&
                   hb_compExprAsLongNum( pExpr ) ==
                   hb_compExprAsLongNum( pCase->pExpr );
         }
         else if( hb_compExprIsString( pCase->pExpr ) )
         {
            fGen = hb_compExprIsString( pExpr ) &&
                   hb_compExprAsStringLen( pExpr ) ==
                   hb_compExprAsStringLen( pCase->pExpr ) &&
                   memcmp( hb_compExprAsString( pExpr ),
                           hb_compExprAsString( pCase->pExpr ),
                           hb_compExprAsStringLen( pExpr ) ) == 0;
         }
         if( fGen )
         {
            hb_compGenJumpThere( hb_compGenJump( 0, HB_COMP_PARAM ),
                                 pCase->nOffset, HB_COMP_PARAM );
            break;
         }
         pCase = pCase->pNext;
      }
      if( pSwitch->nDefault && ! fGen )
      {
         hb_compGenJumpThere( hb_compGenJump( 0, HB_COMP_PARAM ),
                              pSwitch->nDefault, HB_COMP_PARAM );
      }
   }
   else
   {
      HB_BOOL fSwitchCase = HB_COMP_PARAM->fSwitchCase;
      HB_BOOL fMacroText = ( HB_COMP_PARAM->supported & HB_COMPFLAG_MACROTEXT ) != 0;

      pExpr = hb_compExprGenPush( pExpr, HB_COMP_PARAM );
      ulCountPos = pFunc->nPCodePos + 1;
      hb_compGenPCode3( HB_P_SWITCH, 0, 0, HB_COMP_PARAM );
      HB_COMP_PARAM->fSwitchCase = HB_TRUE;
      HB_COMP_PARAM->supported &= ~HB_COMPFLAG_MACROTEXT;
      while( pCase )
      {
         if( hb_compExprIsLong( pCase->pExpr ) || hb_compExprIsString( pCase->pExpr ) )
         {
            iCount++;
            pCase->pExpr = hb_compExprGenPush( pCase->pExpr, HB_COMP_PARAM );
            hb_compGenJumpThere( hb_compGenJump( 0, HB_COMP_PARAM ),
                                 pCase->nOffset, HB_COMP_PARAM );
         }
         pCase = pCase->pNext;
      }
      if( pSwitch->nDefault )
      {
         iCount++;
         hb_compGenPCode1( HB_P_PUSHNIL, HB_COMP_PARAM );
         hb_compGenJumpThere( hb_compGenJump( 0, HB_COMP_PARAM ),
                              pSwitch->nDefault, HB_COMP_PARAM );
      }
      HB_PUT_LE_UINT16( pFunc->pCode + ulCountPos, iCount );

      HB_COMP_PARAM->fSwitchCase = fSwitchCase;
      if( fMacroText )
         HB_COMP_PARAM->supported |= HB_COMPFLAG_MACROTEXT;
   }

   hb_compGenJumpHere( ulExitPos, HB_COMP_PARAM );

   if( pExpr )
      HB_COMP_EXPR_FREE( pExpr );

   pCase = pSwitch->pCases;
   while( pCase )
   {
      HB_COMP_EXPR_FREE( pCase->pExpr );
      pTmp = pCase->pNext;
      hb_xfree( pCase );
      pCase = pTmp;
   }
   pFunc->pSwitch = pSwitch->pPrev;
   hb_xfree( pSwitch );
}

/* Release all switch statements
*/
void hb_compSwitchKill( HB_COMP_DECL, PHB_HFUNC pFunc )
{
   PHB_SWITCHCASE pCase;
   PHB_SWITCHCMD pSwitch;

   while( pFunc->pSwitch )
   {
      while( pFunc->pSwitch->pCases )
      {
         pCase = pFunc->pSwitch->pCases;
         HB_COMP_EXPR_FREE( pCase->pExpr );
         pFunc->pSwitch->pCases = pCase->pNext;
         hb_xfree( pCase );
      }
      pSwitch = pFunc->pSwitch;
      pFunc->pSwitch = pSwitch->pPrev;
      if( pSwitch->pExpr )
         HB_COMP_EXPR_FREE( pSwitch->pExpr );
      hb_xfree( pSwitch );
   }
}

static PHB_EXPR hb_compCheckPassByRef( HB_COMP_DECL, PHB_EXPR pExpr )
{
   if( pExpr->ExprType == HB_ET_FUNCALL )
   {
      if( hb_compExprParamListLen( pExpr->value.asFunCall.pParms ) == 0 )
      {
         PHB_EXPR pDelExpr = pExpr;
         if( pExpr->value.asFunCall.pFunName->ExprType == HB_ET_MACRO )
         {
            pExpr = pExpr->value.asFunCall.pFunName;
            HB_COMP_EXPR_CLEAR( pDelExpr );
         }
         else
         {
            pExpr = hb_compExprNewFunRef( hb_compExprAsSymbol( pExpr ), HB_COMP_PARAM );
            HB_COMP_EXPR_FREE( pDelExpr );
         }
         return pExpr;
      }
      else
      {
         const char * szDesc;

         szDesc = hb_compExprAsSymbol( pExpr );
         if( ! szDesc )
            szDesc = hb_compExprDescription( pExpr );

         return hb_compErrorRefer( HB_COMP_PARAM, pExpr, szDesc );
      }
   }

   return pExpr;
}

static PHB_EXPR hb_compCheckMethod( HB_COMP_DECL, PHB_EXPR pExpr )
{
   if( pExpr->value.asMessage.szMessage &&
       pExpr->value.asMessage.pObject &&
       pExpr->value.asMessage.pObject->ExprType == HB_ET_VARIABLE &&
       pExpr->value.asMessage.szMessage[ 0 ] == '_' &&
       strncmp( "__ENUM", pExpr->value.asMessage.szMessage, 6 ) == 0 )
   {
      const char * szMessage = pExpr->value.asMessage.szMessage + 6;

      if( strcmp( "INDEX",   szMessage ) == 0 ||
          strcmp( "KEY",     szMessage ) == 0 ||
          strcmp( "BASE",    szMessage ) == 0 ||
          strcmp( "VALUE",   szMessage ) == 0 ||
          strcmp( "ISFIRST", szMessage ) == 0 ||
          strcmp( "ISLAST",  szMessage ) == 0 )
      {
         int iDir = 0;
         if( ! hb_compForEachVarError( HB_COMP_PARAM, pExpr->value.asMessage.pObject->value.asSymbol.name, &iDir ) )
         {
            pExpr->value.asMessage.pObject->ExprType = HB_ET_VARREF;
#if 0
            if( iDir < 0 )
            {
               if( strcmp( "ISFIRST", szMessage ) == 0 )
                  pExpr->value.asMessage.szMessage = "__ENUMISLAST";
               else if( strcmp( "ISLAST",  szMessage ) == 0 )
                  pExpr->value.asMessage.szMessage = "__ENUMISFIRST";
            }
#endif
         }
      }
   }

   return pExpr;
}

/* ************************************************************************* */

HB_BOOL hb_compCheckUnclosedStru( HB_COMP_DECL, PHB_HFUNC pFunc )
{
   HB_BOOL fUnclosed = HB_TRUE;

   if( pFunc->wIfCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "IF", NULL );
      pFunc->wIfCounter = 0;
   }
   else if( pFunc->wForCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "FOR", NULL );
      pFunc->wForCounter = 0;
   }
   else if( pFunc->wWhileCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "WHILE", NULL );
      pFunc->wWhileCounter = 0;
   }
   else if( pFunc->wCaseCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "CASE", NULL );
      pFunc->wCaseCounter = 0;
   }
   else if( pFunc->wSwitchCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "SWITCH", NULL );
      pFunc->wSwitchCounter = 0;
   }
   else if( pFunc->wWithObjectCnt )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "WITH OBJECT", NULL );
      pFunc->wWithObjectCnt = 0;
   }
   else if( pFunc->wSeqCounter )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "BEGIN SEQUENCE", NULL );
      pFunc->wSeqCounter = 0;
   }
   else if( pFunc->funFlags & HB_FUNF_EXTBLOCK )
   {
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, "{||...}", NULL );
      pFunc->funFlags &= ~HB_FUNF_EXTBLOCK;
   }
   else
      fUnclosed = HB_FALSE;

   return fUnclosed;
}

void yyerror( HB_COMP_DECL, const char * s )
{
   if( ! HB_COMP_PARAM->pLex->lasttok || HB_COMP_PARAM->pLex->lasttok[ 0 ] == '\n' )
   {
      if( HB_COMP_PARAM->iErrorCount == 0 || ! hb_pp_eof( HB_COMP_PARAM->pLex->pPP ) )
         hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_INCOMPLETE_STMT, NULL, NULL );
   }
   else
      hb_compGenError( HB_COMP_PARAM, hb_comp_szErrors, 'E', HB_COMP_ERR_YACC, s, HB_COMP_PARAM->pLex->lasttok );
}
